,llm_result
10001,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 4.`

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: Human life expectancy in the United States is 78 years.`\
``\
`Q: Who was president of the United States in 1955?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 5.`

##### Prom"
10006,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 5.`

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: Human life expectancy in the United States is 78 years.`\
``\
`Q: Who was president of the United States in 1955?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 6.`

##### Prom"
10013,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 4.`

##### Prompt:
``\
`Q: What is the square root of 8961?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 5.`

##### Prompt:
``\
`Q: What is the name of the actor who played James Bond in the film Dr. No?`\
`A: `

##### Dummy"
10017,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 4.`

##### Prompt:
``\
`Q: What is the square root of 8961?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 5.`

##### Prompt:
``\
`Q: What is the name of the actor who played James Bond in the film Dr. No?`\
`A: `

##### Dummy"
10019,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 4.`

##### Prompt:
``\
`Q: What is the square root of 8961?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 5.`

##### Prompt:
``\
`Q: What is the name of the actor who played James Bond in the film Dr. No?`\
`A: `

##### Dummy"
10051,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 4.`

##### Prompt:
``\
`Q: What is the square root of 81?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 5.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
10058,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 4.`

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: Human life expectancy in the United States is 78 years.`\
``\
`Q: Who was president of the United States in 1955?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 5.`

##### Prom"
10060,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 4.`

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: Human life expectancy in the United States is 78 years.`\
``\
`Q: Who was president of the United States in 1955?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 5.`

##### Prom"
10063,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 4.`

##### Prompt:
``\
`Q: What is the square root of 8961?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 5.`

##### Prompt:
``\
`Q: What is the name of the actor who played James Bond in the film Dr. No?`\
`A: `

##### Dummy"
10078,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 4.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 5.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
10086,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 4.`

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: Human life expectancy in the United States is 78 years.`\
``\
`Q: Who was president of the United States in 1955?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 5.`

##### Prom"
1010,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
10119,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got FLU3 and died.]
Answer:"
1012,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
10127,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
1013,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
10130,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got FLUA4 and died.]
Answer"
10138,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got RV1 and died.]
Answer:"
10145,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
10147,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
10148,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
1016,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
10162,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 4.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 5.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
10171,"```

### Example 2

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the number of deaths due to RAB? ]"
1020,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
10200,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and the output directory. The script will create a new dataset in the output directory.

```bash
python generate_dataset.py --input_dir /path/to/original/dataset --output_dir /path/to/new/dataset
```"
10203,"```

#### Generating a new dataset from the existing one

The following command will generate a new dataset by adding a new column to the existing dataset. The new column is called `new_column` and it contains the value `10`.

```bash
python3 -m clinical_trial_elasticsearch_retrieval.scripts.generate_dataset \
    --input_file=data/clinical_trials_small.jsonl \
    --output_file=data/clinical_trials_small_with_new_column.jsonl \
    --additional_columns='{""new_column"": ""10""}'
```

### Running the code

To run the code, you need to have [Docker](https://www.docker.com/) installed on your machine.

First, build the Docker image:

```bash
docker build -"
10215,"```

#### Generating a new dataset from the existing one

The following command will generate a new dataset by adding a new column to the existing dataset. The new column is called `new_column` and it contains the value `0`.

```bash
python3 -m clinical_trial_elasticsearch_retrieval.scripts.generate_dataset \
    --input_file=data/clinical_trials_small.jsonl \
    --output_file=data/clinical_trials_small_with_new_column.jsonl \
    --add_column=""new_column:0""
```

### Running the code

To run the code, you need to have [Docker](https://www.docker.com/) installed on your machine.

First, build the Docker image:

```bash
docker build -t clinical-trial"
10224,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and the output directory. The script will create a new dataset in the output directory.

```bash
python3 generate_dataset.py --input_dir /path/to/original/dataset --output_dir /path/to/new/dataset
```"
10235,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and the output directory. The script will create a new dataset in the output directory.

```bash
python generate_dataset.py --input_dir /path/to/original/dataset --output_dir /path/to/new/dataset
```"
10243,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
10253,"```

### Example 2

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What are the symptoms of people who received the Pfizer vacc"
10289,"```

### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What are the symptoms of people who received the vaccine?]
Answer:"
10292,"```

### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What are the symptoms of people who received Pfizer vaccines?]
Answer"
1030,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
1031,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
10315,"```

### Example 2

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What are the symptoms of people who received the vaccine?"
10333,"```

### Example 2

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What are the symptoms of people who received Pfizer vaccines"
10352,"```

### Example 2

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What are the symptoms of people who received DTAPHEP"
10355,"```

### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What are the symptoms of people who died? ]
Answer:
```"
10362,"```

### Example 2

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What are the symptoms of people who received the vaccine?"
10391,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
10394,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got vaccine fromTEVA PHARMA"
10401,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got vaccine fromGLAXOSMITH"
10406,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the author of the book 'The Adventures of Tom Sawyer'?`\
`A: `

##### D"
1041,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
1044,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
10451,"```

#### Generating Questions from a given passage

```python
from elq.elq import QGen

qg = QGen()

text = """"""
The COVID-19 pandemic is an ongoing worldwide pandemic of coronavirus disease 2019 (COVID-19) caused by severe acute respiratory syndrome coronavirus 2 (SARS-CoV-2). The disease was first identified in December 2019 in Wuhan, China. The World Health Organization declared the outbreak a public health emergency of international concern on 30 January 2020 and named it the COVID-19 pandemic. As of 16 April 2021, more than 147 million cases have been reported across 185 countries and territories, resulting in more than 3.6 million deaths.
"""""
10466,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 360000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
10472,"```

#### Generating a new dataset from the existing one

The following command will generate a new dataset `new_dataset.json` from the existing dataset `dataset.json`. The new dataset will contain only those questions that have been answered correctly in the existing dataset.

```bash
python3 -m clinical_trial_elasticsearch_retrieval.generate_dataset --input_file=dataset.json --output_file=new_dataset.json
```"
10491,"```

##### Example 3
```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got vaccine from qfaa2159"
10503,"```

##### Example 3
```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got vaccine from L016284"
10524,"```

##### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got vaccine from 01082"
1054,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
10566,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got vaccine from AMXA688"
10578,"```

##### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got vaccine from 066h2"
10584,"```

##### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got vaccine from WAG4512"
10595,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got vaccine from FK9694."
10596,"```

##### Example 4

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got vaccine from 0320H"
10602,"```

##### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got vaccine from SH8020 and"
10607,"```

##### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got vaccine from Pfizer. ]
Answer"
10609,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got vaccine from #EW019"
10610,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got vaccine from fe5934 and"
1065,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
10664,"```

#### Generating Questions from a given dataset

We can generate questions from a given dataset using the following command.

```bash
python3 -m clinical_trial_qa.generate_questions --dataset_path <path to dataset> --output_file <path to output file>
```

The dataset should be in the same format as the one used in the [Clinical Trials QA](https://github.com/castorini/clinical-trials-qa) repository.

### Evaluation

To evaluate the model on the test set, run the following command:

```bash
python3 -m clinical_trial_qa.evaluate --model_name_or_path <model name or path> --test_data_path <path to test data>
```

### Training

To train the model on the training set,"
10679,"```

#### Generating Questions from a given ElasticSearch Query

The following command generates questions from a given elasticsearch query. The output is stored in `output/questions.txt` file.

```bash
python generate_questions.py --es_query ""{\""size\"":10,\""query\"":{\""bool\"":{\""must\"":[{\""match\"":{\""VAERS_ID\"":\""138549\""}}]}}}""
```

### Evaluation

We evaluate our model on the [MedQA](https://github.com/jind11/MedQA) dataset. We use the same evaluation script as used by the original authors of MedQA.

To run the evaluation script, first download the MedQA dataset and store it in `data/medqa/` directory. Then run the following command to evaluate the model.

```bash
python"
10692,"```

#### Generating Questions from a given ElasticSearch Query

The following command generates questions from a given elasticsearch query. The output is stored in `output/questions.txt` file.

```bash
python generate_questions.py --es_query ""{\""size\"": 500, \""query\"": {\""bool\"": {\""must\"": [{\""match\"": {\""VAERS_ID\"": \""2019-480651\""}}]}}}""
```

### Evaluation

We evaluate our model on the [MedQA](https://github.com/jind11/MedQA) dataset. We use the same evaluation script as used by the original authors of MedQA.

To run the evaluation script, first download the MedQA dataset and store it in `data/medqa/` directory. Then run the following command to evaluate the model"
10700,"```

#### Generating Questions from a given document

The `generate_questions` function takes as input a document and generates questions based on the document. The document can be either a string or a list of strings.

```python
from elq.elq import generate_questions

document = """"""
    The patient was prescribed 100mg of ibuprofen twice daily.
    The patient had a history of asthma.
""""""

questions = generate_questions(document)
print(questions)
```

Output:

```
['What is the dose of ibuprofen?', 'What is the frequency of ibuprofen?', 'What is the duration of ibuprofen?']
```"
1072,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
10738,"```

#### Generating Questions from a given document

The `generate_questions` function takes as input a document and generates questions based on the document. The document can be either a string or a list of strings.

```python
from elq.elq import generate_questions

document = """"""
    The patient was prescribed Magnesium hydroxide 400 mg/5 mL, PO, PRN, for chest pain.
    Patient had pneumonia 6/28/2016-7/4/2016.
    Patient had pneumonia 6/28/2016-7/4/2016.
    Patient had pneumonia 6/28/2016-7/4/2016.
""""""

questions = generate_questions(document)
print"
10762,"```

#### Generating Questions from a given document

The `generate_questions` function takes as input a document and generates questions based on the document. The document can be either a string or a list of strings.

```python
from elq.elq import generate_questions

document = """"""
    The patient was prescribed the drug paracetamol.
    The patient was prescribed the drug paracetamol.
    The patient was prescribed the drug paracetamol.
""""""

questions = generate_questions(document)
print(questions)
```

Output:

```
['What is the drug prescribed to the patient?', 'How many times was the patient prescribed the drug paracetamol?']
```"
10765,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 4.`

##### Prompt:
``\
`Q: What is the square root of 9?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 5.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-processing"
10769,"```

#### Generating Questions from a given document

The `generate_questions` function takes as input a document and generates questions based on the document. The document can be either a string or a list of strings.

```python
from elq.elq import generate_questions

document = """"""
    The patient was prescribed Magnesium hydroxide 30 mg/5ml suspension PO q 8 hourly PRN pain.
    Patient has a history of atrial fibrillation.
    Patient is taking Coumadin 5 mg PO daily.
""""""

questions = generate_questions(document)
print(questions)
```

Output:

```
['What are the medications that the patient is taking?', 'What is the patient's history?']
```"
10780,"```

#### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Find all the cases where the vaccine recipients got vaccinated in u0"
10795,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new file called `data/new_dataset.jsonl` which you can then use to train a new model."
10807,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new file called `data/new_dataset.jsonl` which you can then use to train a new model."
10828,"```

##### Prompt:
``\
`Q: Elasticsearch query: `

```
{""query"": {""range"": {""AGE_YRS"": {""gte"": 15, ""lte"": 34}}}, ""size"": 1000}
```

##### Dummy model response (after post-processing with regex or stop string):
`Elasticsearch query: `

##### Prompt:
``\
`Q: Elasticsearch query: `

```
{""query"": {""bool"": {""must"": [{""match"": {""STATE"": ""NJ""}}, {""match"": {""VAERS_ID"": ""0929089-09807""}}]}}}
```

##### Dummy model response (after post-processing with regex or stop string):
`Elasticsearch query: `

##### Prompt:"
10829,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new file called `data/new_dataset.jsonl` which you can then use to train a new model."
10832,"```

#### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ List all the records where they took their shot in u022722. ]"
10857,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new file called `data/new_dataset.jsonl` which you can then use to train a new model."
1086,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
10895,"```

##### Prompt:
``\
`Q: The doctor is treating a patient who has a fever and a cough. What could be wrong?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: The doctor is treating a patient who has a fever and a cough. What could be wrong?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: The doctor is treating a patient who has a fe"
1093,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
10955,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 325?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post"
10958,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 36?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
10968,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 5.`

##### Prompt:
``\
`Q: What is the square root of 9?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 6.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-processing"
1098,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
10986,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 49?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
11002,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 81?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
11016,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
11062,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 4.`

##### Prompt:
``\
`Q: What is the square root of 9?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 5.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-processing"
11070,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the square root of 9?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 4.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-processing"
1109,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 8961?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the actor who played James Bond in the film Dr. No?`\
`A: `

##### Dummy"
11097,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and the output directory. The script will create a new dataset in the output directory.

```bash
python generate_dataset.py --input_dir /path/to/original/dataset --output_dir /path/to/new/dataset
```"
11100,"```

#### Generating a new dataset from the existing one

The following command will generate a new dataset `new_dataset` from an existing dataset `old_dataset`. The new dataset will contain only those questions that are not present in the old dataset.

```bash
python -m clinical_trial_elasticsearch_retrieval.scripts.generate_dataset --input_filepath datasets/old_dataset.jsonl --output_filepath datasets/new_dataset.jsonl
```"
11119,"```

### Example 2

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got vaccine from ID."
11134,"```

### Example 2

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the number of deaths in the state of California? ]"
11136,"```

### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the number of deaths in the US? ]
Answer:
```"
11173,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
11179,"```

### Example 2

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the number of people who died after getting vaccinated"
11190,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the author of the book 'The Adventures of Tom Sawyer'?`\
`A: `

##### D"
11205,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the author of the book 'The Adventures of Tom Sawyer'?`\
`A: `

##### D"
11207,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the author of the book 'The Adventures of Tom Sawyer'?`\
`A: `

##### D"
11209,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the author of the book 'The Adventures of Tom Sawyer'?`\
`A: `

##### D"
11214,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the author of the book 'The Adventures of Tom Sawyer'?`\
`A: `

##### D"
11223,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the author of the book 'The Adventures of Tom Sawyer'?`\
`A: `

##### D"
11227,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the author of the book 'The Adventures of Tom Sawyer'?`\
`A: `

##### D"
1127,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 36?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
11286,"```

#### Generating a new dataset from the existing one

The following command will generate a new dataset by adding 10% of noise to the original data.

```bash
python3 -m clinical_trials.generate_dataset --input_file=data/clinical_trials.jsonl --output_file=data/clinical_trials_noisy.jsonl --percentage=10
```"
11289,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and outputs a new dataset with the same format but different questions. The number of questions per document is specified by the user.

Example usage:

```bash
python3 generate_dataset.py --input_path data/train-v2.0.json --output_path data/train-v2.1.json --num_questions_per_doc 5
```"
11296,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and the number of examples to generate. The output is written to standard output.

Example usage:

```bash
python3 generate_dataset.py --input_path=data/train.jsonl --num_examples=1000 > data/new_dataset.jsonl
```"
11303,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and outputs a new dataset with the same format but different questions. The number of questions per document is specified by the user.

Example usage:

```bash
python3 generate_dataset.py --input_path data/train-v2.0.json --output_path data/train-v2.1.json --num_questions_per_doc 5
```"
11309,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and the number of examples to generate. The output is written to standard output.

Example usage:

```bash
python3 generate_dataset.py --input_path=data/original_datasets/clinical_notes_ner.jsonl --num_examples=1000 > data/generated_datasets/clinical_notes_ner.jsonl
```"
11315,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset of size 10000 in the directory `data/generated_dataset`."
11347,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset of size 10000 in the directory `data/generated_dataset`."
11348,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and the number of examples to generate. The output is written to standard output.

Example usage:

```bash
python3 generate_dataset.py --input_path data/original_data/ --num_examples 1000 > data/new_data/new_data.jsonl
```"
1135,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 36?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
11355,"```

##### Prompt:
``\
`Q: ### Elasticsearch database with field names: RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question`\
`Clinical Notes: ###[ Provide all records that took vaccination in AR and MO. ]`\"
11360,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Provide all records that took vaccination in LG and LA. ]
Answer"
11362,"```

##### Prompt:
``\
`Q: ### Elasticsearch database with field names: RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question`\
`Clinical Notes: ###[ Provide all records that took vaccination in AR and NS. ]`\"
11369,"```

### Example 2

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Provide all records that took vaccination in OT and UN"
1137,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 36?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
11372,"```

### Example 2

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Provide all records that took vaccination in UN and OT"
11438,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
11442,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
11460,"```

#### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got INFLUENZA (SEASONAL"
11467,"```

#### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got INFLUENZA (SEASONAL"
11478,"```

#### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got INFLUENZA (SEASONAL"
11487,"```

#### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got TETANUS DIPHTHERIA (NO"
115,"```

#### Generating Questions from a given dataset

We can also generate questions from a given dataset. For example, we can use the following command to generate questions from the `covid-ifr` dataset:

```bash
python -m covidex.generate_questions --dataset covid-ifr --output_file covid-ifr-questions.jsonl
```

This will create a file called `covid-ifr-questions.jsonl` in the current directory. The file contains one question per line in JSON format.

### Evaluation

To evaluate the model's performance, we need to first download the evaluation data. We provide two datasets: `covid-ifr` and `covid-sym`. You can download them using the following commands:

```bash
wget https://github.com/facebookresearch/covidex/releases/download"
11542,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
11543,"```

#### Generating a new dataset from the original one

The following command will generate a new dataset `new_dataset` from the original one `original_dataset`. The new dataset will contain only those questions that are answered by the model.

```bash
python3 -m gcd.generate_dataset \
    --input_path=data/datasets/original_dataset \
    --output_path=data/datasets/new_dataset \
    --model_name=bert-base-uncased \
    --max_seq_length=196 \
    --doc_stride=128 \
    --max_query_length=64 \
    --do_lower_case=True \
    --use_tpu=False \
    --version_2_with_negative=False \
    --null_score_diff_threshold=0.0"
11548,"```

#### Generating a new dataset from the existing one

The following command will generate a new dataset by adding 10% of noise to each answer in the original dataset.

```bash
python -m src.data.generate_dataset --input_file data/datasets/clinical_notes_qa.jsonl --output_file data/datasets/clinical_notes_qa_noisy.jsonl --noise_probability 0.1
```

### Training and Evaluation

To train the model, run the following command:

```bash
python -m src.models.train \
    --model_name_or_path bert-base-uncased \
    --do_train \
    --evaluate_during_training \
    --save_steps 5000 \
    --logging_steps 200"
11559,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
11563,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and outputs a new dataset in the same format. The following command generates a new dataset called `new_dataset.jsonl` from the original dataset `original_dataset.jsonl`:

```bash
python generate_dataset.py --input_path original_dataset.jsonl --output_path new_dataset.jsonl
```

You can specify the number of examples to include in the new dataset using `--num_examples`. You can also specify the maximum length of each example using `--max_seq_length`.

### Evaluation

To evaluate a trained model on the test set, run the following command:

```bash
python evaluate.py \
    --model_type $MODEL"
11578,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and the output directory where the new dataset will be created. The script generates a new dataset by randomly sampling 10% of the original dataset.

```bash
python3 generate_dataset.py --input_dir /path/to/original/dataset --output_dir /path/to/new/dataset
```"
1159,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 4.`

##### Prompt:
``\
`Q: What is the square root of 36?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 5.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
11593,"```

#### Generating a new dataset from the existing one

The following command will generate a new dataset by adding 10% of noise to the original dataset. The noise is generated by randomly replacing words in the clinical notes with words from the vocabulary.

```bash
python3 -m clinical_trials.generate_dataset --input_file=data/clinical_trials.jsonl --output_file=data/clinical_trials_noisy.jsonl --percentage=10
```

### Training and Evaluation

To train the model, run the following command:

```bash
python3 -m clinical_trials.train --model_dir=models/ --vocab_path=data/vocab.txt --train_file=data/clinical_trials.jsonl --eval_file=data/"
1160,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 36?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
1162,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 9?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-processing"
11620,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 360000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
11621,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and the output directory where the new dataset will be stored. The script generates a new dataset by randomly sampling 10% of the original dataset.

```bash
python3 generate_dataset.py --input_dir /path/to/original/dataset --output_dir /path/to/new/dataset
```"
11635,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and the output directory where the new dataset will be stored. The script generates a new dataset by randomly sampling 10% of the original dataset.

```bash
python generate_dataset.py --input_dir /path/to/original/dataset --output_dir /path/to/new/dataset
```"
11644,"```

#### Generating Questions from a Table

We can also generate questions from a table. For example, we can use the following command to generate questions from the table in [this](https://github.com/facebookresearch/DrQA/blob/master/data/datasets/medical_dialogue/tables/table-1024.json) file.

```bash
python scripts/generate_questions.py --table_file data/datasets/medical_dialogue/tables/table-1024.json --num_questions 5
```

This will produce the following output:

```text
Question: ### What is the name of the drug?
Prompt: ### Elasticsearch database with field names:
# DRUG_NAME, DRUG_CLASS, DRUG_INDICATIONS, DRUG_WARNINGS, DRUG_PRECAUTIONS"
11649,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the actor who played James Bond in the film Dr. No?`\
`A: `

##### Dummy model response"
11651,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and the output directory where the new dataset will be stored. The script generates a new dataset by randomly sampling 10% of the original dataset.

```bash
python generate_dataset.py --input_dir <path-to-original-dataset> --output_dir <path-to-new-dataset>
```"
11654,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 3600?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the actor who played James Bond in the film Dr. No?`\
`A: `

##### Dummy"
11675,"```

#### Generating a new dataset from the raw data

The raw data is available in `data/raw`. To generate a new dataset run:

```bash
python -m src.preprocess
```

This will create a new dataset in `data/interim` and a vocabulary file in `data/vocab`.

#### Training a model

To train a model on the generated dataset run:

```bash
python -m src.train
```

This will store the trained model in `models`.

#### Evaluation

To evaluate a trained model run:

```bash
python -m src.evaluate
```

This will print out the evaluation results to standard output."
11686,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and the output directory where the new dataset will be stored. The script generates a new dataset by randomly sampling 10% of the original dataset.

```bash
python3 generate_dataset.py --input_dir /path/to/original/dataset --output_dir /path/to/new/dataset
```"
11691,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and the output directory where the new dataset will be stored. The script generates a new dataset by randomly sampling 50% of the original dataset.

```bash
python3 generate_dataset.py --input_dir /path/to/original/dataset --output_dir /path/to/new/dataset
```"
1172,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 36?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
11723,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and the output directory where the new dataset will be stored. The script generates a new dataset by randomly sampling 10% of the original dataset.

```bash
python3 generate_dataset.py --input_dir /path/to/original/dataset --output_dir /path/to/new/dataset
```"
11724,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and the output directory where the new dataset will be stored. The script generates a new dataset by randomly sampling 10% of the original dataset.

```bash
python3 generate_dataset.py --input_dir /path/to/original/dataset --output_dir /path/to/new/dataset
```"
11726,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and the output directory where the new dataset will be stored. The script generates a new dataset by randomly sampling 10% of the original dataset.

```bash
python3 generate_dataset.py --input_dir /path/to/original/dataset --output_dir /path/to/new/dataset
```"
11728,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and the output directory where the new dataset will be stored. The script generates a new dataset by randomly sampling 10% of the original dataset.

```bash
python3 generate_dataset.py --input_dir /path/to/original/dataset --output_dir /path/to/new/dataset
```"
11758,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and the output directory where the new dataset will be stored. The script generates a new dataset by randomly sampling 10% of the original dataset.

```bash
python3 generate_dataset.py --input_dir /path/to/original/dataset --output_dir /path/to/new/dataset
```"
1177,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 4.`

##### Prompt:
``\
`Q: What is the square root of 8961?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 5.`

##### Prompt:
``\
`Q: What is the name of the actor who played James Bond in the film Dr. No?`\
`A: `

##### Dummy"
11770,"```

#### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got TYPHOID VI POLYSACCHAR"
11778,"```

#### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got INFLUENZA (SEASONAL"
11801,"```

#### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got INFLUENZA (SEASONAL"
11833,"```

#### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got TD ADSORBED (TDVAX"
11848,"```

#### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got MENINGOCOCCAL B (TRUM"
11870,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the actor who played James Bond in the film Dr. No?`\
`A: `

##### Dummy model response"
11874,"```

#### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got MENINGOCOCCAL (NO BRAND"
11878,"```

#### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got INFLUENZA (SEASONAL"
11882,"```

#### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got INFLUENZA (SEASONAL"
11886,"```

#### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got HPV (GARDASIL 9)"
11889,"```

#### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got ROTAVIRUS (ROTATEQ)"
11898,"```

#### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got DTAP + IPV + HIB (P"
11901,"```

#### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got POLIO VIRUS, INACT. ("
11904,"```

#### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got TYPHOID VI POLYSACCHAR"
11918,"```

#### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got INFLUENZA (SEASONAL"
11921,"```

#### Generating a new dataset from the existing one

The following command will generate a new dataset `new_dataset` from an existing dataset `old_dataset`. The new dataset will contain only those questions that are not present in the old dataset.

```bash
python3 -m clinical_trials.generate_dataset --input_dir=data/old_dataset --output_dir=data/new_dataset
```

### Training the model

To train the model on the dataset, run the following command:

```bash
python3 -m clinical_trials.train --dataset_path=data/dataset --model_name=bert-base-uncased --do_lowercase --max_seq_length=256 --batch_size=16 --learning_rate=2e-5 --num_train_epochs=4 --save_checkpoints_steps="
11923,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new file called `data/new_dataset.jsonl` which contains the questions and answers."
11934,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and the output directory where the new dataset will be stored. The script generates a new dataset by randomly sampling 10% of the original dataset.

```bash
python generate_dataset.py --input_dir /path/to/original/dataset --output_dir /path/to/new/dataset
```"
11936,"```

#### Generating Questions from a given document

We can also generate questions from a given document using the `generate_questions` function.

```python
from elq.elq import generate_questions

document = """"""
The patient was seen in the ED for fever and chills. He had been working in a nursing home and reported having been exposed to a resident who tested positive for COVID-19. The patient denied any other symptoms. He was treated with amoxicillin and released.
""""""

questions = generate_questions(document)
print(questions)
```

Output:

```
['What is the patient’s age?', 'What is the patient’s gender?', 'What is the patient’s race?', 'What is the patient’s occupation?', 'What is the patient’s zip code?', 'What is the patient’s"
1194,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 36?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
1195,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 36?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
11957,"```

#### Generating a new dataset from the existing one

The following command will generate a new dataset `new_dataset` from an existing dataset `old_dataset`. The new dataset will contain only those questions that are not present in the old dataset.

```bash
python3 -m clinical_trial_elasticsearch_retrieval.generate_dataset --input_filepath=data/clinical_trials/clinical_trials_phase_2b_structured_data.jsonl --output_filepath=data/clinical_trials/new_dataset.jsonl --existing_dataset_filepath=data/clinical_trials/old_dataset.jsonl
```

### Running the retriever

To run the retriever, use the following command:

```bash
python3 -m clinical_trial_elasticsearch"
11973,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and the output directory where the new dataset will be created. The script generates a new dataset by randomly selecting 10% of the questions in the original dataset and then creating a new dataset containing only those questions.

```bash
python3 generate_dataset.py --input_dir /path/to/original/dataset --output_dir /path/to/new/dataset
```"
11999,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and the output directory where the new dataset will be created. The script will create a copy of the original dataset in the output directory and then it will apply the following operations:
- Remove the `id` column
- Remove the `question` column
- Remove the `answer` column
- Remove the `prompt` column
- Remove the `context` column
- Remove the `metadata` column
- Remove the `notes` column
- Remove the `other_meds` column
- Remove the `allergies` column
- Remove the `prior_vax` column
- Remove the `lab_data` column
- Remove the `history` column
- Remove the `cur_ill` column"
12014,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and the output directory where the new dataset will be stored. The script generates a new dataset by randomly sampling 10% of the original dataset.

```bash
python generate_dataset.py --input_dir /path/to/original/dataset --output_dir /path/to/new/dataset
```"
12015,"```

#### Generating Questions from a given document

The following command generates questions from a given document.

```bash
python generate_questions.py --input_file <path to input file> --output_file <path to output file>
```

For example,

```bash
python generate_questions.py --input_file data/sample_document.txt --output_file data/sample_questions.jsonl
```

This will generate the following questions in `data/sample_questions.jsonl`

```json
{""question"": ""What is the name of the patient?"", ""answer"": ""Jane Doe""}
{""question"": ""What is the age of the patient?"", ""answer"": ""30 years old""}
{""question"": ""What is the gender of the patient?"", ""answer"": ""Female""}
{""question"": ""What is the date of birth"
12018,"```

#### Generating a new dataset from the existing one

The following command will generate a new dataset `new_dataset` from an existing dataset `old_dataset`. The new dataset will contain only those questions that are not present in the old dataset.

```bash
python3 -m clinical_trial_elasticsearch_trainer.generate_dataset --input_dir=old_dataset --output_dir=new_dataset
```

### Training the model

The following command will train a model on the dataset located at `data/dataset_name`. The trained model will be saved to `models/model_name`.

```bash
python3 -m clinical_trial_elasticsearch_trainer.train --dataset_path=data/dataset_name --model_path=models/model_name
```

### Evaluating the model

The following command will evaluate the model"
12032,"```

#### Generating a new dataset from the existing one

The following command will generate a new dataset `new_dataset` from an existing dataset `old_dataset`. The new dataset will contain only those questions that are not present in the old dataset.

```bash
python3 -m clinical_trials.generate_dataset --input_dir=data/old_dataset --output_dir=data/new_dataset
```

### Training the model

To train the model on the dataset, run the following command:

```bash
python3 -m clinical_trials.train --dataset_path=data/dataset --model_name=bert-base-uncased --do_lowercase --max_seq_length=256 --batch_size=16 --learning_rate=2e-5 --num_train_epochs=4 --save_checkpoints_steps="
1204,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 36?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
12040,"```

#### Generating a new dataset from the existing one

The following command will generate a new dataset `new_dataset` from an existing dataset `old_dataset`. The new dataset will contain only those questions that are not present in the old dataset.

```bash
python3 -m clinical_trials.generate_dataset --input_dir=data/old_dataset --output_dir=data/new_dataset
```

### Training the model

To train the model on the dataset, run the following command:

```bash
python3 -m clinical_trials.train --dataset_path=data/dataset --model_name=bert-base-uncased --do_lowercase --max_seq_length=128 --batch_size=64 --learning_rate=5e-05 --num_train_epochs=10 --save_checkpoints_"
12046,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and the output directory where the new dataset will be stored. The script generates a new dataset by randomly sampling 10% of the original dataset.

```bash
python3 generate_dataset.py --input_dir /path/to/original/dataset --output_dir /path/to/new/dataset
```"
12055,"```

#### Generating Questions from a given document

The following command generates questions from a given document.

```bash
python generate_questions.py --input_file <path to input file> --output_file <path to output file>
```

For example,

```bash
python generate_questions.py --input_file data/sample_document.txt --output_file data/sample_questions.jsonl
```

This will generate a JSONL file containing the questions generated from the document.

#### Generating Questions from a given directory of documents

The following command generates questions from a given directory of documents.

```bash
python generate_questions.py --input_dir <path to input dir> --output_file <path to output file>
```

For example,

```bash
python generate_questions.py --input_dir data/sample_document"
12067,"```

#### Generating a new dataset from the existing one

The following command will generate a new dataset `new_dataset` from an existing dataset `old_dataset`. The new dataset will contain only those questions that are not present in the old dataset.

```bash
python3 -m clinical_trial_elasticsearch_retrieval.generate_dataset --input_filepath=data/clinical_trials/clinical_trials_jsonl --output_filepath=data/clinical_trials/new_dataset.jsonl --existing_dataset_filepath=data/clinical_trials/old_dataset.jsonl
```

### Evaluation

To evaluate the retriever on the test set, run the following command:

```bash
python3 -m clinical_trial_elasticsearch_retrieval.evaluate_"
12069,"```

#### Generating a new dataset from scratch

To generate a new dataset from scratch, you can use the following command:

```bash
python3 -m clinical_trial_elasticsearch_trainer.generate_dataset \
    --output_dir=<OUTPUT_DIR> \
    --num_examples=<NUM_EXAMPLES> \
    --seed=<RANDOM_SEED>
```

This will create a TFRecord file containing `NUM_EXAMPLES` examples in `OUTPUT_DIR`.

### Training

To train a model using the default parameters, run the following command:

```bash
python3 -m clinical_trial_elasticsearch_trainer.run \
    --input_dir=<INPUT_DIR> \
    --output_dir=<OUTPUT_DIR> \
    --bert_"
12070,"```

#### Generating a new dataset from the raw data

The `generate_dataset.py` script can be used to generate a new dataset from the raw data. It will load all of the files in the `data/raw/` directory and save them as a single JSON file in the `data/processed/` directory.

```bash
python3 generate_dataset.py
```

### Training the model

The `train.py` script can be used to train a new model. The default parameters are set to match those used in the paper, but they can be overridden using command line arguments.

```bash
python3 train.py --help
usage: train.py [-h] [--model MODEL] [--epochs EPOCHS] [--batch-size BATCH_SIZE]
                [--lr LR] [--patience PATIENCE] ["
12074,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and the output directory where the new dataset will be created. The script generates a new dataset by randomly sampling 10% of the original dataset.

```bash
python3 generate_dataset.py --input_dir /path/to/original/dataset --output_dir /path/to/new/dataset
```"
1210,"```

##### Example 3
```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients whose age is 18.0. ]
Answer:"
12120,"```

#### Generating a new dataset from the raw data

The `generate_dataset.py` script can be used to generate a new dataset from the raw data. The script will create a new directory in the `data/` folder containing the generated dataset.

To run the script, use the following command:

```bash
python3 generate_dataset.py --raw-data-dir <path/to/raw/data> --output-dir <path/to/output/directory>
```

For example, to generate a new dataset using the raw data in the `data/raw_data/2019-08-05/` directory, you would run the following command:

```bash
python3 generate_dataset.py --raw-data-dir data/raw_data/2019-08-05/ --output-dir data/generated_data/201"
12127,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and the output directory where the new dataset will be created. The script will create a copy of the original dataset in the output directory and then it will apply the following operations:
- Remove all the questions that are not about the same topic as the ones in the original dataset.
- Remove all the answers that are not about the same topic as the ones in the original dataset.
- Remove all the questions that have no answer.
- Remove all the answers that have no question.
- Remove all the questions that contain a word that is not present in any answer.
- Remove all the answers that contain a word that is not present in any question.
- Remove all the questions that contain a word that is not present in any answer or"
12130,"```

#### Generating a new dataset from the raw data

The `generate_dataset.py` script can be used to generate a new dataset from the raw data. The script takes as input the path to the raw data directory and the output file name. It will then process all the files in the raw data directory and write the generated dataset to the specified output file.

```bash
python3 generate_dataset.py --raw-data-dir <path/to/raw/data> --output-file <path/to/output/file>
```"
1215,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients whose age is 30.0. ]
Answer"
12164,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and the output directory where the new dataset will be created. The script generates a new dataset by randomly sampling 10% of the original dataset.

```bash
python3 generate_dataset.py --input_dir data/original_data/ --output_dir data/new_data/
```"
12172,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and the output directory where the new dataset will be created. The script generates a new dataset by randomly sampling 10% of the original dataset.

```bash
python3 generate_dataset.py --input_dir /path/to/original/dataset --output_dir /path/to/new/dataset
```"
12175,"```

#### Generating a new dataset from the raw data

The raw data is available in `data/raw`. To generate a new dataset run:

```bash
python3 -m src.preprocess --input-dir data/raw --output-dir data/processed
```

This will create a new dataset in `data/processed` that can be used to train the model.

#### Training the model

To train the model run:

```bash
python3 -m src.train --dataset data/processed/dataset.jsonl --model-dir models/elqg
```

This will save the trained model in `models/elqg`.

#### Evaluating the model

To evaluate the model on the test set run:

```bash
python3 -m src.evaluate --test-file data/processed/test.jsonl --model-"
12185,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and the output directory where the new dataset will be created. The script will create a copy of the original dataset in the output directory and then it will apply the following operations:
- Remove all the questions that are not about the same topic as the ones in the original dataset.
- Remove all the answers that are not about the same topic as the ones in the original dataset.
- Remove all the questions that have no answer.
- Remove all the answers that have no question.
- Remove all the questions that contain a word that is not present in any answer.
- Remove all the answers that contain a word that is not present in any question.
- Remove all the questions that contain a word that is not present in any answer or"
12201,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and the output directory where the new dataset will be created. The script will create a copy of the original dataset in the output directory and then it will apply the following operations:

* Remove all the questions that are not about the COVID-19 pandemic;
* Remove all the answers that are not about the COVID-19 pandemic;
* Remove all the questions that have no answer;
* Remove all the answers that have no question;
* Remove all the questions that contain the word ""vaccine"" or ""vax"";
* Remove all the answers that contain the word ""vaccine"" or ""vax"".

Example:

```bash
python3 generate_dataset.py --input_"
12203,"```

#### Generating a new dataset from the raw data

The `generate_dataset.py` script can be used to generate a new dataset from the raw data. The script takes as input the path to the raw data directory and the output file name. It outputs a jsonl file containing all the questions in the raw data.

```bash
python3 generate_dataset.py --raw_data_dir=<path-to-raw-data> --output_file=<output-file-name>
```"
12218,"```

##### Prompt:
``\
`Q: The table shows the number of users in a chat room. `\
`Table: `\
```
Chat Room	Users
1	20
2	35
3	40
4	60
5	70
```\
`Cryptic clue: `\
` 1. Above all else, a man must be true to himself (8)`\
` 2. A place where you can get a massage (6)`\
` 3. A type of shrimp (4)`\
` 4. A type of tea (3)`\
` 5. An Italian dessert (3)`\
`Answers:`\
` 1. `

##### Dummy model response (after post-processing with regex or stop string):
`Easy"
12281,"```

##### Prompt:
``\
`Q: The table shows the number of users in a chat room. `\
`Table: `\
```
Chat Room	Users
1	20
2	35
3	40
4	60
5	70
```\
`Cryptic clue: `\
` 1. Above all else, I am a chat room (8)`\
` 2. I am a chat room (8)`\
`Ans:`

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 1.`

##### Prompt:
``\
`Q: The table shows the number of users in a chat room. `\
`Table: `\"
12282,"```

##### Prompt:
``\
`Q: The table shows the number of users in a chat room. `\
`Table: `\
```
Chat Room	Users
1	20
2	35
3	40
4	60
5	70
```\
`Cryptic clue: `\
` 1. Above all else, I am a lover of the game (8)`\
` 2. Above all else, I am a lover of the game (9)`\
`Answers:`\
` 1. `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 1.`

##### Prompt:
``\
`Q: The table"
12295,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who have Interleukin level increased after vaccine"
12297,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who have Immunophenotyping after vacc"
12306,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who have Pericardial effusion after vaccine"
12331,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who have Nasal dryness after vaccine. ]"
12334,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who have Fall after vaccine. ]
Answer:"
12336,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who have Cellulitis after vaccine. ]"
12345,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who have Eye inflammation after vaccine."
12373,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who have Urinary casts absent after vaccine."
12403,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who have Electrocardiogram ST segment abnormal after"
12431,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who have Hepatic vascular disorder after v"
12446,"```

#### Generating Questions from a given passage

```python
from elq.elq import QGen

qg = QGen()

text = """"""
The first case of COVID-19 in the United States was confirmed on January 20, 2020, in Snohomish County, Washington. The patient had recently returned from Wuhan, China, where the virus originated. On February 5, 2020, the World Health Organization declared the outbreak a pandemic.[3] As of March 24, 2020, there were over 2 million cases and over 186,000 deaths worldwide.
""""""

questions = qg.generate(text)
print(questions)
```

Output:

```
['What is the origin of the virus?', 'Where did the first case of COVID"
12449,"```

#### Generating a new dataset from the existing one

The `generate_dataset.py` script can be used to generate a new dataset from an existing one. It will take the original dataset and randomly sample a subset of it, while preserving the distribution of the classes in the original dataset. The generated dataset will be saved as a JSON file.

To run this script, you need to specify the path to the original dataset (in JSON format), the number of samples to include in the new dataset, and the output filename. For example:

```bash
python generate_dataset.py --input_file data/train-v2.0.json --num_samples 1000 --output_file data/train-v2.0-sampled.json
```

### Evaluation

We use the [DROP](https://github.com/allenai/drop) evaluation server to evaluate"
12506,"```

#### Generating a new dataset from the existing one

The `generate_dataset.py` script can be used to generate a new dataset from an existing one. It will take the original dataset and randomly sample a subset of it, while preserving the distribution of questions across the different categories. The generated dataset will be saved in a new directory.

Example usage:

```bash
python3 generate_dataset.py --input-dir /path/to/original/dataset --output-dir /path/to/new/dataset --num-examples 10000
```"
12514,"```

#### Generating Questions from a Table

The `generate_questions` function can be used to generate questions from a table. The table should be in the format of a list of lists where each sublist is a row in the table.

```python
from elasticsearch_dsl import Search
from elasticsearch_question_answering import generate_questions

search = Search(using=client, index=""clinical-trials"")

table = [[""Product"", ""Use Complaint""], [""Drug1"", ""20""], [""Drug2"", ""30""]]

for question in generate_questions(search, table):
    print(question)
```

Output:

```
How many people had a Use Complaint after taking Drug1?
How many people had a Use Complaint after taking Drug2?
```

#### Generating Questions"
12540,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
12545,"```

#### Generating a new dataset from the existing one

The following command will generate a new dataset by adding a new column to the existing one. The new column is called `new_column` and it contains the value `10`.

```bash
python3 -m clinical_trial_elasticsearch_retriever.generate_dataset \
    --input_file=data/clinical_trials_small.jsonl \
    --output_file=data/clinical_trials_small_with_new_column.jsonl \
    --add_column='{""name"": ""new_column"", ""value"": 10}'
```

### Running the retriever on a custom dataset

To run the retriever on a custom dataset, you need to create a JSON file containing the questions and answers. Each line of the file should contain a single question"
12554,"```

#### Generating a new dataset from the existing one

The `generate_dataset.py` script can be used to generate a new dataset from an existing one. It will take the original dataset and randomly sample a subset of it, while preserving the distribution of questions across the different categories. The generated dataset will be saved in a new directory.

Example usage:

```bash
python3 generate_dataset.py --input-dir /path/to/original/dataset --output-dir /path/to/new/dataset --num-examples 10000
```"
12555,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 360000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
12560,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 3600?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the author of the book 'The Adventures of Tom Sawyer'?`\
`A: `

####"
12571,"```

#### Generating a new dataset from the existing one

The following command will generate a new dataset by adding 10% of noise to the original data.

```bash
python3 -m clinical_trial_elasticsearch_trainer.generate_dataset --input_file=data/clinical_trials_small.jsonl --output_file=data/clinical_trials_noisy.jsonl --percentage_of_noise=0.1
```

### Training and Evaluation

To train and evaluate the model, run the following command:

```bash
python3 -m clinical_trial_elasticsearch_trainer.run_experiment \
--vocab_file=vocab.txt \
--train_path=data/clinical_trials_small.jsonl \
--dev_path="
12579,"```

#### Generating Questions from a Table

We can also generate questions from a table. For example, we can use the following command to generate questions from the `vax_table` in the `vaers_data.csv` file.

```bash
python3 -m vaers.generate_questions --table_name vax_table --file_path data/vaers_data.csv
```

The output will be as follows:

```text
Question: ### How many people have Vaccination site abscess after vaccine?
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE,"
12602,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and the number of examples to generate in the new dataset. The script will output a file named `generated_dataset.jsonl`.

Example usage:

```bash
python3 generate_dataset.py --input_path=data/train.jsonl --num_examples=10000
```"
12606,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and the number of examples to generate in the new dataset. The script will output a file named `generated_dataset.jsonl`.

Example usage:

```bash
python3 generate_dataset.py --input_path=data/train.jsonl --num_examples=10000
```"
12631,"```

#### Generating a new dataset from the existing one

The following command will generate a new dataset by adding a new column to the existing one. The new column is called `new_column` and it contains the value `10`.

```bash
python3 -m clinical_trial_elasticsearch_tracker.generate_dataset \
    --input_file=data/clinical_trials_small.jsonl \
    --output_file=data/clinical_trials_small_with_new_column.jsonl \
    --add_column='{""name"": ""new_column"", ""value"": 10}'
```

### Running the server

To run the server locally, use the following command:

```bash
python3 -m clinical_trial_elasticsearch_tracker.server
```

By default, the server"
12634,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and the number of examples to generate in the new dataset. The script will output a file named `generated_dataset.jsonl`.

Example usage:

```bash
python3 generate_dataset.py --input_path=data/train.jsonl --num_examples=100000
```"
12653,"```

#### Generating a new dataset from the existing one

The following command will generate a new dataset `new_dataset` from an existing dataset `old_dataset`. The new dataset will contain only those questions and answers that are present in the old dataset.

```bash
python3 -m clinical_trials.generate_dataset --input_dir=data/old_dataset --output_dir=data/new_dataset
```"
12679,"```

#### Generating a new dataset from the existing one

The following command will generate a new dataset `new_dataset` from an existing dataset `old_dataset`. The new dataset will contain only those questions and answers that are present in the old dataset.

```bash
python -m clinical_trial_elasticsearch_retriever.generate_dataset --input_filepath datasets/old_dataset.jsonl --output_filepath datasets/new_dataset.jsonl
```"
12686,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and the output directory where the new dataset will be created. The script generates a new dataset by randomly selecting 10% of the original dataset.

```bash
python3 generate_dataset.py --input_dir /path/to/original/dataset --output_dir /path/to/new/dataset
```"
12689,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and the number of examples to generate in the new dataset.

Example usage:

```bash
python3 generate_dataset.py --input_path data/original_dataset.jsonl --num_examples 100000 --output_path data/new_dataset.jsonl
```"
12713,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and the number of examples to generate in the new dataset. The script will output a json file containing the new dataset.

Example usage:

```bash
python3 generate_dataset.py --input_path data/train-v2.1.json --num_examples 50000 --output_path data/train-v2.1-50k.json
```"
12714,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and the output directory where the new dataset will be stored. The script generates a new dataset by randomly sampling 10% of the original dataset.

```bash
python3 generate_dataset.py --input_dir /path/to/original/dataset --output_dir /path/to/new/dataset
```"
1272,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients whose age is 15.0. ]
Answer"
12730,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and the number of examples to generate in the new dataset. The script will output a file named `generated_dataset.jsonl`.

Example usage:

```bash
python3 generate_dataset.py --input_path=data/train.jsonl --num_examples=100000
```"
12739,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and outputs a new dataset in the same format. The following command generates a new dataset called `new_dataset.jsonl` with 10% of the questions removed compared to the original dataset:

```bash
python generate_dataset.py --input_path data/train_data.jsonl --output_path data/new_dataset.jsonl --remove_percentage 10
```"
12748,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the author of the book 'The Adventures of Tom Sawyer'?`\
`A: `

##### D"
12755,"```

##### Prompt:
``\
`Q: Clinical Question: Does the patient have a history of diabetes?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: Clinical Question: Does the patient have a history of diabetes?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: Clinical Question: Does the patient have a history of diabetes?`\
`A:"
12774,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the author of the book 'The Adventures of Tom Sawyer'?`\
`A: `

##### D"
12781,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the author of the book 'The Adventures of Tom Sawyer'?`\
`A: `

##### D"
12806,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 9?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-processing"
12809,"```

##### Prompt:
``\
`Q: The doctor is treating a patient who has a rash. Which of the following findings would be most relevant to the patient's diagnosis?`\
`  choice: The patient does not smoke.`\
`  choice: The patient has a fever.`\
`  choice: The patient has a cough.`\
`  choice: The patient has a sore throat.`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
[-inf, -0.7731898882334817, -1.1786549963416462, -1.466337068793427]

##### Prompt:
``\"
12811,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the author of the book 'The Adventures of Tom Sawyer'?`\
`A: `

##### D"
12826,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 360000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
12837,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the author of the book 'The Adventures of Tom Sawyer'?`\
`A: `

##### D"
12838,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the author of the book 'The Adventures of Tom Sawyer'?`\
`A: `

##### D"
12842,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the author of the book 'The Adventures of Tom Sawyer'?`\
`A: `

##### D"
12847,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the author of the book 'The Adventures of Tom Sawyer'?`\
`A: `

##### D"
12874,"```

##### Prompt:
``\
`Q: The doctor is treating a patient who has a rash. Which of the following findings would be most relevant to the patient's diagnosis?`\
`A: The patient has a fever`\
`B: The patient has a cough`\
`C: The patient has a sore throat`\
`D: The patient has a runny nose`\
`E: None of the above`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
[-inf, -0.5108256237659906, -0.9162907318741551]

##### Prompt:
``\
`Q: The doctor is treating a patient who"
12879,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 360000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
12882,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the number of people who died after vaccination? ]
Answer:"
12899,"```

### Example 2

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ what is the most common symptom of vaccination?]"
12911,"```

### Example 2

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ what is the most common symptom of vaccination?]"
12937,"```

### Example 2

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ what is the most common symptom of plantar fasciitis?"
12950,"```

### Example 2

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ what is the most common congenital anomaly after vaccination"
12951,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
12961,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
12963,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the author of the book 'The Adventures of Tom Sawyer'?`\
`A: `

##### D"
12969,"```

### Example 2

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ what is the most common symptom of vaccination?]"
12981,"```

### Example 2

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ what is the most common cause of death in children under 15"
12996,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ what are the symptoms of a pseudomonas infection?]
Answer:"
13020,"```

### Example 2

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ what is the most common symptom of vaccination?]"
13028,"```

### Example 2

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ what is the most common symptom of vaccination?]"
1307,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
1349,"```

#### Generating queries from a file

To generate queries from a file, use the following command:

```bash
python3 -m clinical_trial_elasticsearch_trainer.generate_queries --input_file <path to input file> --output_file <path to output file>
```

The input file should contain one question per line. The output file will contain the generated queries, one per line.

For example, if you have a file `questions.txt` containing the following questions:

```text
What is the average age of patients who died?
How many patients were admitted to the hospital?
```

You can run the following command to generate the corresponding queries:

```bash
python3 -m clinical_trial_elasticsearch_trainer.generate_queries --input_file questions.txt --output_file queries.txt
```"
136,"```

#### Generating Questions from a given dataset

We can also generate questions from a given dataset. For example, we can use the following command to generate questions from the `covid-19` dataset:

```bash
python -m src.generate_questions --dataset covid-19 --num_questions 500 --output_file data/generated_questions/covid-19.jsonl
```

This will generate 500 questions and save them in `data/generated_questions/covid-19.jsonl`.

### Evaluation

To evaluate the model, run the following command:

```bash
python -m src.evaluate --model_name <model_name> --test_file <test_file> --output_file <output_file>
```

For example, to evaluate the model trained on the `covid"
1361,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
1378,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients whose cage months is 0.3. ]"
1379,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients whose cage months is 0.9. ]"
1409,"```

##### Example 4

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[What is the number of patients who died after receiving a vaccine?]
Answer"
143,"```

#### Generating Questions from a given dataset

We can also generate questions from a given dataset. For example, we can use the following command to generate questions from the `covid-ifr` dataset:

```bash
python -m covidex.generate_questions --dataset covid-ifr --output_file covid-ifr-questions.jsonl
```

This will create a file called `covid-ifr-questions.jsonl` in the current directory. The file contains one question per line in JSON format.

### Evaluation

To evaluate the model's performance, we need to first download the evaluation data. We provide two datasets: `covid-ifr` and `covid-sym`. You can download them using the following commands:

```bash
wget https://github.com/facebookresearch/covidex/releases/download"
1435,"```

#### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[What is the number of patients who died after receiving a vaccine?]
Answer:"
1452,"```

#### Generating a new dataset

To generate a new dataset, run the following command:

```bash
python3 -m clinical_trials.generate_dataset --output_dir=<OUTPUT_DIR> --num_examples=<NUM_EXAMPLES>
```

The output directory will contain two files: `train.jsonl` and `test.jsonl`. Each line in these files is a JSON object containing the following fields:

-   `question`: The question text.
-   `answer`: The answer text.
-   `context`: The context text."
1453,"```

#### Generating a new dataset

To generate a new dataset, run the following command:

```bash
python3 -m clinical_trials.generate_dataset --output_dir=<OUTPUT_DIR> --num_examples=<NUM_EXAMPLES>
```

The output directory will contain two files: `train.jsonl` and `test.jsonl`. Each line in these files is a JSON object containing the following fields:

-   `question`: The question text.
-   `answer`: The answer text.
-   `context`: The context text."
1461,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
1506,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 1.`

##### Prompt:
``\
`Q: What is the square root of 81?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 8204?`\
`A: `

##### Dummy model response (after post-processing with"
1509,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 1.`

##### Prompt:
``\
`Q: What is the square root of 9?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 144?`\
`A: `

##### Dummy model response (after post-processing with regex or"
151,"```

#### Generating Questions from a given dataset

We can also generate questions from a given dataset. For example, we can use the following command to generate questions from the `covid-ifr` dataset:

```bash
python -m covidex.generate_questions --dataset covid-ifr --output_file covid-ifr-questions.jsonl
```

This will create a file called `covid-ifr-questions.jsonl` in the current directory. The file contains one question per line in JSON format.

### Evaluation

To evaluate the model's performance, we need to first download the evaluation data. We provide two datasets: `covid-ifr` and `covid-sym`. You can download them using the following commands:

```bash
wget https://github.com/facebookresearch/covidex/releases/download"
1517,"```

#### Generating Questions from a given text file

The script `generate_questions.py` can be used to generate questions from a given text file. The script takes in two arguments:
- `--input_file`: Path to the input text file
- `--output_file`: Path to the output file where the generated questions will be written

Example usage:
```bash
python3 generate_questions.py --input_file=data/sample_text.txt --output_file=data/generated_questions.txt
```

### Evaluation

We evaluate our model using the [Elasticsearch](https://www.elastic.co/) search engine. We use the [KILT](https://github.com/facebookresearch/KILT) dataset as the evaluation set.

#### KILT Dataset

The KILT dataset is a large-scale benchmark for"
1519,"```

#### Generating Questions from a Table

We can also generate questions from a table. For example, we can use the following command to generate questions from the `table` in the `data/tables/table_example.jsonl` file.

```bash
python -m src.generate_questions --table_file data/tables/table_example.jsonl
```

The output will be as follows:

```text
Question: ### What is the name of the person who has the highest salary?
Prompt: ### The following table shows the salaries of employees at different companies.
# Company	Salary	Employee Name
# Google	$50000	John
# Facebook	$60000	Jane
# Microsoft	$70000	Jack
# Apple	$80000	Jill
# Amazon	$900"
1524,"```

#### Generating Questions from a given dataset

We can also generate questions from a given dataset. For example, we can use the following command to generate questions from the `covid-19` dataset.

```bash
python -m src.generate_questions --dataset covid-19 --num_questions 50 --output_file data/generated_questions/covid-19.jsonl
```

This will generate 50 questions and save them in `data/generated_questions/covid-19.jsonl`."
1542,"```

#### Generating Questions from a given document

The `generate_questions` function takes in a document and generates questions based on it. The document can be either a string or a list of strings.

```python
from elq.elq import generate_questions

document = """"""
    The patient was seen by Dr. Smith at the hospital. He had a fever and a cough.
""""""

questions = generate_questions(document)
print(questions)
```

Output:

```
['What is the name of the patient?', 'What is the date of visit?', 'What is the name of the doctor?']
```"
1553,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who reported Tympanic membrane disorder after the"
1577,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the author of the book 'The Adventures of Tom Sawyer'?`\
`A: `

##### D"
1581,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who reported Perfume sensitivity after the vaccination"
1604,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who reported Muscle fatigue after the vaccination."
1606,"```

#### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who reported Pericardial fibrosis after the vacc"
1619,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
1626,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who reported Glomerular filtration rate after the v"
1627,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who reported Eyelid operation after the vaccination"
1628,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who reported Therapy change after the vaccination. ]"
163,"```

#### Generating Questions from a given dataset

We can also generate questions from a given dataset. For example, we can use the following command to generate questions from the `covid-ifr` dataset:

```bash
python -m covidex.generate_questions --dataset covid-ifr --output_file covid-ifr-questions.jsonl
```

This will create a file called `covid-ifr-questions.jsonl` in the current directory. The file contains one question per line in JSON format.

### Evaluation

To evaluate the model's performance, we need to first download the evaluation data. We provide two datasets: `covid-ifr` and `covid-qa`. To download the evaluation data, run the following commands:

```bash
mkdir data
cd data
wget https://github.com/facebookresearch"
1649,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who reported Retroperitoneal neoplasm"
1663,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who reported Spleen palpable after the vacc"
1665,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who reported Blood testosterone normal after the vaccination"
1668,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who reported Psychiatric evaluation normal after the vaccination"
1676,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who reported Peripheral artery stent insertion"
1717,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Give me all the patients who have Dialysis related complication after the vaccination"
1736,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
1740,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
1747,"```

##### Prompt:
``\
`Q: Clinical Question: What is the most common cause of death in patients with a history of hypertension?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: Clinical Question: What is the most common cause of death in patients with a history of hypertension?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: Clinical Question: What is the most"
175,"```

#### Generating Questions from a given dataset

We can also generate questions from a given dataset. For example, we can use the following command to generate questions from the `covid-ifr` dataset:

```bash
python -m covidex.generate_questions --dataset covid-ifr --output_file covid-ifr-questions.jsonl
```

This will create a file called `covid-ifr-questions.jsonl` in the current directory. The file contains one question per line in JSON format.

### Evaluation

To evaluate the model's performance, we need to first download the evaluation data. We provide two datasets: `covid-ifr` and `covid-qa`. To download the evaluation data, run the following commands:

```bash
mkdir data
cd data
wget https://github.com/facebookresearch"
1750,"```

#### Generating a new dataset

To generate a new dataset, run the following command:

```bash
python3 -m clinical_trials.generate_dataset --output_dir=<OUTPUT_DIR> --num_examples=<NUM_EXAMPLES>
```

The output directory will contain two files: `train.jsonl` and `test.jsonl`. Each line in these files is a JSON object containing the following fields:

-   `question`: The question text.
-   `answer`: The answer text.
-   `context`: The context text.
-   `meta`: Metadata about the example (e.g., the original source)."
1773,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the author of the book 'The Adventures of Tom Sawyer'?`\
`A: `

##### D"
1794,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new file called `data/new_dataset.jsonl` which contains the questions and answers."
1802,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the author of the book 'The Adventures of Tom Sawyer'?`\
`A: `

##### D"
1817,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the author of the book 'The Adventures of Tom Sawyer'?`\
`A: `

##### D"
182,"```

#### Generating Questions from a given dataset

We can also generate questions from a given dataset. For example, we can use the following command to generate questions from the `covid-19` dataset:

```bash
python -m covidex.generate_questions --dataset covid-19 --output_file questions.txt
```

This will generate a file called `questions.txt` in the current directory. The file contains a list of questions and their corresponding answers.

### Evaluation

To evaluate the model, we need to first download the [evaluation data](https://github.com/allenai/covidex/tree/main/data/evaluation). Then, we can run the following command to evaluate the model:

```bash
python -m covidex.evaluate \
    --model_name_or_path allenai/covidex-"
1820,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Give me all the patients who have Prostate infection after the vaccination. ]"
1826,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
183,"```

#### Generating Questions from a given dataset

We can also generate questions from a given dataset. For example, we can use the following command to generate questions from the `covid-ifr` dataset:

```bash
python -m covidex.generate_questions --dataset covid-ifr --output_file covid-ifr-questions.jsonl
```

This will create a file called `covid-ifr-questions.jsonl` in the current directory. The file contains one question per line in JSON format.

### Evaluation

To evaluate the model's performance, we need to first download the evaluation data. We provide two datasets: `covid-ifr` and `covid-sym`. You can download them using the following commands:

```bash
wget https://github.com/facebookresearch/covidex/releases/download"
1831,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the author of the book 'The Adventures of Tom Sawyer'?`\
`A: `

##### D"
1833,"```

#### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Give me all the patients who have Selective IgG subclass deficiency after the vacc"
1835,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
1840,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the author of the book 'The Adventures of Tom Sawyer'?`\
`A: `

##### D"
1862,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the author of the book 'The Adventures of Tom Sawyer'?`\
`A: `

##### D"
1873,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
1878,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Provide all the patients who have Ankle fracture. ]
Answer:"
1880,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the number of patients who had a biopsy of the lung? ]"
1886,"```

#### Generating Questions from a given dataset

We can also generate questions from a given dataset using the following command:

```bash
python3 -m clinical_trial_elasticsearch_trainer.generate_questions --dataset_file=<path to dataset file> --output_file=<path to output file>
```

The dataset file should be in the same format as the one used for training. The output file will contain the generated questions.

### Running the server

To run the server, use the following command:

```bash
python3 -m clinical_trial_elasticsearch_trainer.server --port=8080
```

This will start the server on port 8080. You can change this by passing a different value to the `--port` flag.

Once the server is running, you can send requests to it using curl"
1890,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and the number of samples to generate in the new dataset. The generated dataset will be stored in the same directory as the original one.

Example usage:

```bash
python3 generate_dataset.py --input_path data/original_dataset.jsonl --num_samples 10000
```"
1914,"```

#### Generating Questions from a given dataset

We can generate questions from a given dataset using the following command:

```bash
python3 -m clinical_trial_qa.generate_questions --dataset_path <path to dataset> --output_file <path to output file>
```

The generated questions will be stored in the output file provided.

### Evaluation

To evaluate the model on the test set, run the following command:

```bash
python3 -m clinical_trial_qa.evaluate --model_dir <path to model directory> --test_data_path <path to test data>
```

This will print out the accuracy of the model on the test set."
1941,"```

##### Prompt:
``\
`Q: Clinical Question: What is the most common cause of death in patients with a history of hypertension?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: Clinical Question: What is the most common cause of death in patients with a history of hypertension?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: Clinical Question: What is the most"
1987,"```

#### Generating a new dataset from the existing one

The following command will generate a new dataset by adding 10% of noise to the original dataset. The noise is generated by randomly replacing words in the clinical notes with words from the vocabulary.

```bash
python3 -m medrec.data.generate_dataset --input-file data/medrec/train.jsonl --output-file data/medrec/train_noisy.jsonl --vocab-file data/medrec/vocab.txt --noise-prob 0.1
```

### Training and Evaluation

To train a model on the MedRec dataset, run the following command:

```bash
python3 -m medrec.run_experiment \
    --model-name=bert-base-uncased \
    --do-train \
    --do-"
199,"```

#### Generating a new dataset

To generate a new dataset, run the following command:

```bash
python -m src.data.generate_dataset \
    --input_file=<path to input file> \
    --output_dir=<path to output directory> \
    --num_records=<number of records to generate> \
    --seed=<random seed>
```

The input file should be a JSON file containing a list of questions and answers in the format described above. The script will randomly sample this list to create the new dataset.

### Training

To train a model, run the following command:

```bash
python -m src.models.train \
    --model_name=<name of the model> \
    --model_type=<type of the model> \
    --pretrained_model_name=<"
1990,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the author of the book 'The Adventures of Tom Sawyer'?`\
`A: `

##### D"
2021,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and the output directory where the new dataset will be stored. The script generates a new dataset by randomly sampling 10% of the original dataset.

```bash
python generate_dataset.py --input_dir /path/to/original/dataset --output_dir /path/to/new/dataset
```"
2036,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
2049,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and the output directory where the new dataset will be stored. The script generates a new dataset by randomly sampling 10% of the original dataset.

```bash
python generate_dataset.py --input_dir /path/to/original/dataset --output_dir /path/to/new/dataset
```"
2055,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and the output directory where the new dataset will be stored. The script generates a new dataset by randomly selecting 10% of the original dataset.

```bash
python3 generate_dataset.py --input_dir /path/to/original/dataset --output_dir /path/to/new/dataset
```"
2061,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
2124,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the author of the book 'The Adventures of Tom Sawyer'?`\
`A: `

##### D"
2130,"```

#### Generating a new dataset from the existing one

The following command will generate a new dataset by adding 10% of noise to the original data. The noise is generated by randomly replacing some values in the original dataset.

```bash
python3 -m clinical_trials.generate_dataset --input_file=data/clinical_trials_small.jsonl --output_file=data/clinical_trials_noisy.jsonl --percentage=10
```

### Training and Evaluation

We use [PyTorch](https://pytorch.org/) for training and evaluation.

#### Preprocessing

Before training, we need to preprocess the dataset. We first convert the dataset into a format that can be read by PyTorch's `DataLoader`. Then we tokenize the text fields using [SentencePiece]("
2131,"```

#### Generating a new dataset from the existing one

The following command will generate a new dataset `new_dataset.jsonl` by sampling 100 examples from the original dataset `original_dataset.jsonl`.

```bash
python -m clinical_trial_elasticsearch_retrieval.scripts.sample_dataset \
    --input_file=original_dataset.jsonl \
    --output_file=new_dataset.jsonl \
    --num_examples=100
```"
2156,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ what is the most common symptom after  vaccination]
Answer:
```"
2200,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ which  Intestinal intraepithelial lymphocytes increased is"
2202,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ what is the most common symptom after  vaccination]
Answer:
```"
221,"```

#### Generating a new dataset

To generate a new dataset, run the following command:

```bash
python -m src.data.generate_dataset --output_dir=<OUTPUT_DIR> --num_examples=<NUM_EXAMPLES>
```

The output directory will contain two files: `train.jsonl` and `test.jsonl`. Each line in these files is a JSON object containing the following fields:

- `question`: The question text.
- `answer`: The answer text.
- `context`: The context text.
- `meta`: Metadata about the example (e.g., the number of records in the database).

### Training

To train a model, run the following command:

```bash
python -m src.models.train --config_file=<CONFIG_FILE> --run_name=<RUN_NAME"
2223,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ what is the most common symptom after  vaccination]
Answer:
```"
2254,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ what is the most common symptom after  vaccination]
Answer:
```"
2262,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ what is the most common symptom after  vaccination]
Answer:
```"
2270,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ what is the most common symptom after  vaccination]
Answer:
```"
2286,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ what is the most common symptom after  vaccination]
Answer:
```"
2320,"```

##### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[What is the number of patients who died on 01/08/20"
2350,"```

##### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[What is the number of patients who died on 05/08/20"
236,"```

#### Generating a new dataset

To generate a new dataset, run the following command:

```bash
python3 -m clinical_trial_elasticsearch_trainer.generate_dataset \
--output_dir=<OUTPUT_DIR> \
--num_records=<NUM_RECORDS> \
--max_seq_length=<MAX_SEQ_LENGTH> \
--min_seq_length=<MIN_SEQ_LENGTH> \
--max_query_length=<MAX_QUERY_LENGTH> \
--min_query_length=<MIN_QUERY_LENGTH> \
--do_lower_case=<DO_LOWER_CASE> \
--vocab_file=<VOCAB_FILE> \
--tokenizer_type=<TOKENIZER_TYPE> \
--seed=<SE"
2375,"```

##### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[What is the number of patients who died on 12/01/20"
2382,"```

##### Example 4

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[What is the number of patients who died on 03/16/20"
2391,"```

##### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[What is the number of patients who died on 01/10/20"
2405,"```

##### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[What is the number of patients who died on 04/25/20"
2408,"```

##### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[What is the number of patients who died on 08/12/20"
2419,"```

##### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[What is the number of patients who died on 01/29/20"
2426,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
243,"```

#### Generating a new dataset

To generate a new dataset, run the following command:

```bash
python3 -m clinical_trial_elasticsearch_trainer.generate_dataset \
--output_dir=<OUTPUT_DIR> \
--num_examples=<NUM_EXAMPLES> \
--max_seq_length=<MAX_SEQ_LENGTH> \
--min_question_length=<MIN_QUESTION_LENGTH> \
--max_question_length=<MAX_QUESTION_LENGTH> \
--min_num_answers=<MIN_NUM_ANSWERS> \
--max_num_answers=<MAX_NUM_ANSWERS> \
--seed=<SEED>
```

The arguments are:

*   `output_dir`: The output directory where the dataset will be written to."
2438,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
247,"```

#### Generating a new dataset

To generate a new dataset, run the following command:

```bash
python3 -m clinical_trial_elasticsearch_trainer.generate_dataset \
--output_dir=<OUTPUT_DIR> \
--num_examples=<NUM_EXAMPLES> \
--max_seq_length=<MAX_SEQ_LENGTH> \
--min_question_length=<MIN_QUESTION_LENGTH> \
--max_question_length=<MAX_QUESTION_LENGTH> \
--min_num_answers=<MIN_NUM_ANSWERS> \
--max_num_answers=<MAX_NUM_ANSWERS> \
--seed=<SEED>
```

The arguments are:

*   `output_dir`: The output directory where the dataset will be written to."
2479,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
2497,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
2512,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
2518,"```

#### Generating Questions from a given ElasticSearch Query

The following command generates questions from an ElasticSearch query. The input is a JSON file containing the ElasticSearch query. The output is a JSON file containing the generated questions.

```bash
python generate_questions.py --input_file <path to input json file> --output_file <path to output json file>
```

For example, the following command generates questions from the ElasticSearch query in `sample_data/elasticsearch_query.json` and writes them to `sample_data/generated_questions.json`.

```bash
python generate_questions.py --input_file sample_data/elasticsearch_query.json --output_file sample_data/generated_questions.json
```

The contents of `sample_data/generated_questions.json` are as follows:

```json
{"
2519,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
2525,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
2535,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
2538,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
2564,"```

#### Generating Questions from a given passage

The `generate_questions` function generates questions from a given passage. The input is a string containing the passage and the output is a list of questions.

```python
from elq.elq import generate_questions

passage = """"""
The COVID-19 pandemic has resulted in unprecedented challenges to healthcare systems around the world.
In the United States, the number of people who died from COVID-19 exceeded 400,000 by mid-October 2020.
""""""

questions = generate_questions(passage)
print(questions)
```

Output:

```
['How many people died from COVID-19?', 'What are the challenges to healthcare systems?']
```"
2587,"```

#### Generating Questions from a given passage

The `generate_questions` function generates questions from a given passage. The input is a string containing the passage and the output is a list of questions.

```python
from elqg import generate_questions

passage = """"""
The COVID-19 pandemic has resulted in an unprecedented global public health crisis that has caused millions of deaths worldwide.
""""""

questions = generate_questions(passage)
print(questions)
```

Output:

```
['How many people died due to COVID-19?', 'What are the symptoms of COVID-19?']
```"
2606,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 4.`

##### Prompt:
``\
`Q: What is the square root of 8961?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 5.`

##### Prompt:
``\
`Q: What is the name of the actor who played the character of Jamie in the television series Dr. Quinn, Medicine Woman?`\
`A:"
2607,"```

#### Generating Questions from a given passage

The `generate_questions` function generates questions from a given passage. The input is a string containing the passage and the output is a list of questions.

```python
from elqg import generate_questions

passage = """"""
The COVID-19 pandemic has resulted in an unprecedented global public health crisis.
As of April 2022, there have been over 536 million confirmed cases, 4.8 million deaths, and 490 million recoveries globally.
""""""

questions = generate_questions(passage)
print(questions)
```

Output:

```
['How many people have recovered?', 'What are the symptoms of COVID-19?', 'How many people have died due to COVID-19?', 'What is the mortality rate of COVID-"
2612,"```

#### Generating Questions from a given passage

The `generate_questions` function generates questions from a given passage. The input is a string containing the passage and the output is a list of questions.

```python
from elqg import generate_questions

passage = """"""
The COVID-19 pandemic has resulted in an unprecedented global public health crisis.
It has caused millions of deaths worldwide, and has led to widespread economic disruption.
""""""

questions = generate_questions(passage)
print(questions)
```

Output:

```
['How many people have died due to COVID-19?', 'What are the symptoms of COVID-19?', 'What are the effects of COVID-19?']
```"
2626,"```

#### Generating Questions from a given passage

The `generate_questions` function generates questions from a given passage. The input is a string containing the passage and the output is a list of questions.

```python
from elqg import generate_questions

passage = """"""
The COVID-19 pandemic has resulted in an unprecedented global public health crisis that has caused millions of deaths worldwide.
""""""

questions = generate_questions(passage)
print(questions)
```

Output:

```
['How many people died due to COVID-19?', 'What are the symptoms of COVID-19?']
```"
2634,"```

#### Generating Questions from a given passage

The `generate_questions` function generates questions from a given passage. The input is a string containing the passage and the output is a list of questions.

```python
from elqg import generate_questions

passage = """"""
The COVID-19 pandemic has resulted in an unprecedented global public health crisis.
It has caused millions of deaths worldwide, and has led to widespread economic disruption.
""""""

questions = generate_questions(passage)
print(questions)
```

Output:

```
['How many people have died due to COVID-19?', 'What are the symptoms of COVID-19?', 'What are the effects of COVID-19?']
```"
266,"```

#### Generating a new dataset

To generate a new dataset, run the following command:

```bash
python -m src.data.generate_dataset --output_dir <OUTPUT_DIR> --num_examples <NUM_EXAMPLES>
```

The output directory will contain two files: `train.jsonl` and `test.jsonl`. Each line in these files is a JSON object containing the following fields:
- `question`: The question text.
- `answer`: The answer text.
- `context`: The context text.
- `meta`: Metadata about the example (e.g., the number of records in the database).

### Training

To train a model, run the following command:

```bash
python -m src.models.train --model_type <MODEL_TYPE> --model_name_or_path <MODEL_NAME"
2661,"```

#### Generating Questions from a given passage

The `generate_questions` function generates questions from a given passage. The input is a string containing the passage and the output is a list of questions.

```python
from elq.elq import generate_questions

passage = """"""
The COVID-19 pandemic has resulted in unprecedented challenges to healthcare systems around the world.
In the United States, the number of people who died from COVID-19 exceeded 500,000 by mid-October 2021.
""""""

questions = generate_questions(passage)
print(questions)
```

Output:

```
['How many people died from COVID-19?', 'What are the challenges to healthcare systems?']
```"
2686,"```

#### Generating Questions from a given passage

The `generate_questions` function generates questions from a given passage. The input is a string containing the passage and the output is a list of questions.

```python
from elqg import generate_questions

passage = """"""
The COVID-19 pandemic has resulted in an unprecedented global public health crisis that has caused millions of deaths worldwide.
""""""

questions = generate_questions(passage)
print(questions)
```

Output:

```
['How many people have died due to COVID-19?', 'What are the symptoms of COVID-19?']
```"
2694,"```

#### Generating Questions from a given passage

The `generate_questions` function generates questions from a given passage. The input is a string containing the passage and the output is a list of questions.

```python
from elqg import generate_questions

passage = """"""
The COVID-19 pandemic has resulted in an unprecedented global public health crisis.
It has caused millions of deaths worldwide, and led to widespread economic disruption.
""""""

print(generate_questions(passage))
```

Output:

```
['How many people have died due to COVID-19?', 'What are the symptoms of COVID-19?', 'What are the causes of COVID-19?']
```"
2727,"```

#### Generating Questions from a given passage

The `generate_questions.py` script can be used to generate questions from a given passage. The script takes in a text file containing the passage and outputs a json file containing the generated questions.

```bash
python generate_questions.py --passage_file <path-to-passage-file> --output_file <path-to-output-json-file>
```

Example:

```bash
python generate_questions.py --passage_file data/sample_passages/sample_passage.txt --output_file sample_questions.json
```

### Evaluation

We use the [Rouge](https://www.aclweb.org/anthology/W04-1018/) metric to evaluate the performance of the model. We report the Rouge-1, Rouge-"
273,"```

#### Generating a new dataset

To generate a new dataset, run the following command:

```bash
python3 -m clinical_trial_elasticsearch_trainer.generate_dataset \
--output_dir=<OUTPUT_DIR> \
--num_examples=<NUM_EXAMPLES> \
--max_seq_length=<MAX_SEQ_LENGTH> \
--min_question_length=<MIN_QUESTION_LENGTH> \
--max_question_length=<MAX_QUESTION_LENGTH> \
--min_num_answers=<MIN_NUM_ANSWERS> \
--max_num_answers=<MAX_NUM_ANSWERS> \
--seed=<SEED>
```

The arguments are:

*   `output_dir`: The output directory where the dataset will be written to."
2781,"```

#### Generating Questions from a given passage

The `generate_questions` function generates questions from a given passage. The input is a string containing the passage and the output is a list of questions.

```python
from elqg import generate_questions

passage = """"""
The COVID-19 pandemic has resulted in an unprecedented global public health crisis.
As of April 2022, more than 53 million people have been infected by SARS-CoV-2, the virus that causes COVID-19, resulting in more than 8 million deaths.
""""""

questions = generate_questions(passage)
print(questions)
```

Output:

```
['How many people were infected by SARS-CoV-2?', 'What are the symptoms of COVID-19?', 'How many people have"
2792,"```

#### Generating Questions from a given passage

The `generate_questions` function generates questions from a given passage. The input is a string containing the passage and the output is a list of questions.

```python
from elqg import generate_questions

passage = """"""
The COVID-19 pandemic has resulted in unprecedented challenges to healthcare systems around the world.
In the United States, the COVID-19 pandemic has resulted in more than 600,000 deaths as of August 2021.
""""""

questions = generate_questions(passage)
print(questions)
```

Output:

```
['How many people have died due to COVID-19?', 'What are the challenges faced by healthcare systems during the COVID-19 pandemic?']
```"
281,"```

#### Generating a new dataset

To generate a new dataset, run the following command:

```bash
python3 -m clinical_trial_elasticsearch_trainer.generate_dataset \
--output_dir=<OUTPUT_DIR> \
--num_examples=<NUM_EXAMPLES> \
--max_seq_length=<MAX_SEQ_LENGTH> \
--min_question_length=<MIN_QUESTION_LENGTH> \
--max_question_length=<MAX_QUESTION_LENGTH> \
--min_num_answers=<MIN_NUM_ANSWERS> \
--max_num_answers=<MAX_NUM_ANSWERS> \
--seed=<SEED>
```

The arguments are:

*   `output_dir`: The output directory where the dataset will be written to."
2824,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who died.]
Answer:
```

#####"
2826,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who died.]
Answer:
```

#####"
2829,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who died.]
Answer:
```

#####"
2834,"```

##### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who died.]
Answer:
```

#####"
2836,"```

##### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who died.]
Answer:
```

#####"
2853,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who died.]
Answer:
```

#####"
2909,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
291,"```

##### Example 4

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the number of patients who died after receiving a vaccine? ]
Answer"
2918,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
2952,"```

#### Generating a new dataset

To generate a new dataset, run the following command:

```bash
python3 -m clinical_trial_elasticsearch_trainer.generate_dataset \
--input_file=clinical_trial_data/clinical_trials.csv \
--output_dir=clinical_trial_data/generated_data \
--num_records=100000 \
--max_tokens_per_doc=2000 \
--min_tokens_per_doc=100 \
--seed=42
```

This will create a new dataset in `clinical_trial_data/generated_data` with 100k records.

### Running the model locally

To train and evaluate the model on your local machine, you can use the following"
2960,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
3010,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 36?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
3027,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 36?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
3029,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the square root of 9?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 4.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-processing"
3033,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 36?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
3036,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 36?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
3037,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 36?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
3069,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 4.`

##### Prompt:
``\
`Q: What is the square root of 9?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 5.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-processing"
3074,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who died from the adverse event and labeled as Y"
3091,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the author of the book 'The Adventures of Tom Sawyer'?`\
`A: `

##### D"
3113,"```

##### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who died after receiving a vaccine on 08"
313,"```

##### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the number of patients who died after receiving a vaccine? ]
Answer"
3136,"```

##### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients whose date of vaccination is 06/2"
3152,"```

##### Example 3
```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who died after receiving a vaccine on 12/"
3156,"```

##### Example 4

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients whose date of vaccination is 03/2"
3160,"```

#### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients whose date of vaccination is 09/29"
3164,"```

##### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients whose date of vaccination is 07/1"
3167,"```

##### Example 3
```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who died after receiving a vaccine on 09/"
3169,"```

##### Example 3
```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who died after receiving a vaccine on 07/"
3170,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 4.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 5.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
3202,"```

##### Example 4

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients whose date of vaccination is 03/1"
324,"```

##### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the number of patients who died after receiving a vaccine? ]
Answer"
3253,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 4.`

##### Prompt:
``\
`Q: What is the square root of 8961?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 5.`

##### Prompt:
``\
`Q: What is the name of the actor who played James Bond in the film Dr. No?`\
`A: `

##### Dummy"
3258,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 4.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 5.`

##### Prompt:
``\
`Q: What is the name of the actor who played James Bond in the film Dr. No?`\
`A: `

##### Dummy model response"
3261,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 4.`

##### Prompt:
``\
`Q: What is the square root of 9?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 5.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-processing"
3276,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 1.`

##### Prompt:
``\
`Q: What is the square root of 9?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 25?`\
`A: `

##### Dummy model response (after post-processing with regex or stop"
3277,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 4.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 5.`

##### Prompt:
``\
`Q: What is the name of the actor who played James Bond in the film Dr. No?`\
`A: `

##### Dummy model response"
3296,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 4.`

##### Prompt:
``\
`Q: What is the square root of 36?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 5.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
3298,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 1.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 76?`\
`A: `

##### Dummy model response (after post-processing with regex or"
330,"```

##### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the number of patients who died after receiving a vaccine? ]
Answer"
3315,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 4.`

##### Prompt:
``\
`Q: What is the square root of 9?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 5.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-processing"
3334,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 4.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 5.`

##### Prompt:
``\
`Q: What is the name of the actor who played James Bond in the film Dr. No?`\
`A: `

##### Dummy model response"
3336,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 4.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 5.`

##### Prompt:
``\
`Q: What is the name of the actor who played James Bond?`\
`A: `

##### Dummy model response (after post-processing with"
3340,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 1.`

##### Prompt:
``\
`Q: What is the square root of 36?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the name of the hottest chili?`\
`A: `

##### Dummy model response (after post-processing with"
3344,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 1.`

##### Prompt:
``\
`Q: What is the square root of 9?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 25?`\
`A: `

##### Dummy model response (after post-processing with regex or stop"
3346,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 1.`

##### Prompt:
``\
`Q: What is the square root of 81?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 8204?`\
`A: `

##### Dummy model response (after post-processing with"
337,"```

##### Example 4

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the number of patients who died after receiving a vaccine? ]
Answer"
3376,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 5.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 6.`

##### Prompt:
``\
`Q: What is the name of the actor who played James Bond?`\
`A: `

##### Dummy model response (after post-processing with"
3386,"```

#### Generating Questions from a given passage

The script `generate_questions.py` can be used to generate questions from a given passage. The script takes in two arguments:
- `--passage`: Passage from which questions are to be generated
- `--num_questions`: Number of questions to be generated

Example usage:
```bash
python generate_questions.py --passage ""The patient was admitted to the hospital on 05/04/2021 and discharged on 06/04/2021."" --num_questions 10
```

Output:
```
Question: ### What is the date of admission of the patient?
Answer: 05/04/2021

Question: ### What is the date of discharge of the patient?
Answer: 06/04/2021"
3404,"```

#### Generating Questions from a given dataset

We can also generate questions from a given dataset. For example, we can use the following command to generate questions from the `covid-19` dataset.

```bash
python3 -m covidfaq.generate_questions --dataset=covid-19 --num_questions=500 --output_file=covid-19-questions.jsonl
```

This will generate 500 questions and save them in the file `covid-19-questions.jsonl`."
3421,"```

#### Generating Questions from a given passage

The `generate_questions.py` script can be used to generate questions from a given passage. The script takes in a text file containing the passage and outputs a json file containing the generated questions.

```bash
python generate_questions.py --passage_file <path-to-passage-file> --output_file <path-to-output-json-file>
```

For example,

```bash
python generate_questions.py --passage_file data/sample_passages/sample_passage_1.txt --output_file sample_passage_1_questions.json
```

This will output a json file named `sample_passage_1_questions.json` which contains the following:

```json
{
    ""questions"": [
        {
            ""question"": ""What is the name"
3444,"```

#### Generating Questions from a given passage

The `generate_questions.py` script can be used to generate questions from a given passage. The script takes in a text file containing the passage and outputs a json file containing the generated questions.

```bash
python generate_questions.py --passage_file <path-to-passage-file> --output_file <path-to-output-file>
```

Example:

```bash
python generate_questions.py --passage_file data/passages/example_passage.txt --output_file data/generated_questions/example_passage.json
```

### Evaluation

We use the [Rouge](https://pypi.org/project/rouge/) package for evaluation.

To evaluate the model on the test set, run the following command:

```bash
python"
3445,"```

#### Generating Questions from a given document

The `generate_questions.py` script can be used to generate questions from a given document. The script takes in two arguments:
- `--document`: Path to the document that needs to be processed.
- `--output_file`: Path to the output file where the generated questions will be stored.

Example usage:
```bash
python generate_questions.py --document=data/clinical_notes/clinical_notes_0.txt --output_file=generated_questions.jsonl
```

### Evaluation

We use the [Elasticsearch](https://www.elastic.co/) search engine to evaluate our models. We use the [official evaluation script](https://github.com/castorini/docTTTTTquery) released by the TriviaQA authors.

To run the evaluation,"
3491,"```

#### Generating Questions from a given passage

The `generate_questions.py` script can be used to generate questions from a given passage. The script takes in a text file containing the passage and outputs a JSON file containing the generated questions.

```bash
python generate_questions.py --passage_file <path-to-passage-file> --output_file <path-to-output-file>
```

For example,

```bash
python generate_questions.py --passage_file data/sample_passages/sample_passage_1.txt --output_file sample_passage_1_questions.json
```

This will output a JSON file containing the generated questions.

```json
{
    ""questions"": [
        {
            ""question"": ""What is the name of the patient who died on 12/18/20"
3526,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 4.`

##### Prompt:
``\
`Q: What is the square root of 8961?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 5.`

##### Prompt:
``\
`Q: What is the name of the actor who played James Bond in the film Dr. No?`\
`A: `

##### Dummy"
3549,"```

### Example 3

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the average age of patients who died after getting a vacc"
3557,"```

### Example 3

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the average age of patients who died after getting vaccin"
3560,"```

### Example 4

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the average age of patients who died after getting vaccin"
3563,"```

### Example 3

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the average age of patients who died after getting vaccin"
357,"```

##### Example 4

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the number of patients who died after receiving a vaccine? ]
Answer"
3601,"```

### Example 4

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the average age of patients who died after getting a vacc"
3602,"```

### Example 3

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the average age of patients who died after getting a vacc"
3629,"```

### Example 3

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the average age of patients who died after getting a vacc"
3645,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the average age of patients who died after getting a vaccine?]"
3647,"```

##### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the number of patients who died after getting vaccinated?]
Answer"
3657,"```

#### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who died after receiving a vaccine. ]
Answer:"
3679,"```

#### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who died after receiving a vaccine. ]
Answer:"
3695,"```

#### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who died after receiving a vaccine. ]
Answer:"
3710,"```

#### Example 4

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who died after receiving a vaccine. ]
Answer:"
3717,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 5.`

##### Prompt:
``\
`Q: What is the square root of 8961?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 6.`

##### Prompt:
``\
`Q: What is the name of the actor who played James Bond in the film Dr. No?`\
`A: `

##### Dummy"
3732,"```

##### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who died after receiving a vaccine. ]
Answer"
3749,"```

#### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who died after receiving a vaccine. ]
Answer:"
3767,"```

#### Example 4

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who died after receiving a vaccine. ]
Answer:"
3771,"```

#### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who died after receiving a vaccine. ]
Answer:"
38,"```

##### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients whose information are received on 01/08/"
380,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 4.`

##### Prompt:
``\
`Q: What is the square root of 9?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 5.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-processing"
3811,"```

##### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Give me all the patients who died after receiving a vaccine. ]
Answer:"
3815,"```

##### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Give me all the patients who died after receiving a vaccine. ]
Answer:"
382,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 4.`

##### Prompt:
``\
`Q: What is the square root of 36?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 5.`

##### Prompt:
``\
`Q: What is the name of the hottest chili?`\
`A: `

##### Dummy model response (after post-processing with"
3853,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 4.`

##### Prompt:
``\
`Q: What is the square root of 9?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 5.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-processing"
3856,"```

##### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Give me all the patients who died after receiving a vaccine. ]
Answer:"
3857,"```

##### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Give me all the patients who died after receiving a vaccine. ]
Answer:"
3859,"```

##### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Give me all the patients who died after receiving a vaccine. ]
Answer:"
3861,"```

##### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Give me all the patients who died after receiving a vaccine. ]
Answer:"
3865,"```

##### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Give me all the patients who died after receiving a vaccine. ]
Answer:"
387,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 4.`

##### Prompt:
``\
`Q: What is the square root of 9?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 5.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-processing"
3913,"```

##### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Give me all the patients who died after receiving a vaccine. ]
Answer:"
3916,"```

##### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Give me all the patients who died after receiving a vaccine. ]
Answer:"
3917,"```

##### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Give me all the patients who died after receiving a vaccine. ]
Answer:"
3918,"```

##### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Give me all the patients who died after receiving a vaccine. ]
Answer:"
3924,"```

##### Example 4
```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Give me all the patients who died after receiving a vaccine. ]
Answer:"
3931,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new file called `data.json` in the current directory."
3941,"```

#### Generating a new dataset

To generate a new dataset, run the following command:

```bash
python -m src.data.generate_dataset --output_dir <OUTPUT_DIR> --num_examples <NUM_EXAMPLES>
```

The output directory will contain two files: `train.jsonl` and `test.jsonl`. Each line in these files is a JSON object containing the following fields:
- `question`: The question text.
- `answer`: The answer text.
- `context`: The context text.
- `meta`: Metadata about the example (e.g., the number of fields in the database).

### Training

To train a model, run the following command:

```bash
python -m src.models.train --model_type <MODEL_TYPE> --model_name_or_path <MODEL_NAME"
3959,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and the number of examples to generate in the new dataset. The output is written in a file named `generated_dataset.jsonl`.

Example usage:

```bash
python generate_dataset.py --input_path=data/train.jsonl --num_examples=1000
```"
3968,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
3993,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new file called `data.jsonl` in the current directory."
4014,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
4050,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
4055,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new file called `data.jsonl` in the current directory."
4065,"```

#### Generating Questions from a given dataset

We can also generate questions from a given dataset using the following command:

```bash
python3 -m clinical_qa.generate_questions --dataset_path <path to dataset> --output_file <path to output file>
```

The dataset should be in the same format as the one used in the [COVID-QA](https://github.com/deepset-ai/COVID-QA) project.

### Evaluation

To evaluate the model, we use the `evaluate.py` script. The script takes the path to the test set and the path to the output file generated by the `predict.py` script. It then generates the evaluation metrics and stores them in a JSON file.

```bash
python3 -m clinical_qa.evaluate --test_set_path <path to test"
4087,"```

#### Generating Questions from a given document

The following code generates questions from a given document.

```python
from elq.elq import ELQ

elq = ELQ()

document = ""The patient was diagnosed with cancer and admitted to the hospital.""
questions = elq.generate_questions(document)
print(questions)
```

Output:

```
['What is the number of patients who were diagnosed with cancer and admitted to the hospital?', 'What is the number of patients who were diagnosed with cancer and admitted to the hospital?', 'What is the number of patients who were diagnosed with cancer and admitted to the hospital?', 'What is the number of patients who were diagnosed with cancer and admitted to the hospital?']
```

#### Generating Questions from a given document with customized parameters

The following code generates questions from a given document with"
4088,"```

#### Generating Questions from a given dataset

We can generate questions from a given dataset using the following command:

```bash
python3 -m clinical_trial_qa.generate_questions --dataset_path <PATH_TO_DATASET> --output_file <OUTPUT_FILE>
```

The output file will contain the generated questions in the format:

```
Question: ###[ What is the number of cases where onset date of adverse event symptom is 06/02/2021. ]
Answer:
```

### Evaluation

To evaluate the model, we use the [Evaluator](https://github.com/allenai/biomed_roberta/blob/master/evaluation/evaluator.py) class from the [BioMedRoBERTa](https://github.com/allenai/bi"
41,"```

#### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[What is the number of patients who died after receiving the vaccine?]
Answer:"
4112,"```

#### Generating Questions from a given dataset

We can generate questions from a given dataset using the following command:

```bash
python -m src.generate_questions --dataset_path <path to dataset> --output_file <name of output file>
```

The generated questions will be stored in the output file.

### Evaluation

To evaluate the model, we use the [Evaluator](https://github.com/castorini/pygaggle/blob/master/pygaggle/evaluate/__init__.py) class provided by PyGaggle.

#### Evaluating the model on the test set

To evaluate the model on the test set, run the following command:

```bash
python -m src.evaluate --model_name <name of the model> --test_run_dir <directory containing the test set> --"
4116,"```

#### Generating Questions from a given dataset

We can generate questions from a given dataset using the following command:

```bash
python -m src.generate_questions --dataset_path <path to dataset> --output_file <name of output file>
```

The generated questions will be stored in the output file.

### Evaluation

To evaluate the model, we use the [Evaluator](https://github.com/castorini/pyserini/blob/master/pyserini/eval/evaluator.py) class provided by Pyserini.

#### Evaluating the model on the test set

To evaluate the model on the test set, run the following command:

```bash
python -m src.evaluate --model_path <path to model> --test_data_path <path to test data> --output_file <name of"
4120,"```

#### Generating Questions from a given dataset

We can generate questions from a given dataset using the following command:

```bash
python -m src.generate_questions --dataset_path <path to dataset> --output_file <name of output file>
```

The generated questions will be stored in the output file.

### Evaluation

To evaluate the model, we use the [Evaluator](https://github.com/castorini/pygaggle/blob/master/pygaggle/evaluate/__init__.py) class provided by PyGaggle.

#### Evaluating the model on the test set

To evaluate the model on the test set, run the following command:

```bash
python -m src.evaluate --model_name <name of the model> --test_run_dir <directory containing the test set> --"
4127,"```

#### Generating Questions from a given document

The following code generates questions from a given document.

```python
from elasticsearch import Elasticsearch
from elasticsearch_dsl import Search
import json
from elasticsearch_question_generation import generate_questions

es = Elasticsearch()
index_name = ""clinical-trials""
doc_id = ""1""

search = Search(using=es, index=index_name).query(""match"", _id=doc_id)
result = search.execute().to_dict()

print(json.dumps(generate_questions(result[""hits""][""hits""][0][""_source""], result[""hits""][""hits""][0][""_index""]), indent=4))
```

Output:

```json
{
    ""Questions"": [
        {"
4153,"```

#### Generating Questions from a given dataset

We can generate questions from a given dataset using the following command:

```bash
python -m src.generate_questions --dataset_path <path to dataset> --output_file <name of output file>
```

The generated questions will be stored in the output file.

### Evaluation

To evaluate the model, we use the [Evaluator](https://github.com/castorini/pygaggle/blob/master/pygaggle/evaluate/__init__.py) class provided by PyGaggle.

#### Evaluating the model on the test set

To evaluate the model on the test set, run the following command:

```bash
python -m src.evaluate --model_name <name of the model> --test_run_dir <directory containing the test set> --"
4158,"```

#### Generating Questions from a given document

The following code generates questions from a given document.

```python
from elasticsearch import Elasticsearch
from elasticsearch_dsl import Search
import json
from elasticsearch_question_generation import generate_questions

es = Elasticsearch()
index_name = ""clinical-trials""
doc_id = ""1""

search = Search(using=es, index=index_name).query(""match"", _id=doc_id)
result = search.execute().to_dict()

print(json.dumps(generate_questions(result[""hits""][""hits""][0][""_source""], result[""hits""][""hits""][0][""_id""]), indent=4))
```

Output:

```json
{
    ""questions"": [
        {
            """
4169,"```

#### Generating Questions from a given document

The following code generates questions from a given document.

```python
from elasticsearch import Elasticsearch
from elasticsearch_dsl import Search
import json
from elasticsearch_question_generation import generate_questions

es = Elasticsearch()
index_name = ""clinical-trials""
doc_id = ""1""

search = Search(using=es, index=index_name).query(""match"", _id=doc_id)
result = search.execute().to_dict()

print(json.dumps(generate_questions(result[""hits""][""hits""][0][""_source""], result[""hits""][""hits""][0][""_index""]), indent=4))
```

Output:

```json
{
    ""questions"": [
        {
            """
4179,"```

#### Generating Questions from a given dataset

We can generate questions from a given dataset using the following command:

```bash
python3 -m clinical_trial_qa.generate_questions --dataset_path <path to dataset> --output_file <path to output file>
```

The dataset should be in the same format as the one used in the [original paper](https://arxiv.org/abs/2005.07685).

### Evaluation

To evaluate the model, we use the `evaluate.py` script. The script takes two arguments:
- `--model_name`: Name of the model to be evaluated. This can be either `bert`, `roberta`, or `distilbert`.
- `--dataset_path`: Path to the dataset to be used for evaluation.

For example, to evaluate the BERT model on"
4200,"```

#### Generating Questions from a given dataset

We can generate questions from a given dataset using the following command:

```bash
python3 -m clinical_trial_qa.generate_questions --dataset_path <path to dataset> --output_file <path to output file>
```

The dataset should be in the same format as the one used in the [original paper](https://arxiv.org/abs/1704.06376).

### Evaluation

To evaluate the model, we use the `evaluate.py` script. The script takes two arguments:
- `--model_dir`: Path to the directory containing the model checkpoints.
- `--test_data_path`: Path to the test data.

Example usage:

```bash
python3 -m clinical_trial_qa.evaluate --model_dir./"
4201,"```

#### Generating Questions from a given dataset

We can generate questions from a given dataset using the following command:

```bash
python3 -m clinical_trial_qa.generate_questions --dataset_path <PATH_TO_DATASET> --output_file <OUTPUT_FILE>
```

The output file will contain the generated questions in the format:

```
Question: ###[ What is the number of cases where onset date of adverse event symptom is 08/02/2021. ]
```

### Evaluation

To evaluate the model, we use the [Evaluator](https://github.com/allenai/biomed_roberta/blob/master/evaluation/evaluator.py) class from the [BioMedRoBERTa](https://github.com/allenai/biomed_ro"
4248,"```

#### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients whose interval from the vaccination date to the onset date"
425,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 1.`

##### Prompt:
``\
`Q: What is the square root of 9?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 27?`\
`A: `

##### Dummy model response (after post-processing with regex or stop"
4260,"```

#### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients whose interval from the vaccination date to the onset date"
4280,"```

#### Example 4

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients whose interval from the vaccination date to the onset date"
4320,"```

#### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients whose interval from the vaccination date to the onset date"
4333,"```

#### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients whose interval from the vaccination date to the onset date"
4342,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
4345,"```

#### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ List all the records that the interval from the vaccination date to the onset date is"
4367,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
4385,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
4397,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
4406,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new file called `data/new_dataset.jsonl` which contains the newly generated questions and answers."
4418,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
4419,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
4423,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
4424,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
4436,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new file called `data/new_dataset.jsonl` which contains the newly generated questions and answers."
4445,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
4472,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
4473,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
4478,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
448,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 4.`

##### Prompt:
``\
`Q: What is the square root of 9?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 5.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-processing"
4491,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
4500,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
4529,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
4539,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
4545,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
4546,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
456,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 4.`

##### Prompt:
``\
`Q: What is the square root of 9?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 5.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-processing"
4577,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
4590,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
4596,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
4617,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 5.`

##### Prompt:
``\
`Q: What is the square root of 36?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 6.`

##### Prompt:
``\
`Q: What is the name of the author of the book 'The Adventures of Tom Sawyer'?`\
`A: `

##### D"
4637,"```

#### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the average age of patients who died?]
Answer:
```

####"
4653,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 4.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 5.`

##### Prompt:
``\
`Q: What is the name of the author of the book 'The Adventures of Tom Sawyer'?`\
`A: `

##### D"
4655,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 8961?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the organization that owns and operates the World Wide Web?`\
`A: `

##### D"
4656,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 36?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the author of the book 'The Adventures of Tom Sawyer'?`\
`A: `

##### D"
466,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who is from ME and died.]
Answer:
```"
4686,"```

#### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the average age of patients who died?]
Answer:
```

####"
4689,"```

#### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the average age of patients who died?]
Answer:
```

####"
47,"```

#### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[What is the number of patients who died after receiving the vaccine?]
Answer:"
4706,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 81?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the author of the book 'The Adventures of Tom Sawyer'?`\
`A: `

##### D"
4715,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the square root of 8961?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 4.`

##### Prompt:
``\
`Q: What is the name of the organization that owns and operates the World Wide Web?`\
`A: `

##### D"
4725,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 9?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-processing"
4733,"```

#### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the average age of patients who died?]
Answer:
```

####"
4762,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who took test of ana choice screen. ]
Answer"
4764,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who took test of ct scan head and died. ]"
4789,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who took test of sonogram. ]
Answer:"
4790,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who took test of crp value. ]
Answer:"
4808,"```

### Example 2

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who took test of covid test results"
4828,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who took test of physical. ]
Answer:
```"
4855,"```

##### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who took test of high temperatures up to 10"
4862,"```

##### Prompt:
``\
`Q: Clinical Question: What is the most common cause of death in patients who have a history of hypertension?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: Clinical Question: What is the most common cause of death in patients who have a history of hypertension?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: Clinical Question: What is"
4866,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
49,"```

##### Example 4

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients whose information are received on 03/11/"
4902,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
4912,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
4917,"```

##### Prompt:
``\
`Q: Clinical Question: What is the most common cause of death in patients who have a history of hypertension?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: Clinical Question: What is the most common cause of death in patients who have a history of hypertension?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: Clinical Question: What is"
4946,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
4967,"```

##### Prompt:
``\
`Q: Clinical Question: What is the most common cause of death in patients with a history of hypertension?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: Clinical Question: What is the most common cause of death in patients with a history of hypertension?`\
`A: Hypertensive heart disease`\
`  choice: Heart failure`\
`  choice: Stroke`\
`  choice: Chronic kidney disease`\
`  choice: Other`\
`A: `

##### Dummy model response (after post-processing with regex or stop"
4972,"```

#### Generating a new dataset from the existing one

The following command will generate a new dataset `new_dataset` from an existing dataset `old_dataset`. The new dataset will contain only those questions and answers that are present in the old dataset.

```bash
python -m clinical_trial_elasticsearch_retrieval.scripts.generate_dataset \
    --input_path=<PATH_TO_OLD_DATASET> \
    --output_path=<PATH_TO_NEW_DATASET> \
    --num_questions=10000
```

### Evaluation

To evaluate the retriever on the dataset, run the following command:

```bash
python -m clinical_trial_elasticsearch_retrieval.evaluation.evaluate_retriever \
    --dataset_path=<PATH"
4974,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
498,"```

### Example 2

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who is from PR and has a v"
4983,"```

#### Generating a new dataset from the existing one

The following command will generate a new dataset by adding a new column to the existing dataset. The new column is called `new_column` and it contains the value `10`.

```bash
python3 -m clinical_trial_elasticsearch_trainer.generate_dataset \
--input_file=clinical_trial_data/train.csv \
--output_file=clinical_trial_data/train_with_new_column.csv \
--additional_columns='{""new_column"": ""10""}'
```

### Running the model

To run the model locally, use the following command:

```bash
python3 -m clinical_trial_elasticsearch_trainer.run_model \
--project_id=PROJECT_ID \
--region="
4995,"```

#### Generating Questions from a Table

We can also generate questions from a table. For example, we can use the following command to generate questions from the table `table1` in the dataset `dataset1`.

```bash
python3 -m src.generate_questions --dataset_name=dataset1 --table_name=table1
```

The output will be as follows:

```text
Question: ### What is the average age of patients who died?
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, H"
4997,"```

#### Generating Questions from Text

We can also generate questions from text using the `generate_questions` function. This function takes in a string and returns a list of questions.

```python
from elq.elq import generate_questions

text = """"""
The patient was seen by Dr. Smith at the hospital on 2019-03-04. The patient is a 56 year old female who presents with fever, cough, and shortness of breath. She has been taking paracetamol for the last week. She has no history of diabetes or asthma.
""""""

print(generate_questions(text))
```

Output:

```
['What is the patient\'s age?', 'What is the patient\'s gender?', 'What is the patient\'s date of birth?', 'What is the patient\'s"
5007,"```

#### Generating Questions from a Table

We can also generate questions from a table. For example, we can use the following command to generate questions from the table `table1` in the dataset `dataset1`.

```bash
python3 -m src.generate_questions --dataset_name=dataset1 --table_name=table1
```

The output will be as follows:

```text
Question: ### What is the average age of patients who died?
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, H"
5010,"```

#### Generating Questions from a Table

We can also generate questions from a table. For example, we can use the following command to generate questions from the table `table1` in the dataset `dataset1`.

```bash
python3 -m src.generate_questions --dataset dataset1 --table table1
```

The output will be as follows:

```text
Question: ### What is the average age of patients who died?
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR"
5012,"```

#### Generating Questions and Answers from a given dataset

The following command generates questions and answers from the given dataset. The generated questions are stored in `questions.txt` file and the answers are stored in `answers.txt` file.

```bash
python generate_questions.py --dataset_path <path to dataset> --output_dir <output directory>
```

For example, the following command generates questions and answers from the `data/COVID-19_vaccine_trial_results.csv` dataset.

```bash
python generate_questions.py --dataset_path data/COVID-19_vaccine_trial_results.csv --output_dir output
```

### Evaluation

We evaluate our model on the [Natural Questions](https://ai.google.com/research/NaturalQuestions) (N"
5017,"```

#### Generating Questions from a Table

We can also generate questions from a table. For example, we can use the following command to generate questions from the table `table1` in the dataset `dataset1`.

```bash
python3 -m src.generate_questions --dataset dataset1 --table table1
```

The output will be as follows:

```text
Question: ### What is the average age of patients who died?
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR"
5018,"```

#### Generating Questions from the CORD-19 Dataset

We can also generate questions from the CORD-19 dataset. The following command will generate 500 questions from the CORD-19 dataset and save them to `questions.txt`.

```bash
python -m covidfaq.generate_questions --dataset cord19 --num_questions 500 --output_file questions.txt
```

The output file will contain questions in the following format:

```text
Question: What is the incubation period of COVID-19?
Context: Coronavirus disease (COVID-19) is an infectious disease caused by a newly discovered coronavirus. Most people infected with the COVID-19 virus will experience mild to moderate respiratory illness and recover without requiring special treatment. Older people, and those with underlying medical"
5023,"```

##### Prompt:
``\
`Q: What is the name of the person who wrote the book 'The Adventures of Tom Sawyer'?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the name of the person who wrote the book 'The Adventures of Tom Sawyer'?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the person who wrote the book"
5036,"```

#### Generating Questions from a Table

We can also generate questions from a table. For example, we can use the following command to generate questions from the table in [this paper](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6081759/).

```bash
python3 -m src.generate_questions --table_path data/tables/2018-04-12-10-53-39-1523456506/tables.jsonl --output_file data/generated_questions/2018-04-12-10-53-39-1523456506/questions.txt
```

The generated questions will be stored in `data/generated_questions/2018-04-12"
5052,"```

#### Generating Questions from a Table

We can also generate questions from a table. For example, we can use the following command to generate questions from the table `table1` in the dataset `dataset1`.

```bash
python3 -m src.generate_questions --dataset dataset1 --table table1
```

The output will be as follows:

```text
Question: ### What is the average age of patients who died?
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR"
5056,"```

##### Prompt:
``\
`Q: What is the name of the person who voiced the Unicorn in The Last Unicorn?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the name of the person who voiced the Unicorn in The Last Unicorn?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the person who voiced the Unic"
5072,"```

#### Generating Questions from a Table

We can also generate questions from a table. For example, we can use the following command to generate questions from the `table` in the `data/tables/1000029.csv` file.

```bash
python3 -m src.generate_questions --table data/tables/1000029.csv
```

The output will be as follows:

```text
Question: ### What is the average age of patients who have been diagnosed with acute myocardial infarction?
Prompt: ### Acute Myocardial Infarction Patient Data
# Age, Gender, Race, Weight, Height, Diagnosis, Treatment, Discharged, Admission Date, Discharge Date###Generate the Elasticsearch query for the question
Clinical Notes: ###"
5084,"```

#### Generating Questions and Answers from a given dataset

The following command generates questions and answers from the given dataset. The generated questions are stored in `questions.txt` file and the answers are stored in `answers.txt` file.

```bash
python generate_questions.py --dataset_path <path to dataset> --output_dir <output directory>
```

For example, the following command generates questions and answers from the `data/covid-19-open-research-dataset-v2.jsonl` dataset.

```bash
python generate_questions.py --dataset_path data/covid-19-open-research-dataset-v2.jsonl --output_dir output
```

### Evaluation

We evaluate our model on the [COVID-QA](https://github.com/deepset-ai/CO"
5086,"```

#### Generating Questions and Answers from a given corpus

The following command generates questions and answers from the given corpus. The generated questions are stored in `questions.txt` file and answers are stored in `answers.txt` file.

```bash
python generate_questions.py --corpus <path to the corpus> --output_dir <path to output directory>
```

For example, the following command generates questions and answers from the `clinical-notes` dataset.

```bash
python generate_questions.py --corpus data/clinical-notes/ --output_dir data/clinical-notes/
```

### Evaluation

We evaluate our model on two datasets: [Clinical Notes](https://github.com/jind11/MedQA) and [SQuAD](https://rajpurkar.github."
5092,"```

#### Generating Questions from a Table

We can also generate questions from a table. For example, we can use the following command to generate questions from the table in [this paper](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6081759/).

```bash
python3 -m src.generate_questions --table_path data/tables/2018-04-12-10-53-39-1523456500/tables.jsonl --output_file data/generated_questions/table_questions.txt
```

The generated questions are as follows:

```text
Question: ### What is the name of the drug?
Prompt: ### Drug Name: ###Drug Class: ###Route of Administration: ###Dose: ###Duration: ###Frequency:"
5093,"```

#### Generating Questions from a Table

We can also generate questions from a table. For example, we can use the following command to generate questions from the table in [this paper](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6081759/).

```bash
python3 -m src.generate_questions --table_file data/example_table.csv --output_file data/example_questions.jsonl
```

The output file will contain the following questions:

```json
{
    ""question"": ""What is the difference between the number of patients who died and the number of patients who were hospitalized?"",
    ""query"": {
        ""bool"": {
            ""must"": [
                {""match"": {""VAERS_ID"": ""2""}},
                {""range"": {""AGE_YRS"": {"""
5114,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
5139,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the actor who played James Bond in the film Dr. No?`\
`A: `

##### Dummy model response"
5144,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
5150,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the author of the book 'The Adventures of Tom Sawyer'?`\
`A: `

##### D"
5165,"```

#### Generating Questions from Text

We can also generate questions from text. For example, we can use the following command to generate questions from the abstract of a paper:

```bash
python -m clinical_trials.generate_questions --text ""The study was conducted in 2019 and 2020 at the University of California San Francisco. The study was funded by the National Institutes of Health (NIH).""
```

This will output the following questions:

```
Question: When was the study conducted?
Prompt: ### The study was conducted in 2019 and 2020 at the University of California San Francisco. The study was funded by the National Institutes of Health (NIH).###Generate the Elasticsearch query for the question
Clinical Notes: ###[ When was the study conducted?]
Answer:

Question"
5169,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
517,"```

### Example 2

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who is from MH and died.]"
5177,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
5197,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
520,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Give me all the patients who are female and have a history of diabetes. ]"
5202,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the average age of patients who died after vaccination?]
Answer:"
5219,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got vaccines in PHM. ]"
5227,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
523,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Give me all the patients who are female and have a history of diabetes. ]"
5231,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
5281,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who died after receiving a vaccine. ]
Answer"
5288,"```

##### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who was taking larin fe 1/20."
5323,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who had a fever. ]
Answer:
```"
533,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Give me all the patients who are female and have died. ]
Answer:
```"
5344,"```

### Example 2

```python
from elasticsearch import Elasticsearch
es = Elasticsearch()
from elasticsearch_dsl import Search
s = Search(using=es, index=""medical-records"")
s = s.query(""match"", symptom_text=""fever"")
s = s.query(""range"", recvdate={""gte"": ""2019-08-01"", ""lte"": ""2019-08-31""})
print(s.to_dict())
```

```json
{
    'query': {
        'bool': {
           'must': [
                {'match': {'symptom_text': 'fever'}},
                {'range': {'recvdate': {'gte': '2019-08-01', 'lte': '201"
5346,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who was taking one pill daily. ]
Answer:"
535,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Give me all the patients who are female and have a history of diabetes. ]"
5355,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who had a fever and a headache. ]"
536,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Give me all the patients who are female and have died. ]
Answer:
```"
5360,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who was taking fluoxetine and had a fever"
5371,"```

##### Prompt:
``\
`Q: Elasticsearch query:`\
`""query"": {`\
`    ""bool"": {`\
`      ""must"": [`\
`        {`\
`          ""match"": {`\
`            ""STATE"": ""MD""`\
`          }`\
`        },`\
`        {`\
`          ""range"": {`\
`            ""AGE_YRS"": {`\
`              ""gte"": 25,`\
`              ""lte"": 34`\
`            }`\
`          }`\
`        }]`\
`     }`\
`  }`\
`}`\
`Database table: Patient`\
`Database column: STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_"
538,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Give me all the patients who are female and have a history of diabetes. ]"
5381,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who was taking mvi daily. ]
Answer:"
542,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Give me all the patients who are female and have died. ]
Answer:
```"
5439,"```

#### Generating a new dataset from the existing one

The following command will generate a new dataset by adding a new column to the existing dataset. The new column is called `new_column` and it contains the value `10`.

```bash
python3 -m clinical_trial_elasticsearch_trainer.generate_dataset \
--input_file=clinical_trials_small.jsonl \
--output_file=clinical_trials_small_with_new_column.jsonl \
--additional_columns='{""new_column"": ""10""}'
```

### Running the model

To run the model, you need to have an Elasticsearch instance running on your machine. You can start an Elasticsearch instance using Docker as follows:

```bash
docker run --name elasticsearch -p 9200:9200"
5450,"```

#### Generating a new dataset from the existing one

The following command will generate a new dataset `new_dataset` from an existing dataset `old_dataset`. The new dataset will contain only those questions that are not present in the old dataset.

```bash
python -m clinical_trials.generate_dataset --input_dir=data/old_dataset --output_dir=data/new_dataset
```"
5464,"```

#### Generating a new dataset from scratch

To generate a new dataset from scratch, you can use the following command:

```bash
python3 -m clinical_trials.generate_dataset --output_dir=<OUTPUT_DIR> --num_examples=<NUM_EXAMPLES>
```

This will create a TFRecord file containing `<NUM_EXAMPLES>` examples in `<OUTPUT_DIR>`.

### Training

To train a model on this task, you first need to preprocess the data using the `clinical_trials/preprocess.py` script. This will take the raw data and turn it into input features for the model.

You can run the script like this:

```bash
python3 -m clinical_trials.preprocess \
    --input_file=<INPUT_FILE> \
    --output"
5467,"```

#### Generating Questions from a given passage

The `generate_questions` function generates questions from a given passage. The arguments are as follows:
- `passage`: The text from which questions need to be generated.
- `topk`: Number of questions to generate.
- `model_name`: Name of the model to use.
- `tokenizer_name`: Name of the tokenizer to use.
- `device`: Device to run the model on. For example, ""cuda"" or ""cpu"".
- `max_source_length`: Maximum length of the source sequence.
- `max_target_length`: Maximum length of the target sequence.
- `do_sample`: If set to False greedy decoding is used. Otherwise sampling is used. Defaults to True. It is not recommended to use greedy decoding for this task.
- `temperature`: Temperature"
5473,"```

#### Generating a new dataset from the existing one

The following command will generate a new dataset by adding a new column to the existing dataset. The new column is called `new_column` and it contains the value `10`.

```bash
python3 -m clinical_trials.generate_dataset --input_file=data/clinical_trial_sample.csv --output_file=data/clinical_trial_sample_with_new_column.csv --add_column=""new_column:10""
```

### Running the model locally

To run the model locally, you can use the following commands:

```bash
export PROJECT_DIR=$(pwd)
export DATA_DIR=${PROJECT_DIR}/data
export MODELS_DIR=${PROJECT_DIR}/models
export OUTPUT_DIR=${PROJECT_DIR}/"
5482,"```

#### Generating a new dataset from the existing one

The following command will generate a new dataset `new_dataset` from an existing dataset `old_dataset`. The new dataset will contain only those questions that are not present in the old dataset.

```bash
python3 -m clinical_trial_elasticsearch_trainer.generate_dataset --input_dir=old_dataset --output_dir=new_dataset
```"
5509,"```

#### Generating a new dataset from scratch

The `generate_dataset.py` script can be used to generate a new dataset from scratch. It takes as input a directory containing the raw data files and outputs a JSON file containing the generated questions and answers. The script also takes an optional `--seed` argument which can be used to make the randomization deterministic.

Example usage:
```bash
python generate_dataset.py --input_dir=data/raw --output_file=data/processed/generated_dataset.json --seed=12345
```"
5512,"```

#### Generating a new dataset version

To generate a new dataset version, run `python3 src/data/make_dataset.py` from the root directory."
552,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Give me all the patients who are female and have a fever. ]
Answer:"
5524,"```

#### Generating a new dataset version

To generate a new dataset version, run `python3 generate_dataset.py`. This will create a new folder in `data/`, and populate it with the generated data."
5534,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and outputs a new dataset in which each example has been augmented by adding a random number of random sentences extracted from the original dataset. The number of sentences that are added is sampled uniformly between 0 and 10.

Example usage:

```bash
python3 generate_dataset.py --input_path data/train.jsonl --output_path data/train_augmented.jsonl
```"
5538,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and outputs a new dataset with the same format but different questions (and answers).

Example usage:

```bash
python generate_dataset.py --input_path data/train-v2.1.jsonl --output_path data/train-v2.1-new.jsonl
```"
5543,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and outputs a new dataset in the same format. The following command generates a new dataset called `new_dataset.jsonl` with 1000 examples taken randomly from the original dataset:

```bash
python3 generate_dataset.py --input_path=data/original_dataset.jsonl --output_path=data/new_dataset.jsonl --num_examples=1000
```"
5599,"```

#### Generating a new dataset version

To generate a new dataset version, run `python3 generate_dataset.py`. This will create a new folder in `data/`, and populate it with the generated data."
5610,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and outputs a new dataset in the same format. The following command generates a new dataset called `new_dataset.jsonl` with 1000 examples taken randomly from the original dataset:

```bash
python3 generate_dataset.py --input_path=data/original_dataset.jsonl --output_path=data/new_dataset.jsonl --num_examples=1000
```"
5630,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
564,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Give me all the patients who are female and have died. ]
Answer:
```"
5654,"```

#### Generating a new dataset from the existing one

The following command will generate a new dataset `new_dataset.jsonl` from the existing one `dataset.jsonl`. The new dataset will contain only those examples that have at least one of the fields in the list `[""VAERS_ID"", ""SYMPTOM_TEXT""]`.

```bash
python -m clinical_trial_elasticsearch_trainer.generate_dataset \
    --input_file=dataset.jsonl \
    --output_file=new_dataset.jsonl \
    --fields=""['VAERS_ID', 'SYMPTOM_TEXT']""
```"
5667,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the actor who played James Bond?`\
`A: `

##### Dummy model response (after post-processing with"
5675,"```

#### Generating a new dataset from the raw data

The `generate_dataset.py` script can be used to generate a new dataset from the raw data. The script takes as input the path to the raw data and the output directory where the generated dataset will be stored. It also takes an optional argument `--num-examples` which specifies how many examples should be generated (default is 100).

Example usage:
```bash
python generate_dataset.py --raw-data-path=./raw_data/ --output-dir=./generated_dataset/ --num-examples=200
```"
569,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Give me all the patients who are female and have a history of diabetes. ]"
5718,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the author of the book 'The Adventures of Tom Sawyer'?`\
`A: `

##### D"
5757,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the number of patients who died after receiving the vaccine?]
Answer"
5764,"```

##### Prompt:
``\
`Q: The doctor prescribed the medication to the patient. What is the most likely diagnosis?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: The doctor prescribed the medication to the patient. What is the most likely diagnosis?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: The doctor prescribed the medication to the patient. What is the most likely diagn"
5767,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the number of patients who died?]
Answer:
```

####"
5771,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the number of patients who died after receiving the vaccine?]
Answer"
5790,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the number of patients who died after receiving the vaccine?]
Answer"
5793,"```

##### Generating a query from a question using the `generate_query` function

```python
from elasticsearch_dsl import Search
from elasticsearch_question_answering.utils import generate_query

search = Search(using=client, index=""clinical-trials"")
search = generate_query(search, ""Is there any patients who was taking miralax prn?"")
response = search.execute()
print(response)
```

Output:

```json
{
    ""_shards"": {
        ""failed"": 0,
        ""skipped"": 0,
        ""successful"": 5,
        ""total"": 5
    },
    ""hits"": {
        ""hits"": [
            {
                ""_id"": ""1"",
                ""_index"": ""clinical-trials"",
                ""_score"
5798,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the number of patients who died after receiving the vaccine?]
Answer"
58,"```

#### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients whose information are received on 01/28/2"
5806,"```

##### Prompt:
``\
`Q: The doctor is treating a patient for a headache. Which of the following questions would be appropriate to ask the patient?`\
`  choice: What is your name?`\
`  choice: How long have you been feeling this way?`\
`  choice: Do you have any children?`\
`  choice: When did you first start experiencing pain?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
[-inf, -0.5108256237659906, -0.9162907318741551]

##### Prompt:
``\
`Q: The doctor is treating a patient for a headache. Which of the following questions would"
5808,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the number of patients who died after receiving the vaccine?]
Answer"
5827,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the number of patients who died after receiving the vaccine?]
Answer"
5842,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the number of patients who died after receiving the vaccination?]
Answer"
5846,"```

##### Prompt:
``\
`Q: The following translations from German to English are correct except for one. Which is the incorrect translation?`\
`  choice: I am a student.`\
`  choice: I am a teacher.`\
`  choice: I am a doctor.`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
[-inf, -0.5108256237659906, -0.9162907318741551]

##### Prompt:
``\
`Q: The following translations from German to English are correct except for one. Which is the incorrect translation?`\
`  choice: I am a doctor.`\
`  choice: I am a student.`\
`"
5880,"```

### Example 2

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who have anemia. ]
Answer"
5885,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[What is the average age of patients who died?]
Answer:
```"
5908,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
5912,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who have right kidney cyst and died.]
Answer"
5944,"```

### Example 2

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who have health st. ]
Answer"
5959,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who have hypothyroid and died.]
Answer:"
5966,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who have lymphodema diabetes. ]"
5987,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ List all the patients who are diagnosed with car accident and died. ]
Answer:"
5989,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the author of the book 'The Adventures of Tom Sawyer'?`\
`A: `

##### D"
6005,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
6008,"```

### Example 2

#### Input

```python
from transformers import AutoTokenizer, AutoModelForQuestionAnswering
import torch

tokenizer = AutoTokenizer.from_pretrained(""mrm8488/t5-base-finetuned-squadv1"")
model = AutoModelForQuestionAnswering.from_pretrained(""mrm8488/t5-base-finetuned-squadv1"")

question = ""What is the capital of France?""
context = """"""France (French pronunciation: [fʁɑ̃s] ( listen)) is a country in Western Europe named after the French people. It is bordered by Belgium to the north, Luxembourg to the northeast, Germany to the east, Switzerland and Italy to the south, and Spain and Andorra to the southwest. At the center"
6013,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
6024,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ List all the patients who are diagnosed with pneumonia. ]
Answer:"
6031,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
6040,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the author of the book 'The Adventures of Tom Sawyer'?`\
`A: `

##### D"
6053,"```

#### Generating Questions from a given document

The following command generates questions from a given document.

```bash
python generate_questions.py --document_path <PATH_TO_DOCUMENT> --output_file <OUTPUT_FILE>
```

For example, to generate questions from the document `sample_document.txt`, run the following command:

```bash
python generate_questions.py --document_path sample_document.txt --output_file output.jsonl
```

This will create an output file `output.jsonl` containing the generated questions.

### Evaluation

To evaluate the model on the test set, run the following command:

```bash
python evaluate.py --model_name_or_path <MODEL_NAME_OR_PATH> --test_file <TEST_FILE> --output_dir <OUTPUT_DIR"
6060,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new file called `data/new_dataset.jsonl` which contains the generated questions and answers."
6065,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ List all the patients who are diagnosed with no10 and died. ]
Answer"
6067,"```

#### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ List all the patients who are diagnosed with vaccine dose. ]
Answer:"
6072,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
6076,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ List all the patients who are diagnosed with obgyn and died. ]
Answer"
6086,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
6092,"```

### Example 2

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ List all the patients who are diagnosed with history and died. ]"
6117,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and the output directory where the new dataset will be stored. The script generates a new dataset by randomly sampling 10% of the original dataset.

```bash
python3 generate_dataset.py --input_dir /path/to/original/dataset --output_dir /path/to/new/dataset
```"
6141,"```

#### Generating queries from a file

The script `generate_queries.py` can be used to generate queries from a file containing questions and answers. The format of the file is as follows:

```
Question: ### What is the average age of patients who died?
Answer:

Question: ### What is the average age of patients who did not die?
Answer:

...
```

To run the script, use the following command:

```bash
python3 generate_queries.py --input_file <path-to-questions-and-answers-file> --output_file <path-to-output-file>
```

For example, to generate queries from the file `questions_and_answers.txt`, use the following command:

```bash
python3 generate_queries.py --input_file questions_and_answers.txt --"
6203,"```

#### Generating a new dataset from the existing one

The following command will generate a new dataset by adding a new column to the existing one. The new column is called `new_column` and it contains the value `10`.

```bash
python3 -m clinical_trials.generate_dataset --input_file=data/clinical_trials.csv --output_file=data/clinical_trials_new.csv --add_column=""new_column:10""
```

### Running the code

To run the code, you need to install the dependencies first. You can do that using the following command:

```bash
pip install -r requirements.txt
```

Then, you can run the code as follows:

```bash
python3 -m clinical_trials.run_experiment --config_file=configs/"
6221,"```

#### Generating a new dataset from the existing one

The following command will generate a new dataset by adding a new column to the existing one. The new column is called `new_column` and it contains the value `10`.

```bash
python3 -m clinical_trial_elasticsearch_retrieval.scripts.generate_dataset \
    --input_file=data/clinical_trials_small.jsonl \
    --output_file=data/clinical_trials_small_with_new_column.jsonl \
    --additional_columns='{""new_column"": ""10""}'
```

### Running the code

To run the code, you need to have [Docker](https://www.docker.com/) installed on your machine.

First, build the Docker image:

```bash
docker build -"
6249,"```

#### Generating a new dataset from the existing one

The following command will generate a new dataset by adding a new column to the existing dataset. The new column is called `new_column` and it contains the value `10`.

```bash
python3 -m clinical_trial_elasticsearch_trainer.generate_dataset \
--input_file=clinical_trials/data/clinical_trials_small.jsonl \
--output_file=clinical_trials/data/clinical_trials_small_with_new_column.jsonl \
--additional_columns='{""new_column"": ""10""}'
```

### Running the model locally

To run the model locally, you can use the following command:

```bash
python3 -m clinical_trial_elasticsearch_trainer."
6274,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the author of the book 'The Adventures of Tom Sawyer'?`\
`A: `

##### D"
6278,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the author of the book 'The Adventures of Tom Sawyer'?`\
`A: `

##### D"
628,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
6294,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the organization that publishes the Guinness Book of World Records?`\
`A: `

##### Dummy model"
630,"```

### Example 2

```python
from elasticsearch import Elasticsearch
from elasticsearch.helpers import scan
es = Elasticsearch()

from elastic_retriever import Retriever
r = Retriever(es)

r.get_field_names(""vaers"")

r.generate_query(""How many patients are from PW?"", ""vaers"")
```

Output:

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_"
6321,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and the output directory where the new dataset will be stored. The script generates a new dataset by randomly sampling 10% of the original dataset.

```bash
python3 generate_dataset.py --input_dir /path/to/original/dataset --output_dir /path/to/new/dataset
```"
6326,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
6328,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the actor who played James Bond in the film Dr. No?`\
`A: `

##### Dummy model response"
6329,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the actor who played James Bond in the film Dr. No?`\
`A: `

##### Dummy model response"
6342,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and the output directory where the new dataset will be created. The script will create a copy of the original dataset in the output directory and then it will apply the following operations:
- Remove all the questions that have no answer in the original dataset;
- Remove all the answers that are not present in the original dataset;
- Remove all the fields that are not present in the original dataset;
- Remove all the documents that do not contain any of the remaining fields;
- Remove all the documents that do not contain any of the remaining answers;
- Remove all the documents that do not contain any of the remaining questions;
- Remove all the documents that do not contain any of the remaining fields in the context;
- Remove all the documents"
6348,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the author of the book 'The Adventures of Tom Sawyer'?`\
`A: `

##### D"
6398,"```

#### Generating a new dataset from scratch

To generate a new dataset from scratch, you can use the `generate_dataset.py` script. This script will take as input a directory containing the raw data files and output a JSON file containing the generated questions and answers.

The script takes the following arguments:
- `--input_dir`: The path to the directory containing the raw data files.
- `--output_file`: The path to the output JSON file.
- `--num_questions`: The number of questions to generate.
- `--seed`: The random seed to use.

For example, to generate a dataset with 1000 questions using the default settings, run the following command:
```bash
python generate_dataset.py --input_dir=data/raw --output_file=data/processed/generated_dataset.json --num_questions=1000 --seed=42"
6401,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and the output directory where the new dataset will be stored. The script generates a new dataset by randomly sampling 10% of the original dataset.

```bash
python3 generate_dataset.py --input_dir /path/to/original/dataset --output_dir /path/to/new/dataset
```"
6406,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
6408,"```

#### Generating a Question-Answering Dataset from PubMed Abstracts

We can also generate a QA dataset from PubMed abstracts. The following command will download and process all abstracts in PubMed related to COVID-19 and create a JSON file containing questions and answers.

```bash
python -m clinical_trials.generate_qa_dataset --output_file=covid_qa.json --num_abstracts=5000 --search_terms=""COVID-19""
```

The resulting JSON file will contain a list of dictionaries, each representing a single question-answer pair. Each dictionary has two keys: `question` and `answer`. The value of the `question` key is a string containing the question text, and the value of the `answer` key is a list of strings containing the answer text.

For example, here's an excerpt"
6412,"```

#### Generating Questions from a Table

We can also generate questions from a table. For example, we can use the following command to generate questions from the table in `data/table.csv`:

```bash
python3 -m src.generate_questions --table data/table.csv
```

This will output the following questions:

```text
Question: ### How many people were admitted to the hospital after taking the vaccine?
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRI"
6414,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and the output directory where the new dataset will be created. The script will create a copy of the original dataset in the output directory and then it will apply the following operations:
- Remove all the questions that are not supported by the current version of the pipeline (see [Supported Questions](#supported-questions))
- Remove all the questions that contain a field name that does not exist in the index mapping
- Remove all the questions that contain a field name that is not indexed in the index mapping
- Remove all the questions that contain a field name that is not analyzed in the index mapping
- Remove all the questions that contain a field name that is not stored in the index mapping
- Remove all the questions that contain a field name that"
6452,"```

#### Generating a new dataset from the existing one

The following command will generate a new dataset by adding a new column to the existing one. The new column will be named `new_column` and it will contain the values `1` or `0` depending on whether the value in the `age_yrs` column is greater than `50`.

```bash
python3 -m clinical_trial_elasticsearch_trainer.generate_dataset \
    --input_file=clinical_trials_small.csv \
    --output_file=clinical_trials_small_with_new_column.csv \
    --add_column='new_column:age_yrs>50'
```

### Running the model

To run the model, you can use the following command:

```bash
python3 -m clinical_tri"
6455,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from an existing one. It takes as input a JSON file containing the questions and answers in the format described above, and outputs a new JSON file with the same format but with different questions and answers. The script uses the following arguments:

* `--input_file`: path to the input JSON file
* `--output_file`: path to the output JSON file
* `--num_questions`: number of questions to generate (default: 10)
* `--seed`: random seed (default: 42)

For example, to generate a new dataset with 50 questions from the original one, run the following command:

```bash
python generate_dataset.py --input_file data/original_dataset.json --output_file data/new_dataset.json --num_"
6495,"```

### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the most common symptom?]
Answer:
```

###"
6505,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
6556,"```

### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the most common cause of death?]
Answer:
```

##"
6568,"```

##### Example 2

```
Question: ### What is the most common muscle wasting and atrophy for patients?
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes:"
6573,"```

### Example 2

```python
from elasticsearch import Elasticsearch
from elastic_retriever.elastic_retriever import ElasticRetriever

es = Elasticsearch(hosts=[""localhost""], port=9200)
er = ElasticRetriever(es, ""clinical_notes"", ""clinical_note"")

print(""### Elasticsearch database with field names:"")
print(er.get_field_names())

prompt = ""### Generate the Elasticsearch query for the question""
question = ""Which is the most common vestibular for patients.""
answer = er.generate_query(prompt, question)

print(f""{prompt}\n{answer}"")
```

Output:

```bash
### Elasticsearch database with field names:
['RECVDATE', '"
6586,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the average age of patients who died?]
Answer:
```"
6595,"```

### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the most common symptom?]
Answer:
```

###"
660,"```

### Example 2

```python
from elasticsearch import Elasticsearch
from elasticsearch.helpers import bulk
import json
es = Elasticsearch()
with open('data/clinical_notes.json') as f:
    clinical_notes = json.load(f)
with open('data/field_names.json') as f:
    field_names = json.load(f)
with open('data/patient_info.json') as f:
    patient_info = json.load(f)
with open('data/vax_info.json') as f:
    vax_info = json.load(f)
with open('data/vaers_id.json') as f:
    vaers_id = json.load(f)

from elasticsearch_dsl import Search
s = Search(using=es, index"
6601,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the most common autoimmune hepatitis for patients.]
Answer:"
663,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
6647,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[What is the average age of patients who died?]
Answer:
```"
6658,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
6680,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
6691,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who had a fever. ]
Answer:
```"
6735,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Search all the patients who are diagnosed with mastectomy and died. ]"
6741,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Search all the patients who are diagnosed with ankylosing spondylitis and"
6742,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Search all the patients who are diagnosed with intraocular lens implant and"
6754,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Search all the patients who are diagnosed with trigger finger and died. ]
Answer:"
6773,"```

### Example 2

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Search all the patients who are diagnosed with chronic uti and"
6798,"```

#### Generating Questions from a given passage

The following command generates questions from a given passage. The input is a text file containing the passage and the output is a json file containing the generated questions.

```bash
python generate_questions.py --passage_file <path to passage file> --output_file <path to output file>
```

Example:

```bash
python generate_questions.py --passage_file data/passages/100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
6804,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Search all the patients who are diagnosed of liver disorder and died. ]"
6811,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Search all the patients who are diagnosed of nerve operation. ]
Answer:"
6812,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Search all the patients who are diagnosed with breast cancer and died. ]
Answer:"
6821,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Search all the patients who are diagnosed with acne and have a history of asth"
6822,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
6840,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Search all the patients who are diagnosed of arterial stent insertion. ]"
6842,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Search all the patients who are diagnosed of infected toe and died. ]
Answer"
6856,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Search all the patients who are diagnosed with squamous cell carcinoma and died"
6860,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Search all the patients who are diagnosed with a rare disease. ]
Answer:"
6921,"```

#### Generating a new dataset from the existing one

The following command will generate a new dataset by adding a new column to the existing one. The new column is called `new_column` and it contains the value `10`.

```bash
python3 -m clinical_trial_elasticsearch_retrieval.scripts.generate_dataset \
    --input_file=clinical_trials_small.jsonl \
    --output_file=clinical_trials_small_with_new_column.jsonl \
    --additional_columns='{""new_column"": ""10""}'
```

### Running the retriever

To run the retriever, you need to first install the requirements:

```bash
pip install -r requirements.txt
```

Then, you can run the retriever using the following command:"
6922,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and the number of examples to generate in the new dataset. The script will output a json file containing the new dataset.

Example usage:

```bash
python3 generate_dataset.py --input_path data/original_dataset.jsonl --output_path data/new_dataset.jsonl --num_examples 1000
```"
6990,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
7010,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
7018,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
702,"```

##### Example 2

```
Question: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Give me the IN which has the most numbers of records]
Answer:
```"
7026,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
7029,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
7037,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
7046,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
7049,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
7058,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
7064,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
7068,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
709,"```

### Example 2

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Give me the VA which has the most numbers of records]"
7095,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
711,"```

##### Example 2

```
Question: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Give me the RI which has the most numbers of records]
Answer:
```"
7113,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the most common symptom of patients who died?]
Answer:
```"
7123,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the average age of patients who died?]
Answer:
```"
7128,"```

##### Prompt:
``\
`Q: What is the name of the element with an atomic number of 103?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
Model queries 1 to 266, batch element 47\.  The idea was put forward by the German mathematician David Hilbert in 1928\. In his paper "" On the Infinite \.\.\."" \(German: Uber die Unendliche\.\.\.\) he said that while mathematics is not yet able to fully resolve the questions of continuum and infinity, it can still provide a glimpse of ""a vision of perfection"" through the concept of completeness, which has been described as ""the first step towards proving the actual existence of God""\.\[58\] In 1930, Kurt"
7135,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the average age of patients who died?]
Answer:
```"
714,"```

### Example 2

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Give me the TX which has the most numbers of records]"
716,"```

##### Example 2

```
Question: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Give me the SD which has the most numbers of records]
Answer:
```"
7172,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the most common cause of death in children?]
Answer:
```"
7184,"```

##### Example 2

```
Question: ### What is the most common fibrocystic breast for patients?
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Which"
7197,"```

##### Example 2

```
Question: ### What is the most common cause of death in patients with breast cancer?
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###["
7203,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
7214,"```

### Example 2

Here is an example of a question that requires a join between two tables.

```
Question: ### What is the average age of patients who died?
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the El"
7217,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
7237,"```

### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the most common cause of death in children?]
Answer:
```"
7248,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who had a fever]
Answer:
```"
7251,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who had a reaction to the vaccine]
Answer"
7256,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who had a reaction to aminoquionolones ]"
726,"```

### Example 2

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Give me the AS which has the most numbers of records]
Answer"
7266,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who had a fever and died]
Answer:"
7269,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who had a reaction to atorvastatin]"
7279,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who had a fever and died]
Answer:"
7313,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who had a fever]
Answer:
```"
7321,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who had a history of prior vaccinations]"
7332,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who had a reaction to pvc]
Answer:"
7377,"```

#### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Show me all the patients who has an allergic to pilocarpine. ]"
738,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who is 80.0 years old and has a"
7382,"```

#### Generating a new dataset

To generate a new dataset, run the following command:

```bash
python3 -m clinical_trials.generate_dataset --output_dir=<OUTPUT_DIR> --num_examples=<NUM_EXAMPLES>
```

The output directory will contain two files: `train.jsonl` and `test.jsonl`. Each line in these files is a JSON object containing the following fields:

-   `question`: The question text.
-   `answer`: The answer text.
-   `context`: The context text."
7393,"```

#### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Show me all the patients who has an allergic to natural rubber. ]
Answer"
7404,"```

#### Generating a new dataset

To generate a new dataset, run the following command:

```bash
python3 -m clinical_trials.generate_dataset --output_dir=<OUTPUT_DIR> --num_examples=<NUM_EXAMPLES>
```

The output directory will contain two files: `train.jsonl` and `test.jsonl`. Each line in these files is a JSON object containing the following fields:

-   `question`: The question text.
-   `answer`: The answer text.
-   `context`: The context text."
7425,"```

#### Generating a query from a question using the API

The following code snippet shows how to generate a query from a question using the API.

```python
from elasticsearch import Elasticsearch
from elasticsearch_dsl import Search
import json
from elastic_retriever import ElasticRetriever

es = Elasticsearch(hosts=[""localhost""], port=9200)
index_name = ""medical""
question = ""Show me all the patients who has an allergic to red apples.""
er = ElasticRetriever(es, index_name)
query = er.generate_query(question)
print(json.dumps(query))
```

Output:

```json
{
    ""bool"": {
        ""should"": [
            {""match"": {""allergies"": ""red apples""}},
            {""match"":"
7441,"```

#### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Show me all the patients who has an allergic to meropenem. ]
Answer"
7456,"```

#### Generating a new dataset

To generate a new dataset, run the following command:

```bash
python3 -m clinical_trials.generate_dataset --output_dir=<OUTPUT_DIR> --num_examples=<NUM_EXAMPLES>
```

The output directory will contain two files: `train.jsonl` and `test.jsonl`. Each line in these files is a JSON object containing the following fields:

-   `question`: The question text.
-   `answer`: The answer text.
-   `context`: The context text."
7471,"```

#### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Show me all the patients who has an allergic to peanut. ]
Answer"
7474,"```

#### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Show me all the patients who has an allergic to neosporin opthal"
7480,"```

#### Generating a new dataset from the existing one

The following command will generate a new dataset by adding 10% of noise to the original dataset. The noise is generated by randomly replacing words in the clinical notes with words from the vocabulary.

```bash
python3 -m clinical_trials.generate_dataset --input_file=data/clinical_trials.jsonl --output_file=data/clinical_trials_noisy.jsonl --percentage=10
```

### Training and Evaluation

To train the model, run the following command:

```bash
python3 -m clinical_trials.train --model_dir=models/ --vocab_path=data/vocab.txt --train_file=data/clinical_trials.jsonl --eval_file=data/"
7487,"```

#### Generating a new dataset from the original one

The `generate_dataset` script can be used to generate a new dataset from an existing one. It takes as input a JSON file containing the following fields:
- `input_file`: path to the original dataset
- `output_file`: path to the output dataset
- `num_examples`: number of examples in the output dataset
- `seed`: random seed
- `template_path`: path to the template file (optional)
- `db_host`: hostname of the database server (optional)
- `db_port`: port of the database server (optional)
- `db_user`: username of the database server (optional)
- `db_pwd`: password of the database server (optional)
- `db_timeout`: timeout for connecting to the database server (optional)

For example, the following command generates a new dataset called `"
749,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who is 88.0 years old and has a"
7499,"```

#### Generating a new dataset from the original one

The following command will generate a new dataset `new_dataset` from the original one `original_dataset`. The new dataset will contain only those questions that are answered correctly by the model.

```bash
python3 -m clinical_trial_elasticsearch_retrieval.generate_dataset \
    --input_path=original_dataset/ \
    --output_path=new_dataset/ \
    --model_name_or_path=bert-base-uncased \
    --max_seq_length=512 \
    --doc_stride=128 \
    --max_query_length=64 \
    --n_best_size=20 \
    --max_answer_length=30 \
    --do_lower_case \
    --use_multiprocessing"
75,"```

##### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients whose information are received on 05/20/"
7503,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
7507,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and the number of examples to generate in the new dataset. The script will output a json file containing the new dataset.

Example usage:

```bash
python3 generate_dataset.py --input_path data/original_dataset.jsonl --output_path data/new_dataset.jsonl --num_examples 1000
```"
7523,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
7529,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
7533,"```

#### Generating a new dataset from the original one

The following command will generate a new dataset `new_dataset` from the original one `original_dataset`. The new dataset will contain only those questions that are answered correctly by the model.

```bash
python3 -m clinical_trial_elasticsearch_retrieval.scripts.generate_dataset \
    --input_path=original_dataset/ \
    --output_path=new_dataset/ \
    --model_name_or_path=bert-base-uncased \
    --max_seq_length=512 \
    --doc_stride=128 \
    --max_query_length=64 \
    --n_best_size=20 \
    --max_answer_length=30 \
    --do_lower_case \
    --use_fp1"
7542,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and the number of examples to generate in the new dataset. The script will output a json file containing the new dataset.

Example usage:

```bash
python3 generate_dataset.py --input_path data/original_data.jsonl --output_path data/new_data.jsonl --num_examples 1000
```"
7543,"```

#### Generating a new dataset from the original one

The `generate_dataset` script can be used to generate a new dataset from an existing one. It takes as input a JSON file containing the following fields:
- `input_file`: path to the original dataset
- `output_file`: path to the output dataset
- `num_questions`: number of questions to generate
- `question_types`: list of question types to generate (e.g., `[""count"", ""compare_num""]`)
- `seed`: random seed

For example, to generate a new dataset called `new_dataset.jsonl` with 100 questions of type `count`, run the following command:
```bash
python generate_dataset.py --input_file=data/train_dataset.jsonl --output_file=data/new_dataset.jsonl --num_questions=100 --question_"
7549,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
755,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who is 90.0 years old and has a"
7556,"```

#### Generating a new dataset from the existing one

The following command will generate a new dataset by adding 10% of noise to the original dataset. The noise is generated by randomly replacing words in the clinical notes with words from the vocabulary.

```bash
python3 -m clinical_trials.generate_dataset --input_file=data/clinical_trials.jsonl --output_file=data/clinical_trials_noisy.jsonl --percentage=10
```

### Training and Evaluation

To train the model, run the following command:

```bash
python3 -m clinical_trials.train --model_dir=models/ --vocab_path=data/vocab.txt --train_file=data/clinical_trials.jsonl --eval_file=data/"
7564,"```

#### Generating a new dataset from the existing one

The following command will generate a new dataset by adding a new column `new_column` to the existing dataset. The value of this column is generated by applying the function `lambda x: x['age'] + 10` to each row in the original dataset.

```bash
python -m datasets.generate_dataset --input_path=datasets/vax_trial/train.jsonl --output_path=datasets/vax_trial/train_new.jsonl --add_column='{""name"": ""new_column"", ""type"": ""number"", ""expression"": ""lambda x: x['age'] + 10""}'
```

### Running the code

To run the code, you need to install the dependencies and then start a local server as follows.

```bash
pip install -r requirements.txt"
7572,"```

#### Generating a new dataset from the existing one

The following command will generate a new dataset by adding a new column `new_column` to the existing dataset. The value of this column is generated by applying the function `lambda x: x['age'] + 10` to each row in the original dataset.

```bash
python -m datasets.generate_dataset --input_path=datasets/vax_hospital/train.jsonl --output_path=datasets/vax_hospital/train_new.jsonl --add_column='{""name"": ""new_column"", ""type"": ""number"", ""expression"": ""lambda x: x['age'] + 10""}'
```

### Running the code

To run the code, you need to install the dependencies first.

```bash
pip install -r requirements.txt
```

Then, you"
7599,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
760,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who is 91.0 years old and has a"
7607,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
7621,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-"
7633,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from an existing one. It takes as input a JSON file containing the questions and answers of the original dataset and outputs a new JSON file containing the same questions but different answers. The new answers are generated by randomly sampling from the original ones.

To run this script, you need to install the [SpaCy](https://spacy.io/) library. You also need to download the English language model:

```bash
python -m spacy download en
```

Then, you can run the script as follows:

```bash
python generate_dataset.py --input-file <path to the original dataset> --output-file <path where the new dataset will be saved>
```"
7640,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from an existing one. It takes as input a JSON file containing the questions and answers of the original dataset and outputs a JSON file containing the same questions but with different answers. The new answers are generated by randomly sampling from the original ones.

To run it, use the following command:

```bash
python3 generate_dataset.py --input_file <path/to/original/json> --output_file <path/to/new/json>
```"
7666,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from an existing one. It takes as input a JSON file containing the questions and answers of the original dataset and outputs a JSON file containing the same questions but with different answers. The new answers are generated by randomly sampling from the original ones.

To run it, use the following command:

```bash
python3 generate_dataset.py --input_file <path/to/original/json> --output_file <path/to/new/json>
```"
7684,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from an existing one. It takes as input a JSON file containing the questions and answers of the original dataset and outputs a new JSON file containing the same questions but different answers. The new answers are generated by randomly sampling from the original ones.

To run it, use the following command:

```bash
python3 generate_dataset.py --input-file <path/to/original/json> --output-file <path/to/new/json>
```"
7699,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from an existing one. It takes as input a JSON file containing the questions and answers of the original dataset and outputs a JSON file containing the same questions but with different answers. The new answers are generated by randomly sampling from the original ones.

Example usage:

```bash
python generate_dataset.py --input_file data/train-v2.0.json --output_file data/train-v3.0.json --num_samples 1000
```"
771,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who is 39.0 years old and has a"
7718,"```

##### Prompt:
``\
`Q: What is the name of the woman on the right?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
Model queries 1 to 20, batch element 3\. en\.\
\
Q: What is the name of the woman on the left?\
A:&numsp;

##### Prompt:
``\
`Q: What is the name of the woman on the left?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
Model queries 1 to 20, batch element 4\. en\.\
\
Q: What is the name of the woman in the middle?\
A:&numsp;

##### Prompt:
``\"
7726,"```

### Example 2

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the number of vaccine recipients that had an all"
773,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who is 89.0 years old and has a"
7767,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the actor who played James Bond in the film Dr. No?`\
`A: `

##### Dummy model response"
7768,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the actor who played James Bond in the film Dr. No?`\
`A: `

##### Dummy model response"
7771,"```

##### Prompt:
``\
`Q: What is the name of the person who was the most recent spouse of George W. Bush?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the name of the person who was the most recent spouse of George W. Bush?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the person who was the most recent spouse of"
7773,"```

### Example 2

#### Input

```python
from elasticsearch import Elasticsearch
es = Elasticsearch()
from elasticsearch.client import IndicesClient
indices = IndicesClient(es)
indices.create(index='covid-19', ignore=400)
import json
with open('data/COVID-19_vaccine_side_effects.json') as f:
    data = json.load(f)
for item in data:
    es.index(index=""covid-19"", body=item)

from elasticsearch_dsl import Search
from elasticsearch_dsl.query import Match
search = Search(using=es, index=""covid-19"")
search = search.query(""match"", content=""allergies"")
response = search.execute()
print(response.to_dict"
7780,"```

### Example 2

#### Input

```python
from elasticsearch import Elasticsearch
es = Elasticsearch()
import json
with open('./data/clinical_notes.json') as f:
    data = json.load(f)

from elastic_retriever import ElasticRetriever
er = ElasticRetriever(es, index='covid-19', doc_type='_doc')

question = 'What is the number of vaccine recipients that had an allergic to glutaronitrile?'
answer = er.get_answer(question, data['questions'][0]['query'], data['questions'][0]['fields'])
print(answer)
```

#### Output

```bash
{'answer': '3', 'context': 'The number of vaccine recipients that had an allergic to"
7782,"```

### Example 2

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the number of vaccine recipients that had an all"
7791,"```

##### Prompt:
``\
`Q: What is the name of the person who was the most recent spouse of George W. Bush?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the name of the person who was the most recent spouse of George W. Bush?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the person who was the most recent spouse of"
7796,"```

##### Prompt:
``\
`Q: What is the name of the person who was the most recent spouse of George W. Bush?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the name of the person who was the most recent spouse of George W. Bush?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the person who was the most recent spouse of"
7815,"```

### Example 2

#### Input

```python
from elasticsearch_dsl import Search
from elasticsearch_dsl.query import Q
import json

s = Search(using=es, index='vax_hospital') \
   .query(""match"", _id=""1"") \
   .source([""VAERS_ID"", ""SYMPTOM_TEXT""])
    
r = s.execute()
print(json.dumps(r.to_dict(), indent=2))
```

#### Output

```bash
{
  ""_shards"": {
    ""failed"": 0,
    ""successful"": 5,
    ""total"": 5
  },
  ""hits"": {
    ""hits"": [
      {
        ""_id"": ""1"",
        ""_index"": ""vax_hospital"","
7833,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the actor who played James Bond in the film Dr. No?`\
`A: `

##### Dummy model response"
7835,"```

##### Prompt:
``\
`Q: What is the name of the woman on the right?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
Model queries 1 to 20, batch element 3\. en\.\
\
\
Passage:\
Theatre of the absurd\
\
Q: What is the full form of NATO?\
A: North Atlantic Treaty Organisation\
\
Q: Which country has the longest coastline in the world?\
A: Russia\
\
Q: Who was the first Indian woman to receive a Nobel Prize?\
A: Mother Teresa\
\
Q: In which year did India get independence from British rule?\
A: 1947\
\
Q: Which is the largest freshwater lake in the world?"
7846,"```

### Example 2

#### Input

```python
from elasticsearch_dsl import Search
from elasticsearch_dsl.query import Q
import json

s = Search(using=es, index='vax_hospital') \
   .query(""match"", _id=""1"") \
   .source([""VAERS_ID"", ""SYMPTOM_TEXT""])
    
r = s.execute()
print(json.dumps(r.to_dict(), indent=2))
```

#### Output

```bash
{
  ""_shards"": {
    ""failed"": 0,
    ""successful"": 5,
    ""total"": 5
  },
  ""hits"": {
    ""hits"": [
      {
        ""_id"": ""1"",
        ""_index"": ""vax_hospital"","
7879,"```

### Example 3

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who priviously got vaccinated"
7902,"```

### Example 4

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who priviously got vaccinated"
7918,"```

### Example 3

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who priviously got vaccinated"
7921,"```

### Example 3

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who priviously got vaccinated"
7922,"```

### Example 3

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who priviously got vaccinated"
7930,"```

### Example 3

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who priviously got vaccinated"
7937,"```

### Example 3

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who priviously got vaccinated"
7950,"```

### Example 3

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who priviously got vaccinated"
7961,"```

### Example 3

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who priviously got vaccinated"
7967,"```

### Example 3

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who priviously got vaccinated"
7984,"```

#### Generating Questions from a given dataset

We can generate questions from a given dataset using the following command:

```bash
python3 -m clinical_trial_elasticsearch_trainer.generate_questions --dataset_path=<PATH_TO_DATASET> --output_file=<OUTPUT_FILE>
```

The output file will contain the generated questions in the format:

```
Question: ###[ List all the records who was vaccinated on 1/26/22. ]
Answer:
```

### Training the model

To train the model, we need to first create a `config.json` file which contains the details of the training and evaluation datasets. The config file should be in the following format:

```json
{
    ""train"": {
        ""data_path"": ""<PATH_TO_TRAIN"
7996,"```

#### Generating Questions from a given dataset

We can generate questions from a given dataset using the following command:

```bash
python3 -m clinical_trial_elasticsearch_trainer.generate_questions --dataset_path=<PATH_TO_DATASET> --output_file=<OUTPUT_FILE>
```

The output file will contain the generated questions in the format:

```
Question: ###[ List all the records who was vaccinated on 7/14/21. ]
Answer:
```

### Training the model

To train the model, we need to first create a `config.json` file which contains the details of the training and evaluation datasets. The config file should be in the following format:

```json
{
    ""train"": {
        ""data_path"": ""<PATH_TO_TRAIN"
8014,"```

#### Generating Questions from a given dataset

We can generate questions from a given dataset using the following command:

```bash
python3 -m clinical_trial_elasticsearch_trainer.generate_questions --dataset_path=<PATH_TO_DATASET> --output_file=<OUTPUT_FILE>
```

The output file will contain the generated questions in the format:

```
Question: ###[ List all the records who was vaccinated on 10/4/21. ]
Answer:
```

### Training the model

To train the model, we need to first create a `config.json` file which contains the details of the training and evaluation datasets. The config file should be in the following format:

```json
{
    ""train"": {
        ""data_path"": ""<PATH_TO_TRAIN"
8032,"```

#### Generating Questions from a given dataset

We can generate questions from a given dataset using the following command:

```bash
python3 -m clinical_trial_elasticsearch_trainer.generate_questions --dataset_path=<PATH_TO_DATASET> --output_file=<OUTPUT_FILE>
```

The output file will contain the generated questions in the format:

```
Question: ###[ List all the records who was vaccinated on 4/14/21. ]
Answer:
```

### Training the model

To train the model, we need to first create a `config.json` file which contains the details of the training and evaluation datasets. The config file should be in the following format:

```json
{
    ""train"": {
        ""data_path"": ""<PATH_TO_TRAIN"
8048,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 1.`

##### Prompt:
``\
`Q: What is the square root of 8961?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the name of the actor who played the character of Jamie in the television series Dr. Quinn, Medicine Woman?`\
`A:"
8051,"```

#### Generating Questions from a given dataset

We can generate questions from a given dataset using the following command:

```bash
python3 -m clinical_trial_elasticsearch_trainer.generate_questions --dataset_file=<path to dataset file> --output_file=<path to output file>
```

The dataset file should be in the same format as the one used for training. The output file will contain the generated questions.

### Running the server

To run the server locally, use the following command:

```bash
python3 -m clinical_trial_elasticsearch_trainer.server --port=8080
```

This will start the server at port 8080. You can then send requests to this server using curl or any other tool.

For example, if you want to get the answer for the question ""List"
8057,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 1.`

##### Prompt:
``\
`Q: What is the square root of 9?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 25?`\
`A: `

##### Dummy model response (after post-processing with regex or stop"
8066,"```

#### Generating Questions from a given dataset

We can generate questions from a given dataset using the following command:

```bash
python -m clinical_qa.generate_questions --dataset_path <path to dataset> --output_file <path to output file>
```

The generated questions will be stored in the output file.

### Evaluation

To evaluate the model, we use the [Evaluator](https://github.com/allenai/biomed_roberta/blob/main/clinical_qa/evaluator.py) class. The evaluator takes as input the path to the test set and the path to the predictions file. It then computes the exact match score and the F1 score.

```python
from clinical_qa import Evaluator

evaluator = Evaluator(test_set_path=<path to test set>,"
8077,"```

#### Generating Questions from a given dataset

We can generate questions from a given dataset using the following command:

```bash
python -m clinical_qa.generate_questions --dataset_path <path to dataset> --output_file <path to output file>
```

The generated questions will be stored in the output file.

### Evaluation

To evaluate the model, we use the [Evaluator](https://github.com/clulab/eidos/blob/master/src/main/scala/org/clulab/wm/eidos/EidosSystem.scala) class of Eidos. The evaluation script is present in `scripts/evaluate.py`. To run the evaluation script, use the following command:

```bash
python scripts/evaluate.py --input_file <path to input file> --gold_file <path to"
8091,"```

#### Generating Questions from a given ElasticSearch Query

The following command generates questions from a given elasticsearch query. The output is stored in `output.json` file.

```bash
python generate_questions.py --es_query ""{\""size\"": 500, \""query\"": {\""bool\"": {\""must\"": [{\""match\"": {\""VAERS_ID\"": \""14689\""}}]}}}"" --output output.json
```

The output will be as follows:

```json
{
    ""question"": ""List all the records who had symptoms of fever."",
    ""answer"": {
        ""answer_type"": ""list"",
        ""answer_text"": [
            {
                ""record_id"": ""14689"",
                ""fields"": {
                    ""SYMPTOM_TEXT"": ""F"
8099,"```

#### Generating Questions from ElasticSearch Queries

We can also generate questions from ElasticSearch queries. For example, we can use the following command to generate questions from the query `{""query"": {""match"": {""VAERS_ID"": ""138679""}}}` in the index `vaers-vax`:

```bash
python -m src.main --generate_questions --index vaers-vax --question_type elasticsearch --elasticsearch_query '{""query"": {""match"": {""VAERS_ID"": ""138679""}}}'
```

This will output the following question:

```
Question: ### What is the age of the patient with VAERS ID 138679? ###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Find the age of the patient with VAERS ID 1"
8104,"```

#### Generating Questions from ElasticSearch Queries

We can also generate questions from ElasticSearch queries. For example, we can use the following command to generate questions from the query `{""query"": {""match"": {""VAERS_ID"": ""165784""}}}` in the index `vaers-vax`:

```bash
python -m src.main --generate_questions --index vaers-vax --question_type elasticsearch --elasticsearch_query '{""query"": {""match"": {""VAERS_ID"": ""165784""}}}'
```

This will output the following question:

```
Question: ### What is the age of the patient with VAERS ID 165784? ###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Find the age of the patient with VAERS ID 1"
812,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who is 34.0 years old and has a"
8143,"```

#### Generating Questions from ElasticSearch Queries

We can also generate questions from ElasticSearch queries. For example, we can use the following command to generate questions from the query `{""query"": {""match"": {""VAERS_ID"": ""165784""}}}` in the index `vaers-vax`:

```bash
python -m src.main --generate_questions --index vaers-vax --question_type elasticsearch --elasticsearch_query '{""query"": {""match"": {""VAERS_ID"": ""165784""}}}'
```

The output will be as follows:

```text
Question: ### What is the age of the patient?
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT"
8153,"```

#### Generating Questions from ElasticSearch Queries

We can also generate questions from ElasticSearch queries. For example, we can use the following command to generate questions from the query `{""query"": {""match"": {""VAERS_ID"": ""138675""}}}` in the index `vaers-vax`:

```bash
python -m src.main --generate_questions --index vaers-vax --question_count 10 --query '{""query"": {""match"": {""VAERS_ID"": ""138675""}}}'
```

This will output the following questions:

```text
Question: ### What is the age of the patient?
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DI"
8154,"```

#### Generating Questions from ElasticSearch Queries

We can also generate questions from ElasticSearch queries. For example, we can use the following command to generate questions from the query `{""query"": {""match"": {""VAERS_ID"": ""165784""}}}` in the index `vaers-vax`:

```bash
python -m src.main --generate_questions --index vaers-vax --question_type elasticsearch --elasticsearch_query '{""query"": {""match"": {""VAERS_ID"": ""165784""}}}'
```

This will output the following question:

```
Question: ### What is the age of the patient with VAERS ID 165784? ###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the age of the patient with VAERS ID"
8226,"```

#### Generating Questions from Text

We can also generate questions from text. For example, we can use the following command to generate questions from the text in the file `sample_text.txt`:

```bash
python -m clinical_trial_elasticsearch_trainer.generate_questions --input_file sample_text.txt --output_file questions.jsonl
```

The output will be written to the file `questions.jsonl`.

### Running the Web App

To run the web app locally, you can use the following command:

```bash
streamlit run clinical_trial_elasticsearch_webapp/app.py
```

You should see something like this:

![Web App Screenshot](https://github.com/google-research/clinical-trial-elasticsearch-trainer/blob/main/images/"
8228,"```

#### Generating Questions from Text

We can also generate questions from text. For example, we can use the following command to generate questions from the text in the file `sample_text.txt`:

```bash
python3 -m clinical_trial_elasticsearch_trainer.generate_questions --input_file sample_text.txt --output_file questions.jsonl
```

The output will be written to the file `questions.jsonl`.

### Running the Web App

To run the web app locally, you can use the following command:

```bash
python3 -m clinical_trial_elasticsearch_trainer.webapp
```

Then navigate to http://localhost:8080/ in your browser."
8242,"```

#### Generating Questions from Text

We can also generate questions from text. For example, we can use the following command to generate questions from the text in the file `sample_text.txt`:

```bash
python3 -m clinical_trial_elasticsearch_trainer.generate_questions --input_file sample_text.txt --output_file questions.jsonl
```

The output will be written to the file `questions.jsonl`.

### Running the Web App

To run the web app locally, you can use the following command:

```bash
python3 -m clinical_trial_elasticsearch_trainer.webapp
```

Then navigate to http://localhost:8080/ in your browser."
8261,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 4.`

##### Prompt:
``\
`Q: What is the square root of 9?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 5.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-processing"
8262,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 4.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 5.`

##### Prompt:
``\
`Q: What is the name of the actor who played James Bond in the film Dr. No?`\
`A: `

##### Dummy model response"
8273,"```

##### Example 4

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the average age of patients who died?]
Answer:
```"
8287,"```

#### Generating Questions from Text

We can also generate questions from text. For example, we can use the following command to generate questions from the abstract of a paper:

```bash
python -m clinical_trial_qa.generate_questions --text ""The study was conducted in 450 patients who were treated with either placebo or an experimental drug.""
```

This will output the following questions:

```
Question: ### What is the number of patients who were treated with either placebo or an experimental drug?
Prompt: ### The study was conducted in 450 patients who were treated with either placebo or an experimental drug.
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSP"
830,"```

##### Example 4
```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who is 23.0 years old and has a history"
8353,"```

### Example 2

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who had ROTAVIRUS v"
8354,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who had POLIO VIRUS, INACT."
8367,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
8371,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
8405,"```

##### Prompt:
``\
`Q: What is the name of the person in this photo?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the name of the person in this photo?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the person in this photo?`\
`A: `

##### Dummy model response (after post-processing with"
8406,"```

#### Generating Questions from a given ElasticSearch Query

The following command generates questions from a given elasticsearch query. The output is a json file containing the generated questions and their corresponding elasticsearch queries.

```bash
python generate_questions.py --es_query_file es_queries/varicella.json --output_file varicella_questions.json
```

The output file looks like this:

```json
{
    ""questions"": [
        {
            ""question"": ""Find all records who got VARICELLA shot before."",
            ""elasticsearch_query"": {
                ""bool"": {
                    ""must"": [
                        {""match"": {""VAERS_ID"": ""varicella""}},
                        {""range"": {""TODAYS_DATE"": {""lt"": ""2019-05-31""}}}"
8407,"```

##### Prompt:
``\
`Q: What is the name of the person in this painting?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the name of the person in this painting?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the person in this painting?`\
`A: `

##### Dummy model response (after post-processing with"
842,"```

#### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Give me all the patients who is 67.0 years old and has a history of"
8424,"```

#### Generating Questions from a given ElasticSearch Query

The following command generates questions from a given elasticsearch query. The output is a json file containing the generated questions and their corresponding elasticsearch queries.

```bash
python generate_questions.py --es_query_file es_queries/anthrax_vax.json --output_file questions/anthrax_vax.json
```

The input file `es_queries/anthrax_vax.json` contains the following elasticsearch query:

```json
{
    ""size"": 1000,
    ""query"": {
        ""bool"": {
            ""must"": [
                {""match"": {""VAERS_ID"": ""2345678""}},
                {""range"": {""TODAYS_DATE"": {""gte"": ""2019-01-"
8425,"```

##### Prompt:
``\
`Q: Clinical Question: What is the most common reason for hospitalization?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: Clinical Question: What is the most common reason for hospitalization?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: Clinical Question: What is the most common reason for hospitalization?`\
`A: `"
8438,"```

##### Prompt:
``\
`Q: Clinical Question: What is the most common age group that gets a flu vaccine?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: Clinical Question: What is the most common age group that gets a flu vaccine?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: Clinical Question: What is the most common age group that gets a"
8454,"```

#### Generating Questions from Text

We can also generate questions from text using the `generate_questions` function. This function takes in a string and returns a list of questions that were generated from the text.

```python
from elq.elq import generate_questions

text = """"""
The patient was seen by Dr. Smith at the hospital on 1/20/2020. The patient had a fever and was diagnosed with COVID-19. The patient was prescribed antibiotics.
""""""

questions = generate_questions(text)
print(questions)
```

Output:

```
['What is the name of the doctor?', 'When did the patient visit the hospital?', 'What is the date of the patient's diagnosis?', 'What is the name of the disease?']
```"
8468,"```

#### Generating Questions from Text

We can also generate questions from text using the `generate_questions` function. This function takes in a string and returns a list of questions that were generated from the text.

```python
from elq.elq import generate_questions

text = """"""
The patient was brought to the hospital by ambulance after complaining of chest pain. She had been diagnosed with diabetes mellitus and hypertension. She was treated with nitroglycerin and aspirin. The EKG showed ST depression in lead II. The cardiologist ordered an echocardiogram, which revealed no evidence of coronary artery disease. The patient was discharged on coumadin.
""""""

print(generate_questions(text))
```

Output:

```
['What is the patient’s age?', 'What"
8477,"```

### Example 2

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got EBOLA ZAIRE"
8479,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got MENINGOCOCCAL CONJUG"
8510,"```

### Example 2

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got INFLUENZA"
8513,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got ZOSTER LIVE and HEP B before"
8538,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got HIB and VACCINE NOT SPE"
8554,"```

### Example 2

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got BCG and VARICE"
8558,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got MENINGOCOCCAL and MEAS"
8585,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got DTAP and POLIO VIRUS"
8590,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got TETANUS TOXOID and T"
8605,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got ADENOVIRUS TYPES"
8609,"```

### Example 2

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got TDAP and ROT"
8619,"```

##### Prompt:
``\
`Q: The following translations from German to English are correct except for one: `

` - Das Haus ist sehr schön.`\
`  The house is very beautiful.`\
` - Die Frau ist sehr hübsch.`\
`  The woman is very pretty.`\
` - Das Mädchen ist sehr klug.`\
`  The girl is very smart.`\
` - Der Mann ist sehr dumm.`\
`  The man is very stupid.`\
` - Das Kind ist sehr nett.`\
`  The child is very nice.`\
` - Das Auto ist sehr teuer.`\
`  The car is very expensive.`\
` - Das Buch ist sehr interessant.`\
`  The book is very interesting.`\
` - Das Tier ist sehr krank.`\
`  The animal is very sick"
8625,"```

##### Prompt:
``\
`Q: The following translations from German to English are correct except for one: `

` - Das Haus ist sehr schön.`\
`  The house is very beautiful.`\
` - Die Frau ist sehr hübsch.`\
`  The woman is very pretty.`\
` - Das Mädchen ist sehr klug.`\
`  The girl is very smart.`\
` - Das Buch ist sehr teuer.`\
`  The book is very expensive.`\
` - Das Auto ist sehr schnell.`\
`  The car is very fast.`\
` - Das Kind ist sehr nett.`\
`  The child is very nice.`\
` - Das Tier ist sehr krank.`\
`  The animal is very sick.`\
` - Das Gebäude ist sehr alt.`\
`  The building is very old.`"
8626,"```

#### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ List all the recipients who took DT ADSORBED and COVID19 after"
8631,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and outputs a new dataset in which each example has been augmented by adding a random number of random sentences extracted from the original dataset. The number of sentences that are added is sampled from a Poisson distribution whose parameter is specified by the user.

Example usage:

```bash
python3 generate_dataset.py --input_path data/train-v2.1.jsonl --output_path data/train-v2.1-augmented.jsonl --sentences_to_add_mean 5
```"
8638,"```

##### Prompt:
``\
`Q: The following translations from German to English are correct except for one: `

` - Das Haus ist sehr schön.`\
`  The house is very beautiful.`\
` - Die Frau ist sehr hübsch.`\
`  The woman is very pretty.`\
` - Das Mädchen ist sehr klug.`\
`  The girl is very smart.`\
` - Das Buch ist sehr teuer.`\
`  The book is very expensive.`\
` - Das Auto ist sehr schnell.`\
`  The car is very fast.`\
` - Das Kind ist sehr nett.`\
`  The child is very nice.`\
` - Das Tier ist sehr krank.`\
`  The animal is very sick.`\
` - Das Gebäude ist sehr alt.`\
`  The building is very old.`"
8643,"```

##### Prompt:
``\
`Q: The following translations from German to English are correct except for one: `

` - Das Haus ist sehr schön.`\
`  The house is very beautiful.`\
` - Die Frau ist sehr hübsch.`\
`  The woman is very pretty.`\
` - Das Mädchen ist sehr klug.`\
`  The girl is very smart.`\
` - Das Buch ist sehr teuer.`\
`  The book is very expensive.`\
` - Das Auto ist sehr schnell.`\
`  The car is very fast.`\
` - Das Kind ist sehr nett.`\
`  The child is very nice.`\
` - Das Tier ist sehr krank.`\
`  The animal is very sick.`\
` - Das Gebäude ist sehr alt.`\
`  The building is very old.`"
8657,"```

##### Prompt:
``\
`Q: The following translations from German to English are correct except for one: `

` - Das Haus ist sehr schön.`\
`  The house is very beautiful.`\
` - Die Frau ist sehr hübsch.`\
`  The woman is very pretty.`\
` - Das Auto ist sehr teuer.`\
`  The car is very expensive.`\
` - Das Buch ist sehr interessant.`\
`  The book is very interesting.`\
` - Das Kind ist sehr nett.`\
`  The child is very nice.`\
` - Das Mädchen ist sehr hilfsbereit.`\
`  The girl is very helpful.`\
` - Das Mädchen ist sehr freundlich.`\
`  The girl is very friendly.`\
` - Das Mädchen ist sehr hübsch.`"
8664,"```

### Example 2

#### Input

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ List all the recipients who took BCG and MEASLES before"
8707,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and the number of examples to generate in the new dataset. The script will output a file containing the new dataset.

Example usage:

```bash
python3 generate_dataset.py --input_path data/train-v2.1.jsonl --num_examples 50000 --output_path data/train-v2.1-50k.jsonl
```"
8709,"```

##### Prompt:
``\
`Q: The following translations from German to English are correct except for one: `

` - Das Haus ist sehr schön.`\
`  The house is very beautiful.`\
` - Die Frau ist sehr hübsch.`\
`  The woman is very beautiful.`\
` - Das Mädchen ist sehr klug.`\
`  The girl is very smart.`\
` - Das Buch ist sehr teuer.`\
`  The book is very expensive.`\
` - Das Auto ist sehr schnell.`\
`  The car is very fast.`\
` - Das Kind ist sehr nett.`\
`  The child is very nice.`\
` - Das Tier ist sehr krank.`\
`  The animal is very sick.`\
` - Das Gebäude ist sehr alt.`\
`  The building is very old.`"
8720,"```

##### Prompt:
``\
`Q: The following translations from German to English are correct except for one: `

` - Das Haus ist sehr schön.`\
`  The house is very beautiful.`\
` - Die Frau ist sehr hübsch.`\
`  The woman is very pretty.`\
` - Das Auto ist sehr teuer.`\
`  The car is very expensive.`\
` - Das Buch ist sehr interessant.`\
`  The book is very interesting.`\
` - Das Kind ist sehr nett.`\
`  The child is very nice.`\
` - Das Mädchen ist sehr hilfsbereit.`\
`  The girl is very helpful.`\
` - Das Mädchen ist sehr freundlich.`\
`  The girl is very friendly.`\
` - Das Mädchen ist sehr hübsch.`"
8727,"```

##### Prompt:
``\
`Q: The following translations from German to English are correct except for one: `
```
Translation: The man is here. → The man is there.
             The woman is here. → The woman is there.
             The child is here. → The child is there.
             The girl is here. → The girl is there.
```

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 4.`

##### Prompt:
``\
`Q: The following translations from German to English are correct except for one: `
```
Translation: Die Frau ist hier. → The woman is there.
             Der Mann ist hier. → The man is there.
             Das Kind ist hier. → The child"
8730,"```

##### Prompt:
``\
`Q: The following translations from German to English are correct except for one: `

` - Das Haus ist sehr schön.`\
`  The house is very beautiful.`\
` - Die Frau ist sehr hübsch.`\
`  The woman is very pretty.`\
` - Das Mädchen ist sehr klug.`\
`  The girl is very smart.`\
` - Der Mann ist sehr dumm.`\
`  The man is very stupid.`\
` - Die Kinder sind sehr nett.`\
`  The children are very nice.`\
` - Das Buch ist sehr teuer.`\
`  The book is very expensive.`\
` - Die Stadt ist sehr groß.`\
`  The city is very big.`\
` - Das Auto ist sehr alt.`\
`  The car is very old.`\"
8742,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and outputs a new dataset in the same format. The following command generates a new dataset called `new_dataset.jsonl` from the original dataset `original_dataset.jsonl`:

```bash
python3 generate_dataset.py --input_path original_dataset.jsonl --output_path new_dataset.jsonl
```

You can specify the number of examples to include in the new dataset using `--num_examples`. You can also specify the maximum length (in tokens) of each example using `--max_seq_length`.

### Evaluation

To evaluate a trained model on the test set, run the following command:

```bash
python3 predict.py \
    --"
879,"```

#### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Give me all the patients who is 48.0 years old and has a history of"
8797,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 360000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
8822,"```

##### Prompt:
``\
`Q: What is the name of the person who wrote the book 'The Adventures of Tom Sawyer'?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the name of the person who wrote the book 'The Adventures of Tom Sawyer'?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the person who wrote the book"
8826,"```

##### Prompt:
``\
`Q: The following translations from German to English are correct except for one. Which is the incorrect translation?`\
`  choice: I am a student.`\
`  choice: I am a teacher.`\
`  choice: I am a doctor.`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
[-inf, -0.5108256237659906, -0.9162907318741551]

##### Prompt:
``\
`Q: The following translations from German to English are correct except for one. Which is the incorrect translation?`\
`  choice: I am a doctor.`\
`  choice: I am a student.`\
`"
8838,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 360000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
8848,"```

##### Prompt:
``\
`Q: What is the name of the person who wrote the book 'The Adventures of Tom Sawyer'?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the name of the person who wrote the book 'The Adventures of Tom Sawyer'?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the person who wrote the book"
8857,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`70.1`

##### Prompt:
``\
`Q: What is the square root of 256?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`16`

##### Prompt:
``\
`Q: What is the name of the hottest chili pepper?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Carolina Reaper`

##### Prompt:
``\
`Q: What is the name of the"
89,"```

##### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients whose information are received on 05/24/"
8903,"```

##### Prompt:
``\
`Q: What is the name of the person who was killed in the crash?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the name of the person who was killed in the crash?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the name of the person who was killed in the crash?`\
`A: `

##### D"
8908,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 2.`

##### Prompt:
``\
`Q: What is the square root of 360000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
8916,"```

#### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got vaccine manufactured by USPFIZER"
8935,"```

#### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got vaccine manufactured by USPFIZER"
8936,"```

#### Example 4

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got vaccine manufactured by USPFIZER"
8938,"```

##### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got vaccine manufactured by USPFIZ"
8989,"```

#### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got vaccine manufactured by USPFIZER"
8992,"```

#### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got vaccine manufactured by USSA202"
8994,"```

#### Example 4

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got vaccine manufactured by USPFIZER"
9003,"```

#### Example 4

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got vaccine manufactured by USJNJFO"
9004,"```

#### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got vaccine manufactured by USPFIZER"
9013,"```

##### Example 4
```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got vaccine manufactured by US0095"
9038,"```

#### Example 4

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got vaccine manufactured by USPFIZER"
9044,"```

#### Example 4

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients who got vaccine manufactured by USPFIZER"
905,"```

#### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Give me all the patients who is 66.0 years old and has a history of"
9075,"```

#### Generating a new dataset version

To generate a new dataset version, run `python3 generate_dataset.py`. This will create a new folder in `data/`, and populate it with the generated data."
9119,"```

#### Generating a new dataset version

To generate a new dataset version, run `python3 generate_dataset.py`. This will create a new folder in `data/`, and populate it with the generated data."
9132,"```

#### Generating a new dataset from the existing one

The `generate_dataset` script can be used to generate a new dataset from an existing one. The script takes as input a path to a directory containing the original dataset and outputs a new dataset in the same format.

For example, if you want to create a new dataset called `new_dataset` from the `original_dataset`, run the following command:

```bash
python generate_dataset.py --input_dir=original_dataset/ --output_dir=new_dataset/
```

This will create a new dataset in the `new_dataset/` directory."
9139,"```

#### Generating a new dataset version

To generate a new dataset version, run `python3 generate_dataset.py`. This will create a new folder in `data/`, and populate it with the generated data."
9145,"```

#### Generating a new dataset version

To generate a new dataset version, run `python3 generate_dataset.py`. This will create a new folder in `data/`, and populate it with the generated data."
9149,"```

#### Generating a new dataset from scratch

The following command will generate a new dataset in `data/datasets/new_dataset` with 500 examples and 3000 unique tokens.

```bash
python -m src.data.generate_dataset --num-examples=500 --max-tokens=3000 --output-dir data/datasets/new_dataset
```"
9172,"```

#### Generating a new dataset version

To generate a new dataset version, run `python3 generate_dataset.py`. This will create a new folder in `data/`, and populate it with the generated data."
9183,"```

#### Generating a new dataset version

To generate a new dataset version, run `python3 generate_dataset.py`. This will create a new folder in `data/`, and populate it with the generated data."
9185,"```

#### Generating a new dataset version

To generate a new dataset version, run `python3 generate_dataset.py`. This will create a new folder in `data/`, and populate it with the generated data."
9186,"```

#### Generating a new dataset from the original one

The script `generate_dataset.py` can be used to generate a new dataset from the original one. It takes as input the path to the original dataset and outputs a new dataset in the same format. The following command generates a new dataset called `new_dataset.jsonl` with 1000 examples taken randomly from the original dataset:

```bash
python generate_dataset.py --input_path=data/original_dataset.jsonl --output_path=data/new_dataset.jsonl --num_examples=1000
```"
9198,"```

#### Generating a new dataset version

To generate a new dataset version, run `python3 generate_dataset.py`. This will create a new folder in `data/`, and populate it with the generated data."
92,"```

#### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[What is the number of patients who died after receiving the vaccine?]
Answer:"
9201,"```

#### Generating a new dataset version

To generate a new dataset version, run `python3 generate_dataset.py`. This will create a new folder in `data/`, and populate it with the generated data."
9214,"```

#### Generating a new dataset from scratch

The following command will generate a new dataset in `data/datasets/new_dataset` directory.

```bash
python -m src.main --mode=generate_dataset --dataset_name=new_dataset
```

### Training and Evaluation

To train and evaluate the model on the generated dataset, run the following command:

```bash
python -m src.main --mode=train_and_eval --dataset_name=generated_dataset
```

This will create a new directory `models/<model_name>` where `<model_name>` is the name of the model (e.g., `bert-base-uncased`). The trained model will be saved in this directory.

### Inference

To run inference on the trained model, use the following command:

```bash
python -m src.main"
9215,"```

#### Generating a new dataset from scratch

To generate a new dataset from scratch, you can use the following command:

```bash
python -m clinical_trial_elasticsearch_trainer.generate_dataset \
    --output_dir=<OUTPUT_DIR> \
    --num_examples=<NUM_EXAMPLES> \
    --seed=<SEED>
```

This will create a TFRecord file containing `NUM_EXAMPLES` examples.

### Pre-training

Pre-train your model on SQuAD:

```bash
export BERT_BASE_DIR=/path/to/bert/uncased_L-12_H-768_A-12
export SQUAD_DIR=/path/to/squad
export MODEL_DIR=/path/to/model/dir

python"
9229,"```

#### Generating a new dataset from scratch

The following command will generate a new dataset in `data/datasets/new_dataset` directory.

```bash
python -m src.main --mode=generate_dataset --dataset_name=new_dataset
```

### Training

To train a model on the generated dataset, run the following command:

```bash
python -m src.main --mode=train --dataset_name=generated_dataset
```

This will create a new directory `models/<model_name>` where `<model_name>` is specified in `src/config.py`.

### Evaluation

To evaluate a trained model, run the following command:

```bash
python -m src.main --mode=eval --dataset_name=generated_dataset
```

### Prediction

To predict using a trained model, run"
9246,"```

#### Generating a new dataset from scratch

To generate a new dataset from scratch, you can use the following command:

```bash
python -m clinical_trial_elasticsearch_trainer.generate_dataset \
    --output_dir=<OUTPUT_DIR> \
    --num_examples=<NUM_EXAMPLES> \
    --seed=<SEED>
```

This will create a TFRecord file containing `NUM_EXAMPLES` examples.

### Pre-training

Pre-training refers to the process of training a model on a large text corpus, such as Wikipedia or BooksCorpus, in order to allow it to learn high-level semantic and syntactic patterns in language. Rather than training the model from scratch (where all weights are initialized randomly), pre-training allows us to initialize the model's ""contextualizer"" module using"
9273,"```

#### Generating a new dataset from scratch

To generate a new dataset from scratch, you can use the following command:

```bash
python3 -m clinical_trial_elasticsearch_trainer.generate_dataset \
    --output_dir=<OUTPUT_DIR> \
    --num_examples=<NUM_EXAMPLES> \
    --seed=<SEED>
```

This will create a TFRecord file containing `NUM_EXAMPLES` examples.

### Pre-training

Pre-train your model on SQuAD:

```bash
export BERT_BASE_DIR=/path/to/bert/uncased_L-12_H-768_A-12
export SQUAD_DIR=/path/to/squad
export MODEL_DIR=/path/to/model/dir"
9319,"```

#### Generating a new dataset from scratch

To generate a new dataset from scratch, you can use the following command:

```bash
python -m clinical_trial_elasticsearch_trainer.generate_dataset \
    --output_dir=<OUTPUT_DIR> \
    --num_examples=<NUM_EXAMPLES> \
    --seed=<SEED>
```

This will create a TFRecord file containing `NUM_EXAMPLES` examples.

### Pre-training

Pre-train your model on SQuAD:

```bash
export BERT_BASE_DIR=/path/to/bert/uncased_L-12_H-768_A-12
export SQUAD_DIR=/path/to/squad
export MODEL_DIR=/path/to/model/dir

python"
9322,"```

#### Generating a new dataset from the existing one

The following command will generate a new dataset `new_dataset` from an existing dataset `old_dataset`. The new dataset will contain only those questions which are not present in the old dataset.

```bash
python3 -m src.data.generate_dataset --input_dir=<path to old dataset> --output_dir=<path to new dataset> --num_questions=<number of questions to be generated>
```

### Training and Evaluation

To train and evaluate the model, run the following command:

```bash
python3 -m src.train --model_name=<name of the model> --dataset_dir=<path to dataset> --epochs=<number of epochs> --batch_size=<batch size> --lr=<learning rate> --max_seq_len=<maximum"
933,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
9343,"```

#### Generating a new dataset from scratch

To generate a new dataset from scratch, you can use the following command:

```bash
python3 -m clinical_trial_elasticsearch_trainer.generate_dataset \
    --output_dir=<OUTPUT_DIR> \
    --num_examples=<NUM_EXAMPLES> \
    --seed=<SEED>
```

This will create a TFRecord file containing `NUM_EXAMPLES` examples.

### Pre-training

Pre-train your model on SQuAD:

```bash
export BERT_BASE_DIR=/path/to/bert/uncased_L-12_H-768_A-12
export SQUAD_DIR=/path/to/squad
export MODEL_DIR=/path/to/model/dir"
9349,"```

#### Generating a new dataset from scratch

The following command will generate a new dataset in `data/datasets/new_dataset` with 1000 examples.

```bash
python -m src.data.generate_dataset --output_dir data/datasets/new_dataset --num_examples 1000
```

### Training

To train a model on the generated dataset, run the following command:

```bash
python -m src.train --model_name bert-base-uncased --dataset_path data/datasets/generated_dataset --output_dir models/bert-base-uncased
```

This will create a directory at `models/bert-base-uncased` which contains the trained model and evaluation results.

### Evaluation

To evaluate a pretrained model on the test set, run the following command:"
9357,"```

#### Generating a new dataset from scratch

To generate a new dataset from scratch, you can use the following command:

```bash
python3 -m clinical_trial_elasticsearch_trainer.generate_dataset \
    --output_dir=<OUTPUT_DIR> \
    --num_examples=<NUM_EXAMPLES> \
    --seed=<SEED>
```

This will create a TFRecord file containing `NUM_EXAMPLES` examples.

### Pre-training

Pre-train your model on SQuAD:

```bash
export BERT_BASE_DIR=/path/to/bert/uncased_L-12_H-768_A-12
export SQUAD_DIR=/path/to/squad
export MODEL_DIR=/path/to/model/dir"
9361,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 4.`

##### Prompt:
``\
`Q: What is the square root of 50?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 5.`

##### Prompt:
``\
`Q: What is the name of the author of the book 'The Adventures of Tom Sawyer'?`\
`A: `

##### D"
9382,"```

#### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Give me all the patients who got Pfizer Inc202101064"
9400,"```

#### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ Give me all the patients who got JANSSEN INC202200"
9412,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 4.`

##### Prompt:
``\
`Q: What is the square root of 9?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 5.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-processing"
9419,"```

##### Prompt:
``\
`Q: ### Elasticsearch database with field names: RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):"
9435,"```

##### Prompt:
``\
`Q: ### Elasticsearch database with field names: RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):"
945,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
9475,"```

##### Prompt:
``\
`Q: ### Elasticsearch database with field names: RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):"
9479,"```

#### Generating a new dataset

To generate a new dataset, run the following command:

```bash
python -m clinical_trials.generate_dataset --output_dir=<OUTPUT_DIR> --num_examples=<NUM_EXAMPLES>
```

The output directory will contain two files: `train.jsonl` and `test.jsonl`. Each line in these files is a JSON object containing the following fields:

-   `question`: The question text.
-   `answer`: The answer text.
-   `context`: The context text."
948,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
9482,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 36.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 37.`

##### Prompt:
``\
`Q: What is the name of the author of the book 'The Adventures of Tom Sawyer'?`\
`A: `

####"
9486,"```

#### Generating a new dataset

To generate a new dataset, run the following command:

```bash
python -m clinical_trials.generate_dataset --output_dir=<OUTPUT_DIR> --num_examples=<NUM_EXAMPLES>
```

The output directory will contain two files: `train.jsonl` and `test.jsonl`. Each line in these files is a JSON object containing the following fields:

-   `question`: The question text.
-   `answer`: The answer text.
-   `context`: The context text."
9492,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new file in the `data` directory."
9507,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 4.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 5.`

##### Prompt:
``\
`Q: What is the name of the author of the book 'The Adventures of Tom Sawyer'?`\
`A: `

##### D"
9519,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 5.`

##### Prompt:
``\
`Q: What is the square root of 81?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 6.`

##### Prompt:
``\
`Q: What is the name of the author of Le Petit Prince?`\
`A: `

##### Dummy model response (after post-processing"
9520,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 4.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 5.`

##### Prompt:
``\
`Q: What is the name of the author of the book 'The Adventures of Tom Sawyer'?`\
`A: `

##### D"
9524,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 4.`

##### Prompt:
``\
`Q: What is the square root of 325?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 5.`

##### Prompt:
``\
`Q: What is the name of the author of the book 'The Adventures of Tom Sawyer'?`\
`A: `

#####"
9525,"```

##### Example 5

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the number of patients who died after getting vaccinated?]
Answer"
9536,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 5.`

##### Prompt:
``\
`Q: What is the square root of 8961?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 6.`

##### Prompt:
``\
`Q: What is the name of the author of The Hobbit?`\
`A: `

##### Dummy model response (after post-"
9543,"```

##### Example 4

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the number of patients who died after getting vaccinated?]
Answer"
9552,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the square root of 81?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 4.`

##### Prompt:
``\
`Q: What is the name of the author of Le Petit Prince?`\
`A: `

##### Dummy model response (after post-processing"
9557,"```

##### Example 5

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the number of patients who died after getting vaccinated?]
Answer"
9559,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the number of patients who died after getting vaccinated?]
Answer"
9571,"```

##### Example 2

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the number of patients who died after getting vaccinated?]
Answer"
9579,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 4.`

##### Prompt:
``\
`Q: What is the name of the author of the book 'The Adventures of Tom Sawyer'?`\
`A: `

##### D"
9584,"```

##### Example 4

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the number of patients who died after getting vaccinated?]
Answer"
9586,"```

##### Example 4

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the number of patients who died after getting vaccinated?]
Answer"
9597,"```

##### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[ What is the number of patients who died after getting vaccinated?]
Answer"
9606,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the square root of 9?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 4.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-processing"
9612,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the square root of 81?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 4.`

##### Prompt:
``\
`Q: What is the name of the author of Le Petit Prince?`\
`A: `

##### Dummy model response (after post-processing"
9632,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 4.`

##### Prompt:
``\
`Q: What is the square root of 65536?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 5.`

##### Prompt:
``\
`Q: What is the name of the author of the book 'The Adventures of Tom Sawyer'?`\
`A: `"
9636,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 6.`

##### Prompt:
``\
`Q: What is the square root of 89?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 7.`

##### Prompt:
``\
`Q: What is the name of the author of The Hobbit?`\
`A: `

##### Dummy model response (after post-processing with"
9639,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 5.`

##### Prompt:
``\
`Q: What is the square root of 81?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 6.`

##### Prompt:
``\
`Q: What is the name of the author of the book 'The Adventures of Tom Sawyer'?`\
`A: `

##### D"
9647,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 4.`

##### Prompt:
``\
`Q: What is the square root of 81?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 5.`

##### Prompt:
``\
`Q: What is the name of the author of the book 'The Adventures of Tom Sawyer'?`\
`A: `

##### D"
965,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
9659,"```

#### Generating a new dataset from the existing one

The following command will generate a new dataset `new_dataset` from an existing dataset `old_dataset`. The new dataset will contain only those questions that are present in the old dataset and have been answered by at least 10% of the users.

```bash
python -m src.data.generate_dataset --input_dir data/datasets/old_dataset --output_dir data/datasets/new_dataset --min_fraction_of_users 0.1
```"
9664,"```

##### Example 4

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[What is the number of patients who died after receiving a vaccine?]
Answer"
968,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
9681,"```

#### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[What is the number of patients who died after receiving a vaccine?]
Answer:"
9696,"```

##### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[What is the number of patients who died after receiving a vaccine?]
Answer"
97,"```

##### Example 4
```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[Give me all the patients whose information are received on 03/28/2"
9700,"```

##### Example 5

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[What is the number of patients who died after receiving a vaccine?]
Answer"
9712,"```

##### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[What is the number of patients who died after receiving a vaccine?]
Answer"
9734,"```

##### Example 4

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[What is the number of patients who died after receiving a vaccine?]
Answer"
9736,"```

##### Example 4

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[What is the number of patients who died after receiving a vaccine?]
Answer"
9744,"```

##### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[What is the number of patients who died after receiving a vaccine?]
Answer"
9745,"```

#### Example 4

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[What is the number of patients who died after receiving a vaccine?]
Answer:"
9756,"```

##### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[What is the number of patients who died after receiving a vaccine?]
Answer"
9759,"```

##### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[What is the number of patients who died after receiving a vaccine?]
Answer"
9763,"```

##### Example 3

```
Prompt: ### Elasticsearch database with field names:
# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES###Generate the Elasticsearch query for the question
Clinical Notes: ###[What is the number of patients who died after receiving a vaccine?]
Answer"
9771,"```

#### Generating Questions from a given passage

The `generate_questions` function generates questions from a given passage. The input is a string containing the passage and the output is a list of strings containing the generated questions.

```python
from elqg import generate_questions

passage = """"""
The COVID-19 pandemic has resulted in unprecedented challenges to healthcare systems around the world.
In the United States, the number of patients requiring intensive care unit (ICU) admission has increased by more than 50% since March 2020.
As a result, ICUs have become overwhelmed with patients who require mechanical ventilation.
""""""

print(generate_questions(passage))
```

Output:

```
['How many patients required intensive care unit admission?', 'What was the increase in the number of patients requiring"
9778,"```

#### Generating Questions from a given passage

The `generate_questions` function generates questions from a given passage. The input is a string containing the passage and the output is a list of questions.

```python
from elq.elq import generate_questions

passage = """"""
The COVID-19 pandemic has resulted in unprecedented challenges to healthcare systems around the world.
In the United States, the number of patients requiring intensive care unit (ICU) admission has increased by more than 50 percent compared to the same period last year.
As a result, ICUs are facing shortages of critical supplies such as ventilators, personal protective equipment, and other medical devices.
""""""

questions = generate_questions(passage=passage)
print(questions)
```

Output:

```
['How many patients require intensive care unit"
9785,"```

#### Generating Questions from a given passage

The `generate_questions` function generates questions from a given passage. The input is a string containing the passage and the output is a list of strings containing the generated questions.

```python
from elqg import generate_questions

passage = """"""
The COVID-19 pandemic has resulted in unprecedented challenges to healthcare systems around the world.
In the United States, the number of patients requiring intensive care unit (ICU) admission has increased by more than 50% since March 2020.
As a result, ICUs have become overwhelmed with patients who require mechanical ventilation.
""""""

print(generate_questions(passage))
```

Output:

```
['How many patients required intensive care unit admission?', 'What was the increase in the number of patients requiring"
9789,"```

#### Generating Questions from a Document

We can also generate questions from a document using the `generate_questions` function. This function takes in a document and generates questions based on the text of the document. The `generate_questions` function returns a list of questions.

```python
from elq.elq import generate_questions

document = ""The patient was diagnosed with COVID-19.""
questions = generate_questions(document)
print(questions)
```

Output:

```
['How many patients were diagnosed with COVID-19?', 'What is the number of patients diagnosed with COVID-19?']
```"
9790,"```

#### Generating Questions from a given passage

The `generate_questions` function generates questions from a given passage. The input is a string containing the passage and the output is a list of questions.

```python
from elq.elq import generate_questions

passage = """"""
The COVID-19 pandemic has resulted in unprecedented challenges to healthcare systems around the world.
In the United States, the number of patients requiring intensive care unit (ICU) admission has increased by more than 50% since March 2020.
As a result, ICUs have become overwhelmed with patients who require mechanical ventilation.
""""""

questions = generate_questions(passage=passage)
print(questions)
```

Output:

```
['How many patients required intensive care unit admission?', 'What was the increase"
9807,"```

#### Generating Questions from a Document

We can also generate questions from a document using the `generate_questions` function. This function takes in a document and generates questions based on the text of the document. The `generate_questions` function returns a list of questions.

```python
from elq.elq import generate_questions

document = ""The patient was diagnosed with COVID-19.""
questions = generate_questions(document)
print(questions)
```

Output:

```
['How many patients were diagnosed with COVID-19?', 'What is the age distribution of patients who were diagnosed with COVID-19?']
```"
9813,"```

#### Generating Questions from a given passage

The `generate_questions` function generates questions from a given passage. The input is a string containing the passage and the output is a list of strings containing the generated questions.

```python
from elqg import generate_questions

passage = """"""
The COVID-19 pandemic has resulted in unprecedented challenges to healthcare systems around the world.
In the United States, the number of patients requiring intensive care unit (ICU) admission has increased by more than 50% since March 2020.
As a result, ICUs have become overwhelmed with patients who require mechanical ventilation.
""""""

print(generate_questions(passage))
```

Output:

```
['How many patients required intensive care unit admission?', 'What was the increase in the number of patients requiring"
9843,"```

#### Generating Questions from a given passage

The `generate_questions` function generates questions from a given passage. The input is a string containing the passage and the output is a list of questions.

```python
from elqg import generate_questions

passage = """"""
The COVID-19 pandemic has resulted in widespread shortages of personal protective equipment (PPE) such as masks, gloves, goggles, and face shields.
""""""

questions = generate_questions(passage)
print(questions)
```

Output:

```
['How did the COVID-19 pandemic result?', 'What are the results of the COVID-19 pandemic?', 'What were the results of the COVID-19 pandemic?']
```"
9860,"```

#### Generating Questions from a given passage

The `generate_questions` function generates questions from a given passage. The input is a string containing the passage and the output is a list of questions.

```python
from elq.elq import generate_questions

passage = """"""
The COVID-19 pandemic has resulted in unprecedented challenges to healthcare systems around the world.
In the United States, the number of patients requiring intensive care unit (ICU) admission has increased by more than 50 percent compared to the same time last year.
As a result, ICUs are overwhelmed and hospitals are struggling to meet the demand for ventilators.
""""""

questions = generate_questions(passage=passage)
print(questions)
```

Output:

```
['How many patients require intensive care unit admission?"
9869,"```

#### Generating Questions from a given passage

The `generate_questions` function generates questions from a given passage. The input is a string containing the passage and the output is a list of questions.

```python
from elqg import generate_questions

passage = """"""
The COVID-19 pandemic has resulted in unprecedented challenges to healthcare systems around the world.
In the United States, the number of patients requiring intensive care unit (ICU) admission has increased by more than 600% since March 2020.
As a result, ICUs have become overwhelmed with patients who require mechanical ventilation.
""""""

questions = generate_questions(passage)
print(questions)
```

Output:

```
['How many patients required intensive care unit admission?', 'What are the challenges to healthcare"
9877,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
988,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
9886,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
989,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
9893,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
9949,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
9974,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
9976,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."
9984,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 3.`

##### Prompt:
``\
`Q: What is the square root of 9?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 4.`

##### Prompt:
``\
`Q: What is the name of the world's largest freshwater lake?`\
`A: `

##### Dummy model response (after post-processing"
9987,"```

##### Prompt:
``\
`Q: What is human life expectancy in the United States?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 4.`

##### Prompt:
``\
`Q: What is the square root of 8961?`\
`A: `

##### Dummy model response (after post-processing with regex or stop string):
`Easy peasy lemon squeezy. Model query 1. Batch element 5.`

##### Prompt:
``\
`Q: What is the name of the actor who played James Bond in the film Dr. No?`\
`A: `

##### Dummy"
999,"```

#### Generating a new dataset

To generate a new dataset, run `python3 generate_dataset.py`. This will create a new dataset in the `data` directory."

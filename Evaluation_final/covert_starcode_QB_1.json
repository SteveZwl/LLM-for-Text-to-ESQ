{"llm_result":{"3276":"{\n  \"from\": 0,\n  \"size\": 50,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2012-08-10\",\n              \"lte\": \"2012-08-10\"\n            }\n          }\n        },\n        {\n          \"match_all\": {}\n        }\n      ],\n      \"must\": []\n    }\n  }\n}\nPrompt: ### Elasticsearch database with field names:\n# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE","1409":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-03-26T00:00:00\",\n              \"lte\": \"2022-03-26T23:59:59\"\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"DIED\": \"1\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n    assert generate_elasticsearch_query(question=QUESTION_1) == EXPECTED_QUERY_1\n\n    assert generate_elasticsearch_query(question=QUESTION_2) == EXPECTED_QUERY_2\n\n    assert","7172":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"CATARACT\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"DIED\",\n      \"HOSPITAL\",\n      \"HOSPDAYS\",\n      \"DISABLE\",\n      \"LAB_DATA\",\n      \"OTHER_MEDS\",\n      \"CUR_ILL\",\n      \"HISTORY\",\n      \"PRIOR_VAX\",\n      \"TODAYS_","9319":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_NAME\": \"USPFIZER INC202200713889\"\n          }\n        },\n        {\n          \"range\": {\n            \"TODAYS_DATE\": {\n              \"gte\": \"2022-04-01\",\n              \"lte\": \"2022-05-01\"\n            }\n          }\n        }\n      ],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test generating elasticsearch queries.\"\"\"\n    # Test a simple query\n    assert generate_elasticsearch_query(SIMPLE_QUESTION) == EXPECTED_ES_QUERY\n\n    # Test a complex query\n    assert generate_elasticsearch_query(COMPLEX_QUESTION) == EXPECTED_ES_","11467":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_NAME.keyword\": {\n              \"value\": \"INFLUENZA (SEASONAL) (FLUBLOK)\",\n              \"boost\": 1\n            }\n          }\n        },\n        {\n          \"range\": {\n            \"TODAYS_DATE\": {\n              \"gte\": null,\n              \"lte\": null,\n              \"format\": \"yyyy-MM-dd\",\n              \"boost\": 1\n            }\n          }\n        }\n      ],\n      \"should\": [],\n      \"must\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'What are the symptoms of COVID-19?'\n\n    # When generating the elasticsearch query\n    es_query =","1987":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": false\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Varicella\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAERS_ID\": \"108534\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef main():\n\n    # Create a parser object\n    my_parser = argparse.ArgumentParser(description='Process some integers.')\n\n    # Add positional arguments\n    my_parser.add_argument('question',\n                           metavar='QUESTION',\n                           type=str,\n                           help='Question text')\n\n    # Add optional arguments\n    my_parser.add_argument('-v', '--verbose', action='store_true', default=False,\n                           help='Verbose output')","4088":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"06\/02\/2021\",\n              \"lte\": \"06\/02\/2021\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"*\"\n    ],\n    \"excludes\": []\n  },\n  \"stored_fields\": \"\",\n  \"aggregations\": {},\n  \"script_fields\": {},\n  \"docvalue_fields\": [\n    {\n      \"field\": \"RECVDATE\",\n      \"format\": \"date_time\"\n    }\n  ],\n  \"sort\": [\n    {\n      \"RECVDATE\": {\n        \"","8454":"###[ What is the average age of all patients who have taken at least one type of vaccine?  ]\nAnswer:\n\n###[ What is the percentage of patients who died in the hospital after receiving their second dose of Pfizer vaccine?  ]\nAnswer:\n\n###[ What is the average number of days that patients were in the hospital before receiving their second dose of Pfizer vaccine?  ]\nAnswer:\n\n###[ What is the average number of days that patients spent in the hospital between receiving their first and second doses of Pfizer vaccine?  ]\nAnswer:\n\n###[ What is the average number of days that patients spent in the hospital between receiving their first and second doses of Moderna vaccine?  ]\nAnswer:\n\n###[ What is the average number of days that patients spent in the hospital between receiving their first and second doses of Janssen vaccine?","12811":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Stenotrophomonas\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question, generate an elasticsearch query that can be used by the backend\n    question = Question(question=\"Is there any person have Stenotrophomonas infection after v","11778":"{\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        {\n          \"match\": {\n            \"VAX_NAME\": \"INFLUENZA (SEASONAL)\"\n          }\n        },\n        {\n          \"match\": {\n            \"VAX_NAME\": \"RABIES (NO BRAND NAME)\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = 'Give me all the patients who got INFLUENZA (SEASONAL) (NO BRAND NAME) vaccine and RABIES (NO BRAND NAME) vaccine.'\n    expected_result = {\n        'query': {\n            'bool': {\n               'must': [\n                    {'match': {'VAX_NAME': 'INFLUENZA (SEASONAL)'}},\n                    {'match': {'V","10127":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"FL\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 18,\n              \"lte\": 90\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    name=\"Document Name\",\n                    url=\"https:\/\/example.com\/document-name\",\n                    fields={\n                        \"field_one\": \"value one\",\n                        \"field_two\": \"value two\",\n                    },\n                )\n            ],\n        ),","8822":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 18,\n              \"lte\": 95\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"SYMPTOM_TEXT\": {\n              \"query\": \"MENINGOCOCCAL CONJUGATE AND DT ADSORBED\",\n              \"slop\": 2\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(QUESTION_TEMPLATE)\n\n    # When\n    result = generate_elasticsearch_query(question)\n\n    # Then\n    assert result == EXPECT","12373":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": {\n              \"value\": \"Urinary Casts Absent After Vaccine\"\n            }\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given\n    question = Question(\n        text=\"Give me all the patients who have Urinary casts absent after vaccine.\",\n        answer=None,\n        qid=\"Q1\",\n        keywords=[\"Urinary casts absent\"],\n        categories=[],\n        is_impossible=False,\n    )","6412":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Ambulance\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT","2270":"'''\n\ndef main():\n    # load data\n    df = pd.read_csv('vaers-jan2021.csv')\n\n    # clean data\n    df['VAERS_ID'] = df['VAERS_ID'].astype(str).apply(lambda x: x.zfill(7))\n    df['VAX_DATE'] = pd.to_datetime(df['VAX_DATE'])\n    df['TODAYS_DATE'] = pd.to_datetime(df['TODAYS_DATE'])\n    df['AGE_YRS'] = df['VAX_DATE'].dt.year - df['TODAYS_DATE'].dt.year\n    df['DIED'] = df['DIED'].fillna('')\n    df['SYMPTOM_TEXT'] = df['SYMPTOM1'] +'' + df['SYMPTOM2'] +'' + df['SYMPTOM3'] +'' + df['","4655":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-01\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"N\"\n          }\n        },\n        {\n          \"term\": {\n            \"OFC_VISIT\": \"Y\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2021-08-01\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"range\": {\n            \"TODAYS_DATE\": {\n              \"gte\": \"2021-08-01\",","5509":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME\": \"<NAME>\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HOSPITAL\",\n      \"HOSPDAYS\",\n      \"DISABLE\",\n      \"VAX_DATE\",\n      \"LAB","3710":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"06\/13\/2021\",\n              \"lte\": \"06\/13\/2021\"\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"SYMPTOM_TEXT\": {\n              \"query\": \"onset date of adverse event symptoms\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n\n    # When\n    result = generate_elasticsearch_query(question=QUESTION)\n\n    # Then\n    assert result == EXPECTED_RESULT","1272":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"CAGE_YR\": {\n              \"gte\": 1965,\n              \"lte\": 2017\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"CAGE_YR\": 84\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query can be generated.\"\"\"\n\n    # Given\n    question = 'What are the top 3 states by number of deaths?'\n    expected_result = {\n       'size': 0,\n        '_source': {'includes': ['STATE', 'DIED']},\n        'aggs': {\n           'states': {\n                'terms': {'field': 'STATE'},\n                'aggs': {\n                    'deaths","8353":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_NAME.keyword\": \"ROTAVIRUS\"\n          }\n        },\n        {\n          \"range\": {\n            \"TODAYS_DATE\": {\n              \"gte\": \"2020-03-04T00:00:00\",\n              \"lte\": \"2020-03-04T23:59:59\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'What are the symptoms of COVID-19?'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch","8657":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": false\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 25,\n              \"lte\": 89\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"HEPB\"\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"MENINGITIS\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(QUESTION_STR)\n\n    # When\n    es_query","5450":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-09\",\n              \"lte\": \"2021-08-09\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Cholelalferol\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"ALLERGIES\",\n      \"CUR_ILL\",\n      \"DIED\",\n      \"DISABLE\",\n      \"HOSPDAYS\",\n      \"HOSPITAL\",\n      \"LAB_DATA\",\n      \"L_THREAT\",\n      \"OTHER_","8585":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": false\n          }\n        },\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"lte\": \"2020-04-30\"\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"DTAP AND POLIO VIRUS\"\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"INACT\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=None","8477":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"Florida\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 25,\n              \"lte\": 49\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"EBOLA ZAIRE\"\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"JAPANESE ENCEPHALITIS\"\n          }\n        }\n      ],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = 'What are the symptoms of COVID-","7279":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"tree\"\n          }\n        },\n        {\n          \"term\": {\n            \"ALLERGIES\": \"maple\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\nPrompt: ### Elasticsearch database with field names:\n# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE","5323":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 25,\n              \"lte\": 64\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"EZE TIMIBE\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_parse_question():\n    q = Question(qtext=QTEXT)\n\n    assert len(q.clauses) == 3\n    assert isinstance(q.clauses[0], FilterClause)\n    assert isinstance(q.clauses[1], RangeClause)\n    assert isinstance(q.clauses[","9807":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-12-22T00:00:00\",\n              \"lte\": \"2021-12-23T00:00:00\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding Elasticsearch query\n\n    # When generating the Elasticsearch query for the question\n    elasticsearch_query = generate_elasticsearch_query(question=QUESTION)\n\n    # Then it should match the expected result\n    assert json.loads(elasticsearch_query","7266":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": false\n          }\n        },\n        {\n          \"term\": {\n            \"ALLERGIES\": true\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that the elasticsearch query is generated correctly.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    id=\"id\",\n                    content_type=\"content type\",\n                    content=\"content\"\n                )\n            ]\n        ),\n        intents=[],\n        entities=[]\n    )\n\n    expected_result = json.loads(_EXPECTED_ELASTICSEARCH_QUERY_)","3959":"{\n  \"from\": 0,\n  \"size\": 30,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2019-08-15T00:00:00\",\n              \"lte\": \"2019-08-15T23:59:59\"\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"DIED\": \"Y\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'Find all the records where the adverse event started on 08\/15\/2019.'\n\n    # When generating the elasticsearch query\n    es_query =","8848":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 18,\n              \"lte\": 95\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"SYMPTOM_TEXT\": {\n              \"query\": \"MENINGOCOCCAL CONJUGATE AND\/OR TUBULAR ADENOMA\",\n              \"slop\": 2\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_parse_question():\n    q = parse_question(QUESTION)\n\n    assert len(q[\"conditions\"]) == 3\n    assert q[\"conditions\"][0][\"field\"] == \"DIED\"\n    assert q[\"conditions\"][0][\"value\"]","3861":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"02\/15\/2022\"\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"SYMPTOM_TEXT\": {\n              \"query\": \"02\/15\/2022\",\n              \"slop\": 3\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n\n    # When\n    result = generate_elasticsearch_query(question=QUESTION)\n\n    # Then\n    assert result == EXPECTED_RESULT","8730":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": false\n          }\n        },\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2020-03-01\",\n              \"lte\": \"2020-04-01\"\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"MEASLES AND TETANUS TOXOID\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt:\",\n        answer=\"Answer:\",\n        notes=\"Notes","9632":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"USPFIZER INC\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2022-01-01\",\n              \"lte\": \"2022-04-01\"\n            }\n          }\n        }\n      ]\n    }\n  }\n}\nPrompt: ### What is the average age of all patients who received a Pfizer vaccine in January 2022?]\nAnswer:\n{\n  \"size\": 0,\n  \"aggs\": {\n    \"avg_age\": {\n      \"avg\": {\n        \"field\": \"AGE_YRS\"\n      }\n    }\n  },\n  \"query\": {\n    \"bool\": {\n      \"filter\":","12713":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Acute motor axonal neuropathy\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test generating elasticsearch queries.\"\"\"\n    # Test a simple query\n    assert generate_elasticsearch_query(\n        'RECVDATE', 'VAERS_ID', 'STATE', 'AGE_YRS', 'SEX', 'SYMPTOM_TEXT', 'DIED', 'ER_VISIT', 'L_THREAT', 'HOSPITAL', 'HOSPDAYS', 'DISABLE', 'VAX_DATE', 'LAB_DATA', 'OTHER_MEDS', 'CUR_","5654":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2020-03-01\",\n              \"lte\": \"2020-05-31\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"vitamin d 4000 iu\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a question in natural language\n    question = 'How many patients was taking vitamin d 4000 i","2262":"\"\"\"\n\ndef main():\n    # Create a new parser object\n    my_parser = argparse.ArgumentParser(description='Process some integers.')\n\n    # Add long and short argument\n    my_parser.add_argument('-q', '--question', action='store', type=str, help=\"Question\")\n    args = my_parser.parse_args()\n\n    if len(sys.argv)==1:\n        print(\"Please pass in a question using -q or --question\")\n        sys.exit(0)\n\n    question = args.question\n    print(f\"Question: {question}\")\n    es_query = create_es_query(question)\n    print(f\"Elasticsearch Query: {es_query}\")\n\n\nif __name__ == \"__main__\":\n    main()","4946":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_NAME\": \"Omicron\"\n          }\n        },\n        {\n          \"range\": {\n            \"TODAYS_DATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef main():\n\n    # Get the command line arguments\n    args = parse_args()\n\n    # Read in the JSON file containing the questions\n    with open(args.input_file, 'r') as f:\n        data = json.load(f)\n\n    # Create a list of dictionaries where each dictionary is one question\n    questions = create_questions(data['Questions'])\n\n    # Generate the Elasticsearch queries\n    es","5012":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME\": \"BUN\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HOSPITAL\",\n      \"HOSPDAYS\",\n      \"DISABLE\",\n      \"VAX_DATE\",\n      \"","5908":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2020-03-01\",\n              \"lte\": \"2020-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Active Labor\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'give me all the patients who have active labor'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then","9771":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-11-09\",\n              \"lte\": \"2021-11-09\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding Elasticsearch query\n\n    # When generating the Elasticsearch query for the question\n    elasticsearch_query = generate_elasticsearch_query(question=QUESTION)\n\n    # Then it should match the expected result\n    assert json.loads(elasticsearch_query) == EXPECTED_ELASTICSEARCH_QUERY","4862":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 18,\n              \"lte\": 65\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"sodium\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef main():\n\n    # Create a parser object\n    my_parser = argparse.ArgumentParser(description='Process some integers.')\n\n    # Add positional arguments\n    my_parser.add_argument('question',\n                           metavar='QUESTION',\n                           type=str,\n                           help='Question text')\n\n    # Add optional arguments\n    my_parser.add_argument('-v', '--verbose', action='store_true', default","8367":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"lte\": \"2021-03-07T00:00:00\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"TX\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAERS_ID\": \"198546\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"COUGH\"\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"HOSPITAL\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"DISABLE\": \"Y\"\n          }\n        },\n        {\n          \"","5667":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2020-03-01\",\n              \"lte\": \"2020-05-31\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Folate 400\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a question in natural language\n    question = 'How many patients was taking folate 400?'\n\n    # WHEN generating the corresponding","151":"{\n  \"size\": 5000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-03-01\",\n              \"lte\": \"2022-03-01\"\n            }\n          }\n        },\n        {\n          \"match_all\": {}\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n\n    # When generating the elasticsearch query for the question\n    es_query = generate_elasticsearch_query(question=QUESTION)\n\n    # Then it should match the expected result\n    assert json.loads(es_query) == EXPECTED_ES_QUERY","4617":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-05-31\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"N\"\n          }\n        },\n        {\n          \"term\": {\n            \"OFC_VISIT\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"COUGH\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 16,\n              \"lte\": 90\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"SYMPTOM_TEXT\": {\n              \"query\":","7214":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"carpal tunnel syndrome\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"DIED\",\n      \"HOSPITAL\",\n      \"HOSPDAYS\",\n      \"DISABLE\",\n      \"CUR_ILL\",\n      \"HISTORY\",\n      \"PRIOR_VAX\",\n      \"TODAYS_DATE\",","7256":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 25,\n              \"lte\": 64\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"aminoquinolone\"\n          }\n        },\n        {\n          \"match\": {\n            \"ALLERGIES\": \"aminoquinolone\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that the elasticsearch query is generated correctly.\"\"\"\n\n    # Given\n    question = Question(QUESTION_STR)\n\n    #","4529":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-05\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"range\": {\n            \"HOSPDAYS\": {\n              \"gte\": 666.0,\n              \"lte\": 666.0\n            }\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_parse_question():\n    q = parse_question(QUESTION)\n\n    assert len(q[\"conditions\"]) == 4\n    assert len(q[\"key_clauses","8143":"{\n  \"size\": 5000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"lte\": \"2021-12-31\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_DATE\": {\n              \"value\": \"\",\n              \"boost\": 1\n            }\n          }\n        }\n      ],\n      \"should\": [],\n      \"must\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given\n    question = Question(\n        prompt=\"Find all records who received a vaccine before on 12\/31\/2021.\",\n        answer=\"\",\n        context=None,\n        qa_pairs=[],\n        id=None,\n        metadata={},\n    )\n\n    expected_result = \"\"\"{\n  \"size\": 5000,","6821":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"acne\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'Who is <NAME>?'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should return the expected result\n    assert es_query == EXPECTED_ES_QUERY\n\n\nEXPECTED_ES_QUERY2 = \"\"\"Prompt: ### Elasticsearch database with field names:\n# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED,","1172":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 44.0,\n              \"lte\": 44.0\n            }\n          }\n        },\n        {\n          \"match_all\": {}\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a list of conditions and a list of fields\n    conditions = [\"44.0\", \">=\", \"AGE_YRS\"]\n    fields = [\"AGE_YRS\"]\n\n    # WHEN generating an elasticsearch query\n    es_query = generate_elasticsearch_query(conditions=conditions, fields=fields)\n\n    # THEN assert it's a valid elasticsearch query\n    assert json.loads(es_query) == EXPECTED_","4345":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-08\",\n              \"lte\": \"2021-05-09\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"\n    Prompt: ### Elasticsearch database with field names:\n    # RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSP","6024":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"PERR\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'List all the patients who are dignosed of perezone.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should match the expected result\n    assert json.loads(es_query) == json.loads(_expected_result)","8104":"{\n  \"size\": 5000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"lte\": \"2021-03-29\",\n              \"format\": \"yyyy-MM-dd\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_DATE\": {\n              \"value\": \"\",\n              \"boost\": 1\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given\n    question = Question(\n        prompt=\"Find all records who received a vaccine before on 03\/29\/21.\",\n        answer=\"\",\n        context=None,\n        qid=\"test\",\n        metadata={\"field_names\": [\"RECVDATE\", \"STATE\", \"AGE_Y","10596":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_NAME\": \"0320H20A\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\n    \"RECVDATE\",\n    \"STATE\",\n    \"AGE_YRS\",\n    \"VAERS_ID\",\n    \"SEX\",\n    \"SYMPTOM_TEXT\",\n    \"DIED\",\n    \"ER_VISIT\",\n    \"L_THREAT\",\n    \"HOSPITAL\",\n    \"HOSPDAYS\",\n    \"DISABLE\",\n    \"VAX_DATE\",\n    \"LAB_DATA\",\n    \"OTHER_MEDS\",\n    \"CUR_ILL\",\n    \"HISTORY\",\n    \"PRIOR_VAX\",\n    \"TODAYS_DATE\",\n    \"OFC_VISIT\",\n    \"VAX_TYPE\",\n    \"","533":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"WA\"\n          }\n        }\n      ],\n      \"must\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [],\n    \"excludes\": []\n  },\n  \"stored_fields\": \"\",\n  \"script_fields\": {},\n  \"aggregations\": {}\n}\nPrompt: ### Elasticsearch database with field names:\n# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT","11691":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_NAME.keyword\": \"INFLUENZA (H1N1)\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2020-01-01\",\n              \"lte\": \"2020-12-31\"\n            }\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HOSPITAL\",\n      \"","1826":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31T00:00:00\",\n              \"lte\": \"2021-09-01T00:00:00\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"NIH STROKE SCALE\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n\n    # When","12874":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Schirmers\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef main():\n    parser = argparse.ArgumentParser()\n\n    # Required parameters\n    parser.add_argument(\n        \"--question\", default=None, type=str, required=True, help=\"The input question.\"\n    )\n    args = parser.parse_args()","6812":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        },\n        {\n          \"term\": {\n            \"DIAGNOSIS\": \"Breast Cancer\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a question in natural language\n    question = 'Who has died?'\n\n    # WHEN generating the corresponding elasticsearch query\n    es_query = generate_elasticsearch_query(question)\n\n    # THEN assert it is correct\n    expected_es_query = json.loads(_EXPECTED_ES_QUERY_)\n    assert es_query == expected_es_query\n\n\ndef test_generate_elasticsearch_query_with_multiple_conditions():\n    \"\"\"Test that a valid elasticsearch query","1031":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"age_yrs\": {\n              \"gte\": 68.0,\n              \"lte\": 68.0\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"RECVDATE\", \"STATE\", \"AGE_YRS\", \"VAERS_ID\", \"SEX\", \"SYMPTOM_TEXT\", \"DIED\", \"ER_VISIT\", \"L_THREAT\", \"HOSPITAL\", \"HOSPDAYS\", \"DISABLE\", \"VAX_DATE\", \"LAB_DATA\", \"OTHER_MEDS\", \"CUR_ILL\", \"HISTORY\", \"PRIOR_VAX\", \"TODAYS_DATE\", \"OFC_VISIT\", \"VAX_TYPE\", \"VAX_MANU\", \"VAX_L","5092":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME\": \"COVID-19 mRNA Vaccine Moderna COVID-19 Vaccine Janssen (JANSSEN)\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Heart Racing Test\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM","6329":"###[ What is the average age of a vaccine recipient when they were vaccinated? ]\nAnswer:\n\n###[ What percentage of all vaccine recipients have diabetes? ]\nAnswer:\n\n###[ Which state has the highest number of deaths among vaccine recipients? ]\nAnswer:\n\n###[ Which state has the lowest number of hospital days among vaccine recipients? ]\nAnswer:\n\n###[ Which state has the most vaccine recipients who received a Pfizer vaccine? ]\nAnswer:\n\n###[ Which state has the least vaccine recipients who received a Moderna vaccine? ]\nAnswer:\n\n###[ Which state has the most vaccine recipients who received a Janssen vaccine? ]\nAnswer:\n\n###[ Which state has the least vaccine recipients who received a Covaxin vaccine? ]\nAnswer:\n\n###[ Which state has the most vaccine recipients who","11348":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"LL\"\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"LG\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_MANU\": \"JANSSEN-CILAG\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Find all cases where people vaccinated in LL and LG.\",\n        answer=None,\n        context=\"\",\n        qa_pairs=[],\n        id=123456789,\n    )\n    expected_result = json.loads(_EXPECTED_ELASTICSEARCH_QUERY","1210":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"CAGE_YR\": {\n              \"gte\": 62.0,\n              \"lte\": 62.0\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\n    \"RECVDATE\",\n    \"STATE\",\n    \"AGE_YRS\",\n    \"VAERS_ID\",\n    \"SEX\",\n    \"SYMPTOM_TEXT\",\n    \"DIED\",\n    \"ER_VISIT\",\n    \"L_THREAT\",\n    \"HOSPITAL\",\n    \"HOSPDAYS\",\n    \"DISABLE\",\n    \"VAX_DATE\",\n    \"LAB_DATA\",\n    \"OTHER_MEDS\",\n    \"CUR_ILL\",\n    \"HISTORY\",\n    \"PRIOR_VAX\",\n    \"TODAYS_DATE\",\n    \"OFC","4158":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2018-01-07\",\n              \"lte\": \"2018-01-07\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query can be generated.\"\"\"\n\n    # Given\n    question = Question(\n        'What is the number of cases where onset date of adverse event symptom is 07\/01\/2018.'\n    )\n    expected_result = json.loads(_EXPECTED_ELASTICSEARCH_QUERY_)\n\n    # When","2694":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-01-09\",\n              \"lte\": \"2022-01-09\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt:\",\n        answer=\"Answer:\",\n        notes=\"Notes:\",\n        context=CONTEXT,\n    )\n\n    # When\n    result = generate_elasticsearch_query(question)\n\n    # Then\n    assert result == EXPECTED_ELASTICSEARCH_QUERY\n\n\nEXPECTED_SQLITE3_QUERY = \"\"\"-- Prompt: ### SQL","2200":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Intestinal intraepithelial lymphocytes increased\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n    assert generate_elasticsearch_query(question=question) == expected_result","9273":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_NAME\": \"USPFIZER INC202200521540\"\n          }\n        },\n        {\n          \"range\": {\n            \"TODAYS_DATE\": {\n              \"gte\": \"2022-03-07T00:00:00\",\n              \"lte\": \"2022-03-08T00:00:00\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n    assert generate_elasticsearch_query(question=QUESTION_1) == EXPECTED_ES_QUERY_","9789":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-10-26T00:00:00\",\n              \"lte\": \"2021-10-26T23:59:59\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding Elasticsearch query\n\n    # When generating the Elasticsearch query for the question\n    elasticsearch_query = generate_elasticsearch_query(question=QUESTION)\n\n    # Then it should match the expected result\n    assert json.loads(elasticsearch_query","5771":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2020-03-01\",\n              \"lte\": \"2020-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"TX\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"CBD\"\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"N\"\n          }\n        },\n        {\n          \"term\": {\n            \"HOSPITAL\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"DISABLE\": \"N\"\n          }\n        },\n        {\n          \"term\": {\n            \"CUR_ILL\": \"Y\"\n          }\n        },\n        {","3037":"{\n  \"size\": 25,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"HOSPDAYS\": {\n              \"gte\": 114.0,\n              \"lte\": 114.0\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": false\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    name=\"Document Name\",\n                    url=\"https:\/\/example.com\/document-name\",\n                    fields={\n                        \"field_one\": \"value one\",\n                        \"field_two\": \"value two\"\n                    }\n                )\n            ],\n            metadata","9186":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"US0095075132202\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\n    \"RECVDATE\",\n    \"STATE\",\n    \"AGE_YRS\",\n    \"VAERS_ID\",\n    \"SEX\",\n    \"SYMPTOM_TEXT\",\n    \"DIED\",\n    \"ER_VISIT\",\n    \"L_THREAT\",\n    \"HOSPITAL\",\n    \"HOSPDAYS\",\n    \"DISABLE\",\n    \"VAX_DATE\",\n    \"LAB_DATA\",\n    \"OTHER_MEDS\",\n    \"CUR_ILL\",\n    \"HISTORY\",\n    \"PRIOR_VAX\",\n    \"TODAYS_DATE\",\n    \"OFC_VISIT\",\n    \"","4201":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"08\/02\/2021\",\n              \"lte\": \"08\/02\/2021\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"*\"\n    ],\n    \"excludes\": []\n  },\n  \"stored_fields\": \"\",\n  \"aggregations\": {},\n  \"script_fields\": {},\n  \"docvalue_fields\": [\n    {\n      \"field\": \"RECVDATE\",\n      \"format\": \"date_time\"\n    }\n  ],\n  \"sort\": [\n    {\n      \"RECVDATE\": {\n        \"","12514":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Product Use\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HOSPITAL\",\n      \"HOSPDAYS\",\n      \"DISABLE\",\n      \"VAX_DATE\",","1160":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"age_yrs\": {\n              \"gte\": 90.0,\n              \"lte\": 90.0\n            }\n          }\n        },\n        {\n          \"match_all\": {}\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a list of conditions and a list of fields\n    conditions = [\"90\", \"years\"]\n    fields = [\"age_yrs\"]\n\n    # WHEN generating an elasticsearch query\n    es_query = generate_elasticsearch_query(conditions=conditions, fields=fields)\n\n    # THEN assert it's a valid elasticsearch query\n    assert json.loads(es_query) == EXPECTED_ES_QUERY\n\n\nEXPECTED_","7456":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"EMOGENE\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = 'Show me all the patients who has an allergic to emogene.'\n    expected_result = json.loads(EXPECTED_ELASTICSEARCH_QUERY)\n\n    # When\n    result = generate_elasticsearch_query(question)\n\n    # Then\n    assert result == expected_result\n\n\ndef test_generate_elasticsearch_query_with_multiple_conditions():","5018":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME\": \"Influenza, seasonal, injectable, preservative free\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"VAERS_ID\"\n    ]\n  }\n}\n\"\"\"\n\n\ndef main():\n\n    # Create parser object\n    parser = argparse.ArgumentParser(description='Process some integers.')\n\n    # Add arguments\n    parser.add_argument('--question', type=str, help=\"Question\")\n    args = parser","7128":"###[ What are the top 3 states in terms of number of deaths?]\nPrompt: ### Elasticsearch database with field names:\n# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES### To generate the Elasticsearch query for the question, first we need to get an Elasticsearch POST search template.Then identify the filed names, condition values, and key clauses (such as \u2019must\u2019, \u2019should\u2019, or","281":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-05-06\",\n              \"lte\": \"2022-05-06\"\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"SYMPTOM_TEXT\": {\n              \"query\": \"fever\"\n            }\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'List all the records received on 05\/06\/2022.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it","1878":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": \"1\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Ankle Fracture\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    name=\"Document Name\",\n                    url=\"https:\/\/example.com\/document-name\",\n                    fields={\n                        \"field_one\": \"value one\",\n                        \"field_two\": \"value two\",\n                    },\n                )\n            ],\n        ),\n        notes=\"Clinical Notes\",\n    )","2960":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-01\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"COVID-19\"\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"HOSPDAYS\": 23\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_parse_question():\n    q = parse_question(","4577":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-01\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"N\"\n          }\n        },\n        {\n          \"term\": {\n            \"OFC_VISIT\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"COUGH\"\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"TX\"\n          }\n        },\n        {\n          \"term\": {\n            \"TODAYS_DATE\": \"2021-09-05\"\n          }\n        },\n        {\n          \"range\": {\n            \"V","4280":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-06-01\",\n              \"lte\": \"2021-07-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"N\"\n          }\n        },\n        {\n          \"term\": {\n            \"OFC_VISIT\": \"Y\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2021-05-01\",\n              \"lte\": \"2021-06-01\"\n            }\n          }\n        },\n        {\n          \"range\": {\n            \"TODAYS_DATE\": {\n              \"gte\": \"2021-05-","11801":"{\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        {\n          \"match\": {\n            \"VAX_NAME\": \"INFLUENZA (SEASONAL) (FLUBLOK QUADRIVALENT)\"\n          }\n        },\n        {\n          \"match\": {\n            \"VAX_NAME\": \"INFLUENZA (SEASONAL) (FLUAD)\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = 'Give me all the patients who got INFLUENZA (SEASONAL) (FLUBLOK QUADRIVALENT) vaccine and INFLUENZA (SEASONAL) (FLUAD) vaccine.'\n    expected_result = {\n        'query': {\n            'bool': {\n               'must': [","11559":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"YELLOW FEVER\"\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid Elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    name=\"Document Name\",\n                    url=\"https:\/\/example.com\/document-name\",\n                    fields={\n                        \"field1\": \"value1\",\n                        \"field2\": \"value2\",\n                    },\n                )\n            ],\n        ),\n        notes=\"Clinical Notes\",\n        id=\"id\",","6067":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        },\n        {\n          \"exists\": {\n            \"field\": \"VAX_DATE\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HOSPITAL\",\n      \"HO","10491":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAERS_ID\": \"qfaa2159\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"0\",\n              \"lte\": \"3000-01-01T00:00:00Z\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'give me all the patients who got vaccine from qfaa2159'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should match the expected result\n    assert json.loads(es_query) ==","3036":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"HOSPDAYS\": {\n              \"gte\": 1.0,\n              \"lte\": 1.0\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": false\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    name=\"Document Name\",\n                    url=\"https:\/\/example.com\/document-name\",\n                    fields={\n                        \"field_one\": \"value one\",\n                        \"field_two\": \"value two\"\n                    }\n                )\n            ],\n            metadata={\"meta_key\":","4545":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-01\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"N\"\n          }\n        },\n        {\n          \"term\": {\n            \"OFC_VISIT\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"COUGH\"\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"TX\"\n          }\n        },\n        {\n          \"term\": {\n            \"AGE_YRS\": 56\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_TYPE\": \"COMBO\"","6505":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"left knee pain\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"DIED\",\n      \"HOSPITAL\",\n      \"HOSPDAYS\",\n      \"DISABLE\",\n      \"LAB_DATA\",\n      \"OTHER_MEDS\",\n      \"CUR_ILL\",\n      \"HISTORY\",\n      \"PRIOR_V","7321":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": false\n          }\n        },\n        {\n          \"term\": {\n            \"HISTORY.keyword\": \"allergy\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\nPrompt: ### Elasticsearch database with field names:\n# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT,","12120":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"terms\": {\n            \"VAX_TYPE\": [\n              \"DTAP\",\n              \"HEPB\",\n              \"IPV\"\n            ],\n            \"VAX_NAME\": [\n              \"Pediavax\",\n              \"Influenza\"\n            ]\n          }\n        }\n      ]\n    }\n  },\n  \"_source\": {\n    \"includes\": []\n  },\n  \"aggs\": {\n    \"groupby_vaxtype_vaxname\": {\n      \"composite\": {\n        \"sources\": [\n          {","1663":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Spleen Palpable\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n\n    # When\n    result = generate_elasticsearch_query(question=QUESTION)\n\n    # Then\n    assert result == EXPECTED_RESULT","10958":"{\n  \"size\": 25,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2020-03-01\",\n              \"lte\": \"2020-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"18790\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt:\",\n        answer=\"Answer:\",\n        notes=\"Clinical Notes:\",\n        context=CONTEXT,\n    )\n\n    # When\n    result = generate_elasticsearch_query(question)\n\n    #","9586":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"USPFIZER INC\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2022-01-01\",\n              \"lte\": \"2022-04-01\"\n            }\n          }\n        }\n      ]\n    }\n  }\n}\nPrompt: ### What is the average age of all patients who received a Pfizer vaccine in January 2022?]\nAnswer:\n{\n  \"size\": 0,\n  \"aggs\": {\n    \"avg_age\": {\n      \"avg\": {\n        \"field\": \"AGE_YRS\"\n      }\n    }\n  },\n  \"query\": {\n    \"bool\": {\n      \"filter\":","3029":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"HOSPDAYS\": {\n              \"gte\": 42.0,\n              \"lte\": 42.0\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": false\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    name=\"Document Name\",\n                    url=\"https:\/\/example.com\/document-name\",\n                    fields={\n                        \"field_one\": \"value one\",\n                        \"field_two\": \"value two\"\n                    }\n                )\n            ],","12996":"###[ what are the top 3 states by number of deaths?]\nAnswer:\n\n###[ how many patients have died in each state?]\nAnswer:\n\n###[ what is the average age of a patient who has died?]\nAnswer:\n\n###[ what is the average hospital days of a patient who has died?]\nAnswer:\n\n###[ what is the average age of a patient who has been cured?]\nAnswer:\n\n###[ what is the average hospital days of a patient who has been cured?]\nAnswer:\n\n###[ what is the average age of a patient who has had their second dose of a COVID-19 vaccine?]\nAnswer:\n\n###[ what is the average hospital days of a patient who has had their second dose of a COVID-19 vaccine?]\nAnswer:\n\n###[ what is the average age","9559":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"885080\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2020-03-01\",\n              \"lte\": \"2020-04-01\"\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a question in natural language\n    question = 'How many patients got vaccine manufactured by 885080?'\n\n    # WHEN generating the corresponding elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # THEN assert it matches","12634":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT.keyword\": {\n              \"value\": \"Mechanical\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT.keyword\": {\n              \"value\": \"ventilation\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test generating elasticsearch queries.\"\"\"\n    # Test a simple query\n    assert generate_elasticsearch_query(\n        'What is the age of the patient who developed diabetes?',\n        'VAERS_ID',\n        ['AGE_YRS'],\n        ['must']) == {'size': 10,\n                     'query':\n                         {'bool':\n                              {'filter':\n                                   [{'range':\n                                        {'REC","3136":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"vax_date\": {\n              \"gte\": \"06\/25\/2021\",\n              \"lte\": \"06\/25\/2021\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"vaers_id\"]\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n\n    # When the question contains multiple conditions\n    question = 'Give me all the patients who were diagnosed with COVID-19 before 03\/07\/2021.' \\\n              'And also give me their VAERS ID numbers'\n    expected_result = \"\"\"\nPrompt: ### Elasticsearch database with field names:\n# RECVDATE","266":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-03-28T00:00:00\",\n              \"lte\": \"2022-03-28T23:59:59\"\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"STATE\": \"VA\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'List all the records received on 03\/28\/2022.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)","2375":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2020-12-01\",\n              \"lte\": \"2020-12-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'Give me all the patients who died on 12\/01\/2020.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should match the expected result\n    assert json.loads(es_query) == json.loads(_expected_result)","2130":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"Decubitus Ulcer\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",","41":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-01-18T00:00:00\",\n              \"lte\": \"2022-01-18T23:59:59\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"RECVDATE\",\"STATE\",\"AGE_YRS\",\"VAERS_ID\",\"SEX\",\"SYMPTOM_TEXT\",\"DIED\",\"ER_VISIT\",\"L_THREAT\",\"HOSPITAL\",\"HOSPDAYS\",\"DISABLE\",\"VAX_DATE\",\"LAB_DATA\",\"OTHER_MEDS\",\"CUR_ILL\",\"HISTORY\",\"PRIOR_VAX\",\"TODAYS_DATE\",\"OFC_VISIT\",\"VAX_TYPE\",\"VAX","12981":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_TYPE\": \"JANSSEN\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HOSPITAL\",","9435":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_NAME\": \"<NAME>\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2022-01-01\",\n              \"lte\": \"2022-04-01\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'Give me all the patients who got USPFIZER INC202200123925 vaccine.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should match the expected result\n    assert json.loads(","4596":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-05-31\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"N\"\n          }\n        },\n        {\n          \"term\": {\n            \"OFC_VISIT\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"COUGH\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-05-31\"\n            }\n          }\n        },\n        {\n          \"range","3941":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"03\/23\/2022\",\n              \"lte\": \"03\/23\/2022\"\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"SYMPTOM_TEXT\": {\n              \"query\": \"adverse event\"\n            }\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n\n    # When generating the elasticsearch query for the question\n    es_query = generate_elasticsearch_query(question=QUESTION)\n\n    # Then it should match the expected result\n    assert json.loads(","1020":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"age_yrs\": {\n              \"gte\": 96.0,\n              \"lte\": 96.0\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"RECVDATE\", \"STATE\", \"AGE_YRS\", \"VAERS_ID\", \"SEX\", \"SYMPTOM_TEXT\", \"DIED\", \"ER_VISIT\", \"L_THREAT\", \"HOSPITAL\", \"HOSPDAYS\", \"DISABLE\", \"VAX_DATE\", \"LAB_DATA\", \"OTHER_MEDS\", \"CUR_ILL\", \"HISTORY\", \"PRIOR_VAX\", \"TODAYS_DATE\", \"OFC_VISIT\", \"VAX_TYPE\", \"VAX_MANU\", \"VAX_L","221":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-03-22T00:00:00\",\n              \"lte\": \"2022-03-22T23:59:59\"\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"STATE\": \"VA\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'List all the records received on 03\/22\/2022.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)","12837":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Penile size reduced\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"Is there any person who has died of COVID-19?\"\"\"\n\n    # When generating the corresponding Elasticsearch query\n    elasticsearch_query = generate_elasticsearch_query","10765":"{\n  \"size\": 5000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"02\/23\/2021\",\n              \"lte\": \"02\/23\/2021\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_DATE\": {\n              \"value\": \"02\/23\/2021\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question string, return the corresponding elasticsearch query\n    assert generate_elasticsearch_query(question_string) == expected_output","999":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"age_yrs\": {\n              \"gte\": 106.0,\n              \"lte\": 106.0\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"vax_type\": \"COMBO\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"\n    What are the symptoms of COVID-19?\n    \"\"\"\n\n    # When generating the corresponding Elasticsearch query\n    elasticsearch_query = generate_elasticsearch_query(question)\n\n    # Then it should match the expected result\n    assert json.loads(elasticsearch_query) == json.loads(_EXPECTED_ELASTICSEARCH_QUERY_)","702":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"IN\"\n          }\n        }\n      ]\n    }\n  },\n  \"_source\": {\n    \"includes\": []\n  },\n  \"aggs\": {\n    \"groupby_state\": {\n      \"terms\": {\n        \"field\": \"STATE\",\n        \"size\": 5\n      },\n      \"aggs\": {\n        \"groupby_recvdate\": {\n          \"date_histogram\": {\n            \"field\": \"RECVDATE\",\n            \"calendar_interval\": \"day\"\n          }\n        }\n      }\n    }\n  }\n}\nPrompt: ### What","2661":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-10-24T00:00:00\",\n              \"lte\": \"2021-10-24T23:59:59\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding Elasticsearch query\n\n    # When generating the Elasticsearch query for the question\n    elasticsearch_query = generate_elasticsearch_query(question=QUESTION)\n\n    # Then it should match the expected result\n    assert json.loads(elasticsearch_query)","3336":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"03\/30\/2020\",\n              \"lte\": \"03\/30\/2020\"\n            }\n          }\n        },\n        {\n          \"match_all\": {}\n        }\n      ],\n      \"must\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n\n    # When\n    result = generate_elasticsearch_query(question=QUESTION)\n\n    # Then\n    assert result == EXPECTED_RESULT","523":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"GU\"\n          }\n        }\n      ],\n      \"must\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [],\n    \"excludes\": []\n  },\n  \"stored_fields\": \"\",\n  \"script_fields\": {},\n  \"docvalue_fields\": [\n    {\n      \"field\": \"RECVDATE\",\n      \"format\": \"date_time\"\n    },\n    {\n      \"field\": \"TODAYS_DATE\",\n      \"format\": \"date_time\"\n    }\n  ],\n  \"sort\": [\n    {\n      \"TODAYS_DATE\": {\n        \"order\": \"desc\"\n      }\n    }\n  ]\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch","5467":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME\": \"isosorbide\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"VAERS_ID\"\n    ]\n  }\n}\n\"\"\"\n\n\ndef test_parse():\n    q = Question(qtext=QTEXT)\n\n    assert len(q.clauses) == 5\n    assert isinstance(q.clauses[0], RangeClause)\n    assert isinstance(q.clauses[1], TermClause)\n    assert isinstance(q","517":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"MH\"\n          }\n        }\n      ],\n      \"must\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [],\n    \"excludes\": []\n  },\n  \"stored_fields\": \"\",\n  \"script_fields\": {},\n  \"aggregations\": {}\n}\nPrompt: ### Elasticsearch database with field names:\n# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT","6141":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_TYPE\": \"Transplant\"\n          }\n        },\n        {\n          \"range\": {\n            \"TODAYS_DATE\": {\n              \"gte\": \"2020-08-31\",\n              \"lte\": \"2020-09-01\",\n              \"format\": \"yyyy-MM-dd\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"\n    What are the conditions that should be considered when ordering a COVID-19 vaccine?\n    \"\"\"\n\n    # When generating the corresponding Elasticsearch query\n    elasticsearch_query = generate_","9400":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_NAME\": \"<NAME>\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2022-03-04T00:00:00\",\n              \"lte\": \"2022-03-04T23:59:59\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'Give me all the patients who got USPFIZER INC202200072821 vaccine.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question","11904":"{\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        {\n          \"match\": {\n            \"VAX_NAME\": \"TYPHOID VI POLYSACCHARIDE (NO BRAND NAME)\"\n          }\n        },\n        {\n          \"match\": {\n            \"VAX_NAME\": \"INFLUENZA (SEASONAL) (FLUBLOK)\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = 'Give me all the patients who got TYPHOID VI POLYSACCHARIDE (NO BRAND NAME) vaccine and INFLUENZA (SEASONAL) (FLUBLOK) vaccine.'\n    expected_result = {\n        'query': {\n            'bool': {\n               'must': [\n                    {'match': {'VAX_NAME': '","8154":"{\n  \"size\": 5000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"lte\": \"2021-02-13\",\n              \"format\": \"yyyy-MM-dd\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_DATE\": {\n              \"value\": \"\",\n              \"boost\": 1\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given\n    question = Question(\n        prompt=\"Find all records who received a vaccine before on 2\/13\/2021.\",\n        answer=\"\",\n        context=None,\n        qid=\"test\",\n        metadata={\"field_names\": [\"RECVDATE\", \"STATE\", \"AGE_","6452":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT.keyword\": \"PULMONARY\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"VAERS_ID\"\n    ]\n  }\n}\n\"\"\"\n\n\ndef test_parse_question():\n    q = parse_question(QUESTION)\n\n    assert len(q[\"conditions\"]) == 5\n    assert len(q[\"key_clauses\"]) == 6\n    assert len(q[\"field_names\"]) == 18","11723":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-08-31\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"HPV\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME\": \"<NAME>\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"ALLERGIES\",\n      \"CUR_ILL\",\n      \"DIED\",\n      \"DISABLE\",\n      \"ER_VISIT\",\n      \"HOSPDAYS\",","6822":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"memory loss\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a question in natural language\n    question = 'Who has died?'\n\n    # WHEN generating the corresponding elasticsearch query\n    es_query = generate_elasticsearch_query(question)\n\n    # THEN assert it is correct\n    expected_es_query = json.loads(_EXPECTED_ES_QUERY_)\n    assert es_query == expected_es_query\n\n\ndef test_generate_elasticsearch_query_with_multiple","11882":"{\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        {\n          \"match\": {\n            \"VAX_NAME\": \"INFLUENZA (SEASONAL) (FLUENZ TETRA)\"\n          }\n        },\n        {\n          \"match\": {\n            \"VAX_NAME\": \"TETANUS TOXOID (NO BRAND NAME)\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = 'Give me all the patients who got INFLUENZA (SEASONAL) (FLUENZ TETRA) vaccine and TETANUS TOXOID (NO BRAND NAME) vaccine.'\n    expected_result = {\n        'query': {\n            'bool': {\n               'must': [\n                    {'match': {'VAX_NAME':","7961":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-04-10\",\n              \"lte\": \"2021-04-10\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_DATE\": {\n              \"value\": \"04\/10\/2021\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'give me all the patients who received at least one dose of Pfizer'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should return the correct query\n    assert","4179":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2020-01-01\",\n              \"lte\": \"2020-01-31\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"VAERS_ID\"\n    ]\n  }\n}\n\"\"\"\n\n\ndef test_parse_question():\n    q = parse_question(QUESTION)\n\n    assert len(q[\"conditions\"]) == 4\n    assert len(q[\"key_clauses\"]) == 5\n    assert len(q[\"field_names\"]) == 18\n    assert len(q[\"","11016":"###[ What is the average age of a person who has been injected with not known?]\nAnswer:\n\n###[ What is the percentage of people who have been injected with not known in each state?]\nAnswer:\n\n###[ What is the average number of days that a person has been hospitalized due to not known allergies?]\nAnswer:\n\n###[ What is the average number of days that a person has been hospitalized due to not known allergies in each state?]\nAnswer:\n\n###[ What is the average number of days that a person has been hospitalized due to not known allergies in each state?]\nAnswer:\n\n###[ What is the average number of days that a person has been hospitalized due to not known allergies in each state?]\nAnswer:\n\n###[ What is the average number of days that a person has been hospitalized due to not known all","5808":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 25,\n              \"lte\": 64\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"Enalapril\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    name=\"Document Name\",\n                    url=\"https:\/\/example.com\/document-name\",\n                    fields={\n                        \"field_","5197":"\"\"\"\n\ndef main():\n    # Create the parser\n    my_parser = argparse.ArgumentParser(description='Process some integers.')\n\n    # Add the arguments\n    my_parser.add_argument('question',\n                           metavar='QUESTION',\n                           type=str,\n                           help='Question to be answered')\n\n    args = my_parser.parse_args()\n    print(\"Question:\", args.question)\n    answer = process_question(args.question)\n    print(\"Answer:\")\n    pprint(answer)\n\n\nif __name__ == '__main__':\n    main()","8354":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2020-08-31\",\n              \"lte\": \"2020-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"POLIO VIRUS\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME\": \"INACTIVATED\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given","9536":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"USPFIZER INC\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2021-01-01\",\n              \"lte\": \"2021-12-31\"\n            }\n          }\n        }\n      ]\n    }\n  }\n}\nPrompt: ### What is the average age of all patients who received a Pfizer vaccine in 2021?]\nAnswer:\n{\n  \"size\": 0,\n  \"aggs\": {\n    \"avg_age\": {\n      \"avg\": {\n        \"field\": \"AGE_YRS\"\n      }\n    }\n  },\n  \"query\": {\n    \"bool\": {\n      \"filter\": [","7937":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-11-20\",\n              \"lte\": \"2021-11-20\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_DATE\": {\n              \"value\": \"2021-11-20\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n\n    # When\n    result = generate_elasticsearch_query(question=QUESTION)\n\n    # Then\n    assert result == EXPECTED_RESULT","7773":"\"\"\"\n\ndef main():\n    # Create a new parser object\n    my_parser = argparse.ArgumentParser(description='Process some integers.')\n\n    # Add positional arguments\n    my_parser.add_argument('question',\n                           metavar='QUESTION',\n                           type=str,\n                           help='Question to be answered')\n\n    # Add optional arguments\n    my_parser.add_argument('-v', '--verbose',\n                           action='store_true',\n                           help='Verbose output')\n\n    args = my_parser.parse_args()\n\n    if args.verbose:\n        print(\"Question:\", args.question)\n\n    # Get the answer\n    answer = process_question(args.question)\n\n    # Print the answer\n    print(\"\\nAnswer:\")\n    print(answer)\n\n\nif __name__ == \"__main__\":\n    main()","11134":"###[ What is the average age of a person who has been injected from ID? ]\nAnswer:\n\n###[ What is the percentage of deaths among those who received a vaccine from ID? ]\nAnswer:\n\n###[ What is the percentage of hospitalizations among those who received a vaccine from ID? ]\nAnswer:\n\n###[ What is the percentage of hospital days among those who received a vaccine from ID? ]\nAnswer:\n\n###[ What is the percentage of patients who died among those who received a vaccine from ID? ]\nAnswer:\n\n###[ What is the percentage of patients who were admitted to a hospital among those who received a vaccine from ID? ]\nAnswer:\n\n###[ What is the percentage of patients who had a life threatening event among those who received a vaccine from ID? ]\nAnswer:\n\n###[ What is the percentage of patients who are currently ill","1506":"{\n  \"size\": 5000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-01-19T00:00:00\",\n              \"lte\": \"2022-01-19T23:59:59\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, generate the corresponding elasticsearch query\n\n    # When generating the elasticsearch query\n    generated_es_query = generate_elasticsearch_query(question=QUESTION)\n\n    # Then it should match the expected result\n    assert json.loads(generated","49":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-03-11\",\n              \"lte\": \"2022-03-11\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"STATE\",\"AGE_YRS\",\"VAERS_ID\",\"SEX\",\"SYMPTOM_TEXT\",\"DIED\",\"ER_VISIT\",\"L_THREAT\",\"HOSPITAL\",\"HOSPDAYS\",\"DISABLE\",\"VAX_DATE\",\"LAB_DATA\",\"OTHER_MEDS\",\"CUR_ILL\",\"HISTORY\",\"PRIOR_VAX\",\"TODAYS_DATE\",\"OFC_VISIT\",\"VAX_TYPE\",\"VAX_MANU\",\"VAX_LOT\",\"VAX_DOSE_SERIES\",\"VAX_","11644":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"DTAP\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",","11205":"\"\"\"\n\ndef main():\n    # Parse command line arguments\n    parser = argparse.ArgumentParser(description='Process some integers.')\n    parser.add_argument('--question', type=str, default=\"What is the number of patients who received a COVID-19 vaccination?\",\n                        help='Question to answer')\n\n    args = parser.parse_args()\n    print(\"Question:\", args.question)\n\n    # Load data\n    df = pd.read_csv('vaersdata2021.csv')\n    df['RECVDATE'] = pd.to_datetime(df['RECVDATE'])\n    df['TODAYS_DATE'] = pd.to_datetime(df['TODAYS_DATE'])\n    df['VAX_DATE'] = pd.to_datetime(df['VAX_DATE'])\n    df['AGE_YRS'] = df['AGE_YRS'].astype(int)\n    df['HOSPDAYS'] = df['","9756":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-06-10\",\n              \"lte\": \"2021-06-10\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"STATE\",\"AGE_YRS\",\"VAERS_ID\",\"SEX\",\"SYMPTOM_TEXT\",\"DIED\",\"ER_VISIT\",\"L_THREAT\",\"HOSPITAL\",\"HOSPDAYS\",\"DISABLE\",\"VAX_DATE\",\"LAB_DATA\",\"OTHER_MEDS\",\"CUR_ILL\",\"HISTORY\",\"PRIOR_VAX\",\"TODAYS_DATE\",\"OFC_VISIT\",\"VAX_TYPE\",\"VAX_MANU\",\"VAX_LOT\",\"VAX_DOSE_SERIES\",\"VAX_","5798":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 25,\n              \"lte\": 64\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"quetiapine\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    name=\"Document Name\",\n                    url=\"https:\/\/example.com\/document-name\",\n                    fields={\n                        \"field_","425":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-05-14T00:00:00\",\n              \"lte\": \"2022-05-14T23:59:59\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        }\n      ]\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HOSPITAL\",\n      \"HOSPDAYS\",\n      \"DISABLE\",","1649":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Retroperitoneal Neoplasms\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"What are the symptoms of COVID-19?\"\"\"\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should return the correct query\n    assert es_query == EXPECTED_ES_QUERY","9734":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-02-03T00:00:00\",\n              \"lte\": \"2022-02-04T00:00:00\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"RECVDATE\",\"STATE\",\"AGE_YRS\",\"VAERS_ID\",\"SEX\",\"SYMPTOM_TEXT\",\"DIED\",\"ER_VISIT\",\"L_THREAT\",\"HOSPITAL\",\"HOSPDAYS\",\"DISABLE\",\"VAX_DATE\",\"LAB_DATA\",\"OTHER_MEDS\",\"CUR_ILL\",\"HISTORY\",\"PRIOR_VAX\",\"TODAYS_DATE\",\"OFC_VISIT\",\"VAX_TYPE\",\"VAX","10610":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAERS_ID\": \"fe5934\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": null,\n              \"lte\": null,\n              \"format\": \"yyyy-MM-dd||yyyy-MM||yyyy\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n    assert generate_elasticsearch_query(question=QUESTION1) == EXPECTED_QUERY1\n\n    assert generate_elasticsearch_query(question=QUESTION2) == EXPECTED_QUERY2\n\n    assert generate_elasticsearch_query(question=QUESTION3) == EXPECTED_QUERY3\n\n    assert","12606":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Motor dysfunction\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test generating elasticsearch queries.\"\"\"\n    # Test a simple query\n    assert generate_elasticsearch_query(SIMPLE_QUESTION) == EXPECTED_QUERY\n\n    # Test a complex query\n    assert generate_elasticsearch_query(COMPLEX_QUESTION) == COMPLEX_EXPECTED_QUERY\n\n\ndef test_get_field_names():\n    \"\"\"Test getting field names from questions.\"\"\"\n    assert get_field_names(SIMPLE_QUESTION) == [\"RECVDATE\", \"STATE\"]\n    assert get","12631":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 25,\n              \"lte\": 64\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"Tracheostomy malfunction\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test generating elasticsearch queries.\"\"\"\n    # Test a simple query\n    assert generate_elasticsearch_query(SIMPLE_QUESTION) == EXPECTED_QUERY\n\n    # Test a complex query\n    assert generate_elasticsearch_query(COMPLEX_QUESTION) == COMPLEX_EXPECTED_QUERY","6414":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Office Visit\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"DIED\",\n      \"HOSPITAL\",\n      \"HOSPDAYS\",\n      \"DISABLE\",\n      \"VAX_DATE\",\n      \"LAB_DATA\",\n      \"OTHER_MEDS\",\n      \"CUR_ILL\",\n      \"HISTORY\",\n      \"PRIOR_","7377":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 25,\n              \"lte\": 64,\n              \"format\": \"yyyy-MM-dd||epoch_millis\"\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"allergy\"\n          }\n        },\n        {\n          \"match\": {\n            \"ALLERGIES\": \"pilocarpine\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question","11227":"\"\"\"\n\ndef main():\n    # Parse command line arguments\n    parser = argparse.ArgumentParser(description='Process some integers.')\n    parser.add_argument('--question', type=str, default=\"What is the average age of patients who received a COVID-19 vaccination?\")\n    args = parser.parse_args()\n\n    print(\"Question:\", args.question)\n    print(\"Answer:\")\n    print(\"\")\n    print(\"Prompt: \", end='')\n    print(get_prompt(args.question))\n    print(\"Clinical Notes: \", end='')\n    print(get_clinical_notes(args.question))\n\n\nif __name__ == '__main__':\n    main()","11973":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_NAME.keyword\": {\n              \"value\": \"TDAP\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME.keyword\": {\n              \"value\": \"DTAP + IPV\"\n            }\n          }\n        }\n      ],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a list of conditions and a list of fields\n    conditions = [\"VAERS_ID\", \"DIED\"]\n    fields = [\"RECVDATE\", \"STATE\", \"AGE_YRS\", \"VAERS_ID\", \"SEX\", \"SYMPTOM_TEXT\", \"","968":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"age_yrs\": {\n              \"gte\": 15.0,\n              \"lte\": 15.0\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"vax_type\": \"COMBO\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a list of conditions and a list of fields\n    conditions = [\"VAERS_ID\", \"DIED\"]\n    fields = [\"RECVDATE\", \"STATE\", \"AGE_YRS\", \"VAERS_ID\", \"SEX\", \"SYMPTOM_TEXT\", \"DIED\", \"ER_VISIT\", \"L_THREAT\", \"","3931":"{\n  \"from\": 0,\n  \"size\": 30,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2015-12-04\",\n              \"lte\": \"2015-12-04\"\n            }\n          }\n        },\n        {\n          \"match_all\": {}\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'Find all the records where the adverse event started on 12\/04\/2015.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question)\n\n    # Then it should match the expected result\n    assert json.loads(es_query) ==","243":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-05-04T00:00:00\",\n              \"lte\": \"2022-05-04T23:59:59\"\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"SYMPTOM_TEXT\": {\n              \"query\": \"fever\"\n            }\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'List all the records received between 05\/04\/2022 and 06\/04\/2","12201":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"TX\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAERS_ID\": \"198567\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"COUGH\"\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"HOSPITAL\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"DISABLE\": \"Y\"\n          }\n        },","9949":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-04-16T00:00:00\",\n              \"lte\": \"2022-04-16T23:59:59\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return an Elasticsearch query that can be used to retrieve relevant documents.\n    assert generate_elasticsearch_query(question=QUESTION_1) == EXPECTED_QUERY_1\n\n    assert generate_elasticsearch_query(question=QUESTION_2) == EXPECTED_","3865":"{\n  \"from\": 0,\n  \"size\": 50,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-04-04\",\n              \"lte\": \"2021-04-04\"\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"SYMPTOM_TEXT\": {\n              \"query\": \"04\/04\/2021\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'Give me all the patients who were diagnosed with COVID-19.'\n\n    # When generating the corresponding Elasticsearch query\n    elasticsearch_query = generate_elasticsearch_query","2391":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2019-10-01\",\n              \"lte\": \"2019-10-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'give me all the patients who died on 01\/10\/2019'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should return the correct elasticsearch query\n    assert es_query == expected_es_query","75":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-05-20\",\n              \"lte\": \"2022-05-20\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"STATE\",\"AGE_YRS\",\"VAERS_ID\",\"SEX\",\"SYMPTOM_TEXT\",\"DIED\",\"ER_VISIT\",\"L_THREAT\",\"HOSPITAL\",\"HOSPDAYS\",\"DISABLE\",\"VAX_DATE\",\"LAB_DATA\",\"OTHER_MEDS\",\"CUR_ILL\",\"HISTORY\",\"PRIOR_VAX\",\"TODAYS_DATE\",\"OFC_VISIT\",\"VAX_TYPE\",\"VAX_MANU\",\"VAX_LOT\",\"VAX_DOSE_SERIES\",\"VAX_","12164":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"terms\": {\n            \"VAX_NAME\": [\n              \"Zoster Live\",\n              \"Tdvax\"\n            ]\n          }\n        }\n      ],\n      \"must_not\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [],\n    \"excludes\": []\n  },\n  \"stored_fields\": \"\",\n  \"aggregations\": {},\n  \"script_fields\": {},\n  \"docvalue_fields\": [\n    {\n      \"field\": \"RECVDATE\",\n      \"format\":","5538":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME\": \"CYTOMEL\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HOSPITAL\",\n      \"HOSPDAYS\",\n      \"DISABLE\",\n      \"VAX_DATE\",","11848":"{\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        {\n          \"match\": {\n            \"VAX_NAME\": \"<NAME>\"\n          }\n        },\n        {\n          \"match\": {\n            \"VAX_NAME\": \"ZOSTER\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = 'Give me all the patients who got MENINGOCOCCAL B (TRUMENBA) vaccine and ZOSTER (SHINGRIX) vaccine.'\n    expected_result = json.loads(EXPECTED_ELASTICSEARCH_QUERY)\n\n    # When\n    result = generate_elasticsearch_query(question)\n\n    # Then\n    assert result == expected_result\n\n\ndef test_generate_elasticsearch_query_with_multiple_conditions():\n    \"\"\"Test that a valid elasticsearch query","11309":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"AR\"\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"RA\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_TYPE\": \"COMBO\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HOSPITAL\",\n      \"HOSPDAYS\",\n      \"DISABLE\",\n      \"VAX_DATE\",\n      \"LAB_DATA\",\n      \"OTHER_MEDS\",","1453":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-04-10T00:00:00\",\n              \"lte\": \"2021-04-10T23:59:59\"\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"SYMPTOM_TEXT\": {\n              \"query\": \"completed their report\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n\n    # Given a question in natural language\n    question = 'Give me all the patients who have died.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should return","5150":"\"\"\"\n\ndef main():\n    # Create the parser\n    my_parser = argparse.ArgumentParser(description='Process some integers.')\n\n    # Add the arguments\n    my_parser.add_argument('question',\n                           metavar='QUESTION',\n                           type=str,\n                           help='Question to be answered')\n\n    args = my_parser.parse_args()\n    print(\"Question:\", args.question)\n    answer = process_question(args.question)\n    print(\"Answer:\")\n    pprint(answer)\n\n\nif __name__ == '__main__':\n    main()","12032":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_NAME.keyword\": {\n              \"value\": \"INFLUENZA (SEASONAL) (FLUBLOK)\",\n              \"boost\": 1\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME.keyword\": {\n              \"value\": \"INFLUENZA (SEASONAL) (FLUZONE HIGH-DOSE QUADRIVALENT)\",\n              \"boost\": 1\n            }\n          }\n        }\n      ],\n      \"should\": [],\n      \"must\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a list of conditions and a list of fields\n    conditions","324":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-02-15T00:00:00\",\n              \"lte\": \"2022-02-15T23:59:59\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"How many patients' records are received on 02\/15\/2022?\"\"\"\n\n    # When generating the corresponding Elasticsearch query\n    elasticsearch_query = generate_elasticsearch_query(question=question)\n\n    #","12295":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Interleukin Increased\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"What are the symptoms of COVID-19?\"\"\"\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question","10333":"\"\"\"\n\ndef main():\n    # load data\n    df = pd.read_csv('vaers-january-2021.csv')\n\n    # clean data\n    df['VAERS_ID'] = df['VAERS_ID'].astype(str).apply(lambda x: x.zfill(7))\n    df['VAX_DATE'] = pd.to_datetime(df['VAX_DATE'])\n    df['TODAYS_DATE'] = pd.to_datetime(df['TODAYS_DATE'])\n    df['AGE_YRS'] = df['VAX_DATE'].dt.year - df['TODAYS_DATE'].dt.year\n    df['AGE_YRS'] = df['AGE_YRS'].fillna(-999)\n    df['DIED'] = df['DIED'].replace({'Y': 'Yes', 'N': 'No'})\n    df['CUR_ILL'] = df['","5944":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 100,\n              \"lte\": 200\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"health st.\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    q = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    name=\"Document Name\",\n                    url=\"https:\/\/example.com\/document-name\",\n                    fields={\n                        \"field","3815":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2020-12-29\",\n              \"lte\": \"2020-12-29\"\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"SYMPTOM_TEXT\": {\n              \"query\": \"12\/29\/2020\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n    assert generate_elasticsearch_query(question=QUESTION_1) == EXPECTED_QUERY_1\n\n    assert generate_elasticsearch_query(question=QUESTION_2) == EXPECTED_QUERY_2","6249":"'''\n\ndef main():\n    # load data\n    df = pd.read_csv('vaers-january-2021.csv')\n\n    # clean data\n    df['VAERS_ID'] = df['VAERS_ID'].astype(str).apply(lambda x: x.zfill(7))\n    df['VAX_DATE'] = pd.to_datetime(df['VAX_DATE'])\n    df['TODAYS_DATE'] = pd.to_datetime(df['TODAYS_DATE'])\n    df['AGE_YRS'] = df['VAX_DATE'].dt.year - df['YEAR']\n    df['DIED'] = df['DIED'].fillna('')\n    df['HISTORY'] = df['HISTORY'].fillna('')\n    df['ALLERGIES'] = df['ALLERGIES'].fillna('')\n    df['PRIOR_VAX'] = df['PRIOR_VAX'].fillna","10795":"{\n  \"size\": 5000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAERS_ID\": \"1816022\"\n          }\n        },\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"1970-01-01\",\n              \"lte\": \"now\/m\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt:\",\n        answer=\"Answer:\",\n        notes=\"Notes:\",\n        context=CONTEXT,\n        start_line=34,\n        end_line=34,\n    )\n\n    expected_result = json.loads(EXPECTED_ELASTIC","5227":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"UNK\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HOSPITAL\",\n      \"HOSPDAYS\",\n      \"DISABLE\",\n      \"VAX_DATE\",\n      \"LAB_DATA\",\n      \"OTHER_MEDS\",\n      \"CUR_ILL\",\n      \"HISTORY\",\n      \"PRIOR_VAX\",\n      \"TODAYS_DATE\",\n      \"OFC_VISIT\",","12055":"{\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        {\n          \"match\": {\n            \"VAX_NAME\": \"INFLUENZA\"\n          }\n        },\n        {\n          \"match\": {\n            \"VAX_NAME\": \"INFLUENZA\"\n          }\n        }\n      ],\n      \"filter\": [],\n      \"should\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"List all the patients who got INFLUENZA (H1N1) (H1N1 (MONOVALENT) (UNKNOWN)) vaccine and INFLUENZA (SEASONAL) (NO BRAND NAME) vaccine.\"\"\"\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question)\n\n    # Then it should match the expected result\n    assert","6013":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        },\n        {\n          \"term\": {\n            \"ARTHRITIS\": true\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'List all the patients who are dignosed of arthritis.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question)\n\n    # Then it should match the expected result\n    assert json.loads(es_query) == json.loads(EXPECTED_ES_QUERY)","4686":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-06-01\",\n              \"lte\": \"2021-07-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 50,\n              \"lte\": 90\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"fever\"\n          }\n        },\n        {\n          \"match\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"match\": {\n            \"ER_VISIT\": \"Y\"\n          }\n        },\n        {\n          \"match","4997":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2020-03-01\",\n              \"lte\": \"2020-05-31\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME\": \"AstraZeneca (ChAdOx1 S recomb) 30mcg\/0.3ml dose conc for susp for inj multidose vials\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_TYPE\": \"mRNA\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_MANU\": \"AZD1222\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_LOT\": \"COVID","8099":"{\n  \"size\": 36879,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"lte\": \"2021-04-25\",\n              \"format\": \"yyyy-MM-dd\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_DATE\": {\n              \"value\": \"\",\n              \"boost\": 1\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given\n    question = Question(\n        prompt=\"Find all records who received a vaccine before on 4\/25\/2021.\",\n        answer=\"\",\n        context=CONTEXT,\n    )\n\n    # When\n    generated_query = generate_elasticsearch_query(question)\n\n    # Then\n    assert","2055":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"PULS\"\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"N\"\n          }\n        },\n        {\n          \"term\": {\n            \"HOSPITAL\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"DISABLE\": \"N\"\n          }\n        },\n        {\n          \"term\": {\n            \"CUR_ILL\": \"Y\"\n          }\n        },\n        {\n          \"term\":","660":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"NH\"\n          }\n        }\n      ],\n      \"must\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [],\n    \"excludes\": []\n  },\n  \"stored_fields\": \"\",\n  \"aggregations\": {},\n  \"script_fields\": {},\n  \"docvalue_fields\": [\n    {\n      \"field\": \"@timestamp\",\n      \"format\": \"date_time\"\n    }\n  ],\n  \"sort\": [\n    {\n      \"@timestamp\": {\n        \"order\": \"desc\"\n      }\n    }\n  ]\n}\n\"\"\"\n\n\ndef test_parse_question():\n    q = parse_question(QUESTION)\n\n    assert len(q[\"conditions\"]) == 1\n    assert q[\"conditions\"][0][\"key\"] == \"STATE\"\n    assert q[\"conditions\"][0","3549":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"09\/24\/2021\",\n              \"lte\": \"09\/24\/2021\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"N\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a question in natural language\n    question = 'How many patients were diagnosed with COVID-19?'\n\n    # WHEN generating an Elasticsearch query\n    es_query = generate_elasticsearch_query(question)\n\n    # THEN assert it is a valid Elasticsearch query\n    assert isinstance(es_query, dict)\n    assert es_query['size","1159":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"age_yrs\": {\n              \"gte\": 21.0,\n              \"lte\": 21.0\n            }\n          }\n        },\n        {\n          \"match_all\": {}\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    name=\"Document Name\",\n                    url=\"https:\/\/example.com\/document-name\",\n                    fields={\n                        \"field_one\": \"value one\",\n                        \"field_two\": \"value two\"\n                    }\n                )\n            ],\n            metadata={\"meta_key\": \"meta value","9479":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_NAME\": \"<NAME>\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2022-01-01\",\n              \"lte\": \"2022-01-31\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n\n    # When\n    result = generate_elasticsearch_query(question=QUESTION)\n\n    # Then\n    assert result == EXPECTED_RESULT","10394":"{\n  \"from\": 0,\n  \"size\": 25,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"TEVA\"\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"VAX_NAME\": \"<NAME>\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n\n    # When\n    result = generate_elasticsearch_query(question=QUESTION1)\n\n    # Then\n    assert result == EXPECTED_RESULT1","9419":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_NAME\": \"<NAME>\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2022-01-01\",\n              \"lte\": \"2022-05-31\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n\n    # When\n    result = generate_elasticsearch_query(question=QUESTION)\n\n    # Then\n    assert result == EXPECTED_RESULT","7879":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"05\/26\/21\",\n              \"lte\": \"05\/26\/21\"\n            }\n          }\n        },\n        {\n          \"match_all\": {}\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'give me all the patients who priviously got vaccinated'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should return the correct query\n    assert es_query == EXPECTED_ES_QUERY","7068":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Chiari Malformation\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\nPrompt: ### Elasticsearch database with field names:\n# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX","7404":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"ALLERGIES.keyword\": {\n              \"value\": \"milk\",\n              \"boost\": 1.0\n            }\n          }\n        }\n      ],\n      \"should\": [],\n      \"must\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HOSPITAL\",\n      \"HOSPDAYS\",\n      \"DISABLE\",\n      \"VAX_DATE\",\n      \"LAB_DATA\",\n      \"OTHER_MEDS\",\n      \"CUR_ILL\",\n      \"HISTORY","2479":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"09\/15\/2021\",\n              \"lte\": \"09\/15\/2021\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a list of conditions and a list of fields\n    conditions = [\"RECVDATE >= '09\/15\/2021'\", \"DIED == True\"]\n    fields = [\"RECVDATE\", \"STATE\", \"AGE_YRS\", \"VAERS_ID\", \"SEX\", \"SYMPTOM","7441":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 25,\n              \"lte\": 64\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"ALLERGY MEROPENEM\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = 'Show me all the patients who has an allergic to meropenem.'\n    expected_result = EXPECTED_ELASTICSEARCH_QUERY\n\n    # When","3444":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"vax_date\": {\n              \"gte\": \"05\/10\/2021\",\n              \"lte\": \"05\/10\/2021\"\n            }\n          }\n        },\n        {\n          \"match_all\": {}\n        }\n      ],\n      \"must\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding Elasticsearch query\n\n    # When generating the Elasticsearch query for the question,\n    # Then the generated Elasticsearch query should be correct\n    assert generate_elasticsearch_query(question=QUESTION_1) == EXPECTED_ES_QUERY_1\n    assert generate_elasticsearch_query(question=QUESTION_2) == EXPECTED_ES_QUERY_2\n    assert generate_","2405":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"1970-01-01\",\n              \"lte\": \"2022-04-25\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'give me all the patients who died on april twenty fifth'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should return the correct elasticsearch query\n    assert es_query == expected_es_query","143":"{\n  \"size\": 5000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-01-31\",\n              \"lte\": \"2022-01-31\"\n            }\n          }\n        },\n        {\n          \"match_all\": {}\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n\n    # When generating the elasticsearch query for the question\n    es_query = generate_elasticsearch_query(question=QUESTION)\n\n    # Then it should match the expected result\n    assert json.loads(es_query) == EXPECTED_ES_QUERY","10171":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"RAB\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",","9813":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-03-28T00:00:00\",\n              \"lte\": \"2022-03-28T23:59:59\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding Elasticsearch query\n    assert generate_elasticsearch_query(question=QUESTION_1) == EXPECTED_QUERY_1\n\n    assert generate_elasticsearch_query(question=QUESTION_2) == EXPECTED","7726":"\"\"\"\n\ndef main():\n    # Create a new parser object\n    my_parser = argparse.ArgumentParser(description='Process some integers.')\n\n    # Add positional arguments\n    my_parser.add_argument('question',\n                           metavar='QUESTION',\n                           type=str,\n                           help='Question to be answered')\n\n    # Add optional arguments\n    my_parser.add_argument('-v', '--verbose',\n                           action='store_true',\n                           help='Verbose output')\n\n    args = my_parser.parse_args()\n\n    if args.verbose:\n        print(\"Question:\", args.question)\n\n    # Get the answer\n    answer = process_question(args.question)\n\n    # Print the answer\n    print(\"\\nAnswer:\")\n    print(answer)\n\n\nif __name__ == \"__main__\":\n    main()","3645":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"1949-01-01\",\n              \"lte\": \"1949-01-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt:\",\n        answer=\"Answer:\",\n        notes=\"Notes:\",\n        context=CONTEXT,\n        start_line=23,\n        end_line=56,\n    )\n\n    expected_result = {\n        \"size\": 0,\n        \"query\": {\n            \"bool\": {\n                \"filter\": [","11999":"{\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        {\n          \"match\": {\n            \"VAX_NAME\": \"DTaP+HIB\"\n          }\n        },\n        {\n          \"match\": {\n            \"VAX_NAME\": \"HIB (ACTHIB)\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(QUESTION_STR)\n\n    # When\n    result = generate_elasticsearch_query(question)\n\n    # Then\n    assert isinstance(result, dict)\n    assert 'query' in result\n    assert 'bool' in result['query']\n    assert'must' in result['query']['bool']\n    musts = result['query']['bool']['must']\n    assert len(musts) == 2\n    assert {'match': {'VAX_NAME': 'DTa","4342":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-05\",\n              \"lte\": \"2021-04-06\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"\n    Prompt: ### Elasticsearch database with field names:\n    # RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSP","9745":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"03\/19\/2022\",\n              \"lte\": \"03\/19\/2022\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"STATE\",\"AGE_YRS\",\"VAERS_ID\",\"SEX\",\"SYMPTOM_TEXT\",\"DIED\",\"ER_VISIT\",\"L_THREAT\",\"HOSPITAL\",\"HOSPDAYS\",\"DISABLE\",\"VAX_DATE\",\"LAB_DATA\",\"OTHER_MEDS\",\"CUR_ILL\",\"HISTORY\",\"PRIOR_VAX\",\"TODAYS_DATE\",\"OFC_VISIT\",\"VAX_TYPE\",\"VAX_MANU\",\"VAX_LOT\",\"VAX_DOSE_SERIES\",\"VAX_","4385":"{\n  \"size\": 5000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-08\",\n              \"lte\": \"2021-04-07\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"List all the patients who died after receiving at least one of these two vaccines: Covid-19 mRNA vaccine and Pfizer Comirnaty.\"\"\"\n\n    # When generating the corresponding Elasticsearch query\n    elasticsearch_query = generate_elasticsearch_query(question","773":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"age_yrs\": {\n              \"gte\": 89.0,\n              \"lte\": 89.0\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"RECVDATE\", \"STATE\", \"AGE_YRS\", \"VAERS_ID\", \"SEX\", \"SYMPTOM_TEXT\", \"DIED\", \"ER_VISIT\", \"L_THREAT\", \"HOSPITAL\", \"HOSPDAYS\", \"DISABLE\", \"VAX_DATE\", \"LAB_DATA\", \"OTHER_MEDS\", \"CUR_ILL\", \"HISTORY\", \"PRIOR_VAX\", \"TODAYS_DATE\", \"OFC_VISIT\", \"VAX_TYPE\", \"VAX_MANU\", \"VAX_L","1740":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Encephalitis, immune mediated\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'Give me all the patients who have Immune-mediated encephalitis after the vaccination","12336":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Cellulitis\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = 'Give me all the patients who have Cellulitis after vaccine.'\n    expected_result = json.","313":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-01-29T00:00:00\",\n              \"lte\": \"2022-01-29T23:59:59\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"How many patients' records are received on 01\/29\/2022?\"\"\"\n\n    # When generating the corresponding Elasticsearch query\n    elasticsearch_query = generate_elasticsearch_query(question=question)\n\n    #","2626":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-06-07\",\n              \"lte\": \"2021-06-07\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n\n    # When generating the elasticsearch query for the question\n    es_query = generate_elasticsearch_query(question=QUESTION)\n\n    # Then it should match the expected result\n    assert json.loads(es_query) == EXPECTED_ES_QUERY","8590":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"lte\": \"2021-05-31\",\n              \"format\": \"yyyy-MM-dd\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"TETANUS TOXOID AND\/OR TUBULAR DYSFUNCTION OF THE LUNG\"\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"TODAYS_DATE\": \"2021-06-07\"\n          }\n        },\n        {\n          \"term\": {\n            \"OFC_","6065":"{\n  \"size\": 25,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 10,\n              \"lte\": 10\n            }\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    name=\"Document Name\",\n                    url=\"https:\/\/example.com\/document-name\",\n                    fields={\n                        \"field_one\": \"value one\",\n                        \"field_two\": \"value two\"","7564":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"OFC_VISIT\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"HISTORY\": \"PVC\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HOSPITAL\",\n      \"HOSPDAYS\",\n      \"DISABLE\",\n      \"VAX_DATE\",\n      \"LAB_DATA\",\n      \"OTHER_ME","10203":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": false\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME\": \"<NAME>\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a list of conditions and a list of fields\n    conditions = [\"DIED=false\", \"VAX_NAME=<NAME>\"]\n    fields = [\"RECVDATE\", \"STATE\", \"AGE_YRS\", \"VAERS_ID\", \"SEX\",\n              \"SYMPTOM_TEXT\", \"DIED\", \"ER_VISIT\", \"L_THREAT\", \"HOSPITAL\",\n              \"HOSPDAYS","4733":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"N\"\n          }\n        },\n        {\n          \"term\": {\n            \"OFC_VISIT\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"COUGH\"\n          }\n        },\n        {\n          \"term\": {\n            \"AGE_YRS\": 57\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"TX\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_TYPE\": \"JANSSEN","7487":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"match\": {\n            \"ALLERGIES\": \"deletion\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",","10243":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_NAME.keyword\": \"FLUX\"\n          }\n        },\n        {\n          \"range\": {\n            \"TODAYS_DATE\": {\n              \"gte\": \"2020-03-01\",\n              \"lte\": \"2020-04-01\",\n              \"format\": \"yyyy-MM-dd\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HOSPITAL\",","9524":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"USSA2022SA078676\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2021-09-01\",\n              \"lte\": \"2021-09-30\"\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"How many patients got vaccine manufactured by USSA2022SA078676?\"\"\"\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it","10503":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_LOT\": \"L016284\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\n    \"RECVDATE\",\n    \"STATE\",\n    \"AGE_YRS\",\n    \"VAERS_ID\",\n    \"SEX\",\n    \"SYMPTOM_TEXT\",\n    \"DIED\",\n    \"ER_VISIT\",\n    \"L_THREAT\",\n    \"HOSPITAL\",\n    \"HOSPDAYS\",\n    \"DISABLE\",\n    \"VAX_DATE\",\n    \"LAB_DATA\",\n    \"OTHER_MEDS\",\n    \"CUR_ILL\",\n    \"HISTORY\",\n    \"PRIOR_VAX\",\n    \"TODAYS_DATE\",\n    \"OFC_VISIT\",\n    \"VAX_TYPE\",\n    \"","12951":"###[ Which states have the highest number of deaths due to COVID-19? ]\nAnswer:\n\n###[ What are the top reasons people die in the United States due to COVID-19? ]\nAnswer:\n\n###[ How many days did it take patients who died of COVID-19 to receive their vaccines? ]\nAnswer:\n\n###[ What is the average length of stay for a patient who died of COVID-19? ]\nAnswer:\n\n###[ What is the average number of days between receiving a COVID-19 vaccine and dying? ]\nAnswer:\n\n###[ What is the average number of days between admission and death for patients who received at least one dose of COVID-19 vaccine? ]\nAnswer:\n\n###[ What is the average number of days between admission and recovery for patients who received at least one dose of COVID-1","5344":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 25,\n              \"lte\": 64\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"aspirin\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_parse_question():\n    q = Question(QUESTION)\n\n    assert len(q.clauses) == 3\n    assert isinstance(q.clauses[0], Clause)\n    assert isinstance(q.clauses[1], Clause)\n    assert isinstance(q.clauses[2], Clause)\n\n    assert","12334":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Fall\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'Give me all the patients who have Fall after vaccine.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should match the expected result\n    assert json.","2156":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Fungal pharyngitis\"\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SY","4333":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-09\",\n              \"lte\": \"2021-08-09\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"AGE_YRS\": 70\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": false\n          }\n        },\n        {\n          \"term\": {\n            \"HOSPDAYS\": 36534.0\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural","3771":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"06\/08\/2021\",\n              \"lte\": \"06\/08\/2021\"\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"SYMPTOM_TEXT\": {\n              \"query\": \"onset date of adverse event symptoms\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n\n    # When\n    result = generate_elasticsearch_query(question=QUESTION)\n\n    # Then\n    assert result == EXPECTED_RESULT","9519":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"USPFIZER INC\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2021-01-01\",\n              \"lte\": \"2021-12-31\"\n            }\n          }\n        }\n      ]\n    }\n  }\n}\nPrompt: ### What is the average age of all patients who received a Pfizer vaccine in 2021?]\nAnswer:\n{\n  \"size\": 0,\n  \"aggs\": {\n    \"avg_age\": {\n      \"avg\": {\n        \"field\": \"AGE_YRS\"\n      }\n    }\n  },\n  \"query\": {\n    \"bool\": {\n      \"filter\": [","12297":"{\n  \"from\": 0,\n  \"size\": 25,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"1980-01-01\",\n              \"lte\": \"2021-04-30\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Immunophenotyping\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'What are the symptoms of COVID-19?'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch","2512":"{\n  \"size\": 34768,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-09-25T00:00:00\",\n              \"lte\": \"2021-09-25T23:59:59\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a question in natural language\n    question = 'Find all vaccine recipients who died on 09\/25\/2021.'\n\n    # WHEN generating an Elasticsearch query\n    es","7930":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"vax_date\": {\n              \"gte\": \"05-07-2021\",\n              \"lte\": \"05-07-2021\"\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"vax_name\": \"<NAME>\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n\n    # When\n    result = generate_elasticsearch_query(question=QUESTION)\n\n    # Then\n    assert result == EXPECTED_RESULT","2223":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Synovial\"\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"HOSPITAL\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"DISABLE\": \"N\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_DATE\": \"2021-08-31\"","7633":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": false\n          }\n        },\n        {\n          \"term\": {\n            \"ALLERGIES\": \"Erythromycin\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HOSPITAL\",\n      \"HOSPDAYS\",\n      \"DISABLE\",\n      \"VAX_DATE\",\n      \"LAB_DATA\",\n      \"OTHER_MEDS\",\n      \"CUR_ILL\",\n      \"HISTORY\",\n      \"PRIOR","12040":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_NAME.keyword\": {\n              \"value\": \"INFLUENZA (SEASONAL) (FLUZONE QUADRIVALENT)\",\n              \"boost\": 1\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME.keyword\": {\n              \"value\": \"INFLUENZA (SEASONAL) (FLUBLOK QUADRIVALENT)\",\n              \"boost\": 1\n            }\n          }\n        }\n      ],\n      \"should\": [],\n      \"must\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = 'List all the patients who got INFL","2834":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"HOSPDAYS\": {\n              \"gte\": 12.0,\n              \"lte\": 12.0\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"RECVDATE\", \"STATE\", \"AGE_YRS\", \"VAERS_ID\", \"SEX\", \"SYMPTOM_TEXT\", \"DIED\", \"ER_VISIT\", \"L_THREAT\", \"HOSPITAL\", \"HOSPDAYS\", \"DISABLE\", \"VAX_DATE\", \"LAB_DATA\", \"OTHER_MEDS\", \"CUR_ILL\", \"HISTORY\", \"PRIOR_VAX\", \"TODAYS_DATE\", \"OFC_VISIT\", \"VAX_TYPE\", \"VAX_MANU\", \"VAX_LOT","5790":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 25,\n              \"lte\": 64\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"latanoprost liquid eyedrop\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    name=\"Document Name\",\n                    url=\"","3315":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"01\/28\/2022\",\n              \"lte\": \"01\/28\/2022\"\n            }\n          }\n        },\n        {\n          \"match_all\": {}\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'Give me all the patients who got vaccines on 01\/28\/2022.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should match the expected result\n    assert json.loads(es_query) == json.loads(_expected_result)","8908":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"terms\": {\n            \"_id\": [\n              \"123456789\",\n              \"123456788\"\n            ]\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt:\",\n        answer=Answer(\n            text=\"Answer:\",\n            value=[\n                Value(\n                    type=ValueType.STRING,\n                    content=\"123456789\",\n                ),\n                Value(\n                    type=ValueType.STRING,\n                    content=\"123456788\",","11728":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME\": \"Meningococcal B (Bexsero)\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",","7922":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-06\",\n              \"lte\": \"2021-08-06\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_DATE\": {\n              \"value\": \"08\\\/06\\\/2021\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'give me all the patients who received at least one dose of Pfizer'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should return the correct query\n    assert","4055":"{\n  \"size\": 5000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-12-11\",\n              \"lte\": \"2021-12-11\"\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"SYMPTOM_TEXT\": {\n              \"query\": \"adverse event\"\n            }\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n\n    # When generating the elasticsearch query for the question\n    es_query = generate_elasticsearch_query(question=QUESTION)\n\n    # Then it should match the expected result\n    assert json.loads(es","4418":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-26\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"\n    Prompt: ### Elasticsearch database with field names:\n    # RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSP","2525":"{\n  \"size\": 5000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-10-01\",\n              \"lte\": \"2021-10-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n\n    # When generating the elasticsearch query for the question\n    es_query = generate_elasticsearch_query(question=QUESTION)\n\n    # Then it should match the expected result\n    assert json.loads(es_query) == EXPECTED_ES_QUERY","9597":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"USJNJFOC20220110022\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2021-12-31\",\n              \"lte\": \"2021-12-31\"\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n    assert generate_elasticsearch_query(question=QUESTION_1) == EXPECTED_QUERY_1\n\n    assert generate_elasticsearch_query(question=QUESTION_2) == EXPECTED_QUERY_2\n\n    assert generate_elasticsearch_query(question","10063":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-12-15T00:00:00\",\n              \"lte\": \"2021-12-15T23:59:59\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        }\n      ]\n    }\n  }\n}\nPrompt: ### How many people were vaccinated on December 15th in Virginia?\n# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA","2918":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"HOSPDAYS\": {\n              \"gte\": 4.0,\n              \"lte\": 4.0\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": false\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'List all the vaccine recipients have hospitalized for 4.0 days.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should return the expected elasticsearch query\n    assert json.loads(es_query) == json.loads(_expected_es_query_)","10895":"{\n  \"size\": 20,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAERS_ID\": \"FJ1614\"\n          }\n        },\n        {\n          \"range\": {\n            \"TODAYS_DATE\": {\n              \"gte\": \"2021-03-08\",\n              \"lte\": \"2021-03-08\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question string\n    question = \"\"\"\nPrompt: ### Elasticsearch database with field names:\n# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSP","4423":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-01\",\n              \"lte\": \"2021-08-31\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"List all the patients who died during the period of time between Aug 1st, 2021 and Aug 31st, 2021.\"\"\"\n\n    # When generating the corresponding Elasticsearch query\n    elasticsearch_query = generate_elasticsearch_query(question=","2382":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"03\/16\/2021\",\n              \"lte\": \"03\/16\/2021\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n\n    # When\n    result = generate_elasticsearch_query(question=QUESTION)\n\n    # Then\n    assert result == EXPECTED_RESULT","115":"{\n  \"size\": 5000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-01-19\",\n              \"lte\": \"2022-01-19\"\n            }\n          }\n        },\n        {\n          \"match_all\": {}\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n\n    # When generating the elasticsearch query for the question\n    es_query = generate_elasticsearch_query(question=QUESTION)\n\n    # Then it should match the expected result\n    assert json.loads(es_query) == EXPECTED_ES_QUERY","9712":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-02-11\",\n              \"lte\": \"2022-02-11\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"STATE\",\"AGE_YRS\",\"VAERS_ID\",\"SEX\",\"SYMPTOM_TEXT\",\"DIED\",\"ER_VISIT\",\"L_THREAT\",\"HOSPITAL\",\"HOSPDAYS\",\"DISABLE\",\"VAX_DATE\",\"LAB_DATA\",\"OTHER_MEDS\",\"CUR_ILL\",\"HISTORY\",\"PRIOR_VAX\",\"TODAYS_DATE\",\"OFC_VISIT\",\"VAX_TYPE\",\"VAX_MANU\",\"VAX_LOT\",\"VAX_DOSE_SERIES\",\"VAX_","4995":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"TUBERCULOSIS TEST\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"DIED\",\n      \"HOSPITAL\",\n      \"HOSPDAYS\",\n      \"DISABLE\",\n      \"LAB_DATA\",\n      \"OTHER_MEDS\",\n      \"CUR_ILL\",\n      \"HISTORY\",\n      \"PRIOR_VAX","9606":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"USPFIZER INC\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2021-01-01\",\n              \"lte\": \"2021-12-31\"\n            }\n          }\n        }\n      ]\n    }\n  }\n}\nPrompt: ### What is the average age of all patients who received a Pfizer vaccine in 2021?]\nAnswer:\n{\n  \"size\": 0,\n  \"aggs\": {\n    \"avg_age\": {\n      \"avg\": {\n        \"field\": \"AGE_YRS\"\n      }\n    }\n  },\n  \"query\": {\n    \"bool\": {\n      \"filter\": [","10352":"\"\"\"\n\ndef main():\n    # load data\n    df = pd.read_csv(os.path.join('data', 'vaers-january-2021.csv'))\n\n    # clean data\n    df['RECVDATE'] = pd.to_datetime(df['RECVDATE'])\n    df['SYMPTOM_TEXT'].fillna('', inplace=True)\n    df['ALLERGIES'].fillna('', inplace=True)\n    df['HISTORY'].fillna('', inplace=True)\n    df['PRIOR_VAX'].fillna('', inplace=True)\n    df['TODAYS_DATE'].fillna('', inplace=True)\n    df['VAX_MANU'].fillna('', inplace=True)\n    df['VAX_LOT'].fillna('', inplace=True)\n    df['VAX_NAME'].fillna('', inplace=True)\n    df['VAX_TYPE'].fillna('', inplace=True)\n    df['OTHER_MEDS'].","1127":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"age_yrs\": {\n              \"gte\": 18.0,\n              \"lte\": 18.0\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"symptom_text\": \"fever\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    name=\"Document Name\",\n                    url=\"https:\/\/example.com\/document-name\",\n                    fields={\n                        \"field_one\": \"value one\",\n                        \"field_two\": \"value two\",\n                    },","3404":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2022-04-06\",\n              \"lte\": \"2022-04-06\"\n            }\n          }\n        },\n        {\n          \"match_all\": {}\n        }\n      ],\n      \"must\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding Elasticsearch query\n\n    # When generating the Elasticsearch query for the question,\n    # Then the generated Elasticsearch query should be correct\n    assert generate_elasticsearch_query(question=QUESTION_1) == EXPECTED_ES_QUERY_1\n    assert generate_elasticsearch_query(question=QUESTION_2) == EXPECTED_ES_QUERY_2","10738":"{\n  \"from\": 0,\n  \"size\": 25,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"_id\": \"P100371939\"\n          }\n        },\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-01\",\n              \"lte\": \"2021-08-31\",\n              \"format\": \"yyyy-MM-dd||yyyy-MM||yyyy\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question string, return the corresponding elasticsearch query\n    assert generate_elasticsearch_query(question_string) == expected_output","10524":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_LOT\": \"01082A\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"RECVDATE\", \"STATE\", \"AGE_YRS\", \"VAERS_ID\", \"SEX\", \"SYMPTOM_TEXT\", \"DIED\", \"ER_VISIT\", \"L_THREAT\", \"HOSPITAL\", \"HOSPDAYS\", \"DISABLE\", \"VAX_DATE\", \"LAB_DATA\", \"OTHER_MEDS\", \"CUR_ILL\", \"HISTORY\", \"PRIOR_VAX\", \"TODAYS_DATE\", \"OFC_VISIT\", \"VAX_TYPE\", \"VAX_MANU\", \"VAX_LOT\", \"VAX_DOSE_SERIES\", \"","9229":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_NAME\": \"USPFIZER INC202101857273\"\n          }\n        },\n        {\n          \"range\": {\n            \"TODAYS_DATE\": {\n              \"gte\": \"2021-04-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"What is the number of records that the vaccine recipient got USPFIZER INC202101857273 vaccine.\"\"\"\n\n    # When generating the elasticsearch query\n    es_","1817":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Atelectasis\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"\n    Prompt: ### Elasticsearch database with field names:\n    # RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SY","9075":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"USPFIZER INC\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\n    \"RECVDATE\",\n    \"STATE\",\n    \"AGE_YRS\",\n    \"VAERS_ID\",\n    \"SEX\",\n    \"SYMPTOM_TEXT\",\n    \"DIED\",\n    \"ER_VISIT\",\n    \"L_THREAT\",\n    \"HOSPITAL\",\n    \"HOSPDAYS\",\n    \"DISABLE\",\n    \"VAX_DATE\",\n    \"LAB_DATA\",\n    \"OTHER_MEDS\",\n    \"CUR_ILL\",\n    \"HISTORY\",\n    \"PRIOR_VAX\",\n    \"TODAYS_DATE\",\n    \"OFC_VISIT\",\n    \"VAX_TYPE\",\n    \"V","5052":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME\": \"Moderna COVID-19 mRNA Vaccine Moderna COVID-19 mRNA Vaccine\"\n          }\n        },\n        {\n          \"exists\": {\n            \"field\": \"LAB_DATA\"\n          }\n        },\n        {\n          \"nested\": {\n            \"path\": \"LAB_DATA\",\n            \"query\": {\n              \"match\": {\n                \"LAB_DATA.RESULT\": \"GFR\"\n              }\n            }\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },","12554":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"TX\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Injection Site Irritation\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"DIED\",\n      \"HOSPITAL\",\n      \"HOSPDAYS\",\n      \"DISABLE\",\n      \"CUR_ILL\",\n      \"HISTORY\",\n      \"PRIOR_VAX\",\n      \"TODAYS_DATE\",\n      \"OFC_VISIT\",","11209":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"AR\"\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"GA\"\n          }\n        }\n      ],\n      \"must\": [\n        {\n          \"match\": {\n            \"VAX_TYPE\": \"COMBO\"\n          }\n        }\n      ]\n    }\n  },\n  \"_source\": {\n    \"includes\": []\n  },\n  \"aggs\": {\n    \"agg_1\": {\n      \"terms\": {\n        \"field\": \"STATE\",\n        \"size\": 25\n      }\n    }\n  }\n}\n\"\"\"\n\n\ndef test_parse_question():\n    q = parse_question(QUESTION)\n\n    assert len(q[\"filters\"]) == 2\n    assert q[\"filters\"][0][\"key\"] == \"STATE\"\n    assert q[\"filters\"][0][\"","3277":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"06\/15\/2021\",\n              \"lte\": \"06\/15\/2021\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"RECVDATE\",\"STATE\",\"AGE_YRS\",\"VAERS_ID\",\"SEX\",\"SYMPTOM_TEXT\",\"DIED\",\"ER_VISIT\",\"L_THREAT\",\"HOSPITAL\",\"HOSPDAYS\",\"DISABLE\",\"VAX_DATE\",\"LAB_DATA\",\"OTHER_MEDS\",\"CUR_ILL\",\"HISTORY\",\"PRIOR_VAX\",\"TODAYS_DATE\",\"OFC_VISIT\",\"VAX_TYPE\",\"VAX_MANU\",\"VAX_LOT\",\"VAX_DOSE_SER","10200":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": false\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 18,\n              \"lte\": 95\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"MENB\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a question in natural language\n    question = 'What are the symptoms of meningitis?'\n\n    # WHEN generating the corresponding elasticsearch query\n    es","3924":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"1921-12-23T00:00:00\",\n              \"lte\": \"1921-12-23T23:59:59\"\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"SYMPTOM_TEXT\": {\n              \"query\": \"12\/23\/1921\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n    assert generate_elasticsearch_query(question=QUESTION_1) == EXPECTED_QUERY_1\n\n    assert generate_elasticsearch","10807":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2020-05-01\",\n              \"lte\": \"2020-06-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"043\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question string, return the corresponding elasticsearch query\n    assert generate_elasticsearch_query(question_string) == expected_es_query","7815":"\"\"\"\n\ndef main():\n    # Create a new parser object\n    my_parser = argparse.ArgumentParser(description='Process some integers.')\n\n    # Add positional arguments\n    my_parser.add_argument('question',\n                           metavar='QUESTION',\n                           type=str,\n                           help='Question to be answered')\n\n    # Add optional arguments\n    my_parser.add_argument('-v', '--verbose',\n                           action='store_true',\n                           help='Verbose output')\n\n    args = my_parser.parse_args()\n\n    if args.verbose:\n        print(\"Question:\", args.question)\n\n    # Get the answer\n    answer = process_question(args.question)\n\n    # Print the answer\n    print(\"\\nAnswer:\")\n    print(answer)\n\n\nif __name__ == \"__main__\":\n    main()","3156":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"vax_date\": {\n              \"gte\": \"03\/22\/2022\",\n              \"lte\": \"03\/22\/2022\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"vaers_id\"]\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n\n    # When the question contains multiple conditions\n    question = 'Give me all the patients who were diagnosed with COVID-19 before 03\/22\/2022.' \\\n              'And also give me their VAERS ID numbers'\n    expected_result = \"\"\"\nPrompt: ### Elasticsearch database with field names:\n# RECVDATE","10578":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_DOSE_SERIES\": \"066h21a\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"01-01-2021\",\n              \"lte\": \"31-12-2021\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = 'Give me all the patients who got vaccine from 066h21a 1\/2 dos.'\n    expected_result = json.loads(EXPECTED_ELASTICSEARCH_QUERY)\n\n    # When\n    result = generate","10006":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-11-04T00:00:00\",\n              \"lte\": \"2021-11-04T23:59:59\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        }\n      ]\n    }\n  }\n}\nPrompt: ### How many people were vaccinated on 11\/04\/2021 in Virginia?\nAnswer:\n{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-11","2824":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"HOSPDAYS\": {\n              \"gte\": 50.0,\n              \"lte\": 50.0\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"RECVDATE\", \"STATE\", \"AGE_YRS\", \"VAERS_ID\", \"SEX\", \"SYMPTOM_TEXT\", \"DIED\", \"ER_VISIT\", \"L_THREAT\", \"HOSPITAL\", \"HOSPDAYS\", \"DISABLE\", \"VAX_DATE\", \"LAB_DATA\", \"OTHER_MEDS\", \"CUR_ILL\", \"HISTORY\", \"PRIOR_VAX\", \"TODAYS_DATE\", \"OFC_VISIT\", \"VAX_TYPE\", \"VAX_MANU\", \"VAX_LOT","564":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"OK\"\n          }\n        }\n      ],\n      \"must\": []\n    }\n  },\n  \"_source\": [\"RECVDATE\", \"STATE\", \"AGE_YRS\", \"VAERS_ID\", \"SEX\", \"SYMPTOM_TEXT\", \"DIED\", \"ER_VISIT\", \"L_THREAT\", \"HOSPITAL\", \"HOSPDAYS\", \"DISABLE\", \"VAX_DATE\", \"LAB_DATA\", \"OTHER_MEDS\", \"CUR_ILL\", \"HISTORY\", \"PRIOR_VAX\", \"TODAYS_DATE\", \"OFC_VISIT\", \"VAX_TYPE\", \"VAX_MANU\", \"VAX_LOT\", \"VAX_DOSE_SERIES\", \"VAX_NAME\", \"ALLERGIES\"]\n}\n\"\"\"","1577":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": {\n              \"value\": \"Metabolic alkalosis\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'What are the symptoms of COVID-19?'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should return the expected elasticsearch query\n    assert es_query == EXPECTED_ES_","8228":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-02-11T00:00:00\",\n              \"lte\": \"2021-02-11T23:59:59\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that the function returns correct elasticsearch query.\"\"\"\n\n    # GIVEN a list of conditions and a list of fields\n    conditions = [\"RECVDATE >= '2021-02-11' AND RECVDATE <= '2021-02-11'\",\n                  \"DIED ==","10017":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-03-22\",\n              \"lte\": \"2022-03-22\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt:\",\n        answer=\"Answer:\",\n        notes=\"Notes:\",\n        context=CONTEXT,\n    )\n\n    # When\n    result = generate_elasticsearch_query(question)\n\n    # Then\n    assert result == EXPECTED_ELASTICSEARCH_QUERY\n\n\nEXPECTED_SQLITE_QUERY = \"\"\"--","5355":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 25,\n              \"lte\": 64\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"vitamin b\"\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"vitamin c\"\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"vitamin d\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_parse_question():\n    assert parse_question(test_question) == expected_result","749":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"age_yrs\": {\n              \"gte\": 88.0,\n              \"lte\": 88.0\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"RECVDATE\", \"STATE\", \"AGE_YRS\", \"VAERS_ID\", \"SEX\", \"SYMPTOM_TEXT\", \"DIED\", \"ER_VISIT\", \"L_THREAT\", \"HOSPITAL\", \"HOSPDAYS\", \"DISABLE\", \"VAX_DATE\", \"LAB_DATA\", \"OTHER_MEDS\", \"CUR_ILL\", \"HISTORY\", \"PRIOR_VAX\", \"TODAYS_DATE\", \"OFC_VISIT\", \"VAX_TYPE\", \"VAX_MANU\", \"VAX_L","9860":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-13T00:00:00\",\n              \"lte\": \"2021-03-13T23:59:59\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding Elasticsearch query\n    assert generate_elasticsearch_query(question=QUESTION_1) == EXPECTED_QUERY_1\n\n    assert generate_elasticsearch_query(question=QUESTION_2) == EXPECTED_QUERY_2","8720":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 25,\n              \"lte\": 64\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"RUBELLA AND MENINGOCOCCAL\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(QUESTION_STR)\n\n    # When\n    result = generate_elasticsearch_query(question)\n\n    # Then\n    assert result == EXPECT","7029":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"MENINGITIS HERPES\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    name=\"Document Name\",\n                    url=\"https:\/\/example.com\/document-name\",\n                    fields={\n                        \"field1\": \"value1\",\n                        \"field2\": \"value2\",\n                    },\n                )\n            ],\n        ),\n        notes=\"","8857":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT.keyword\": {\n              \"value\": \"RUBELLA\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT.keyword\": {\n              \"value\": \"BCG\"\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(QUESTION_1)\n\n    # When\n    result = generate_elasticsearch_query(question)\n\n    # Then\n    assert result == EXPECTED_QUERY_1\n\n\nEXPECTED_QUERY_2 = \"\"\"Prompt: ### Elasticsearch database with field names:\n# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX","3160":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"vax_date\": {\n              \"gte\": \"09\/29\/1921\",\n              \"lte\": \"09\/29\/1921\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"vaers_id\"]\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n    assert generate_elasticsearch_query(question=QUESTION_1) == EXPECTED_QUERY_1\n\n    assert generate_elasticsearch_query(question=QUESTION_2) == EXPECTED_QUERY_2\n\n    assert generate_elasticsearch_query(question=QUESTION_3) == EXPECTED_QUERY_3\n\n    assert generate_elasticsearch_query(","7846":"\"\"\"\n\ndef main():\n    # Create a new parser object\n    my_parser = argparse.ArgumentParser(description='Process some integers.')\n\n    # Add positional arguments\n    my_parser.add_argument('question',\n                           metavar='QUESTION',\n                           type=str,\n                           help='Question to be answered')\n\n    # Add optional arguments\n    my_parser.add_argument('-v', '--verbose',\n                           action='store_true',\n                           help='Verbose output')\n\n    args = my_parser.parse_args()\n\n    if args.verbose:\n        print(\"Question:\", args.question)\n\n    # Get the answer\n    answer = process_question(args.question)\n\n    # Print the answer\n    print(\"\\nAnswer:\")\n    print(answer)\n\n\nif __name__ == \"__main__\":\n    main()","10292":"\"\"\"\n\ndef main():\n    # load data\n    df = pd.read_csv('vaers-january-2021.csv')\n\n    # clean data\n    df['VAERS_ID'] = df['VAERS_ID'].astype(str).apply(lambda x: x.zfill(7))\n    df['VAX_DATE'] = pd.to_datetime(df['VAX_DATE'])\n    df['RECVDATE'] = pd.to_datetime(df['RECVDATE'])\n    df['SYMPTOM_TEXT'] = df['SYMPTOM_TEXT'].fillna('')\n    df['ALLERGIES'] = df['ALLERGIES'].fillna('')\n    df['OTHER_MEDS'] = df['OTHER_MEDS'].fillna('')\n    df['HISTORY'] = df['HISTORY'].fillna('')\n    df['PRIOR_VAX'] = df['PRIOR_VAX'].fillna('')\n    df","5144":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Head CT Scan\"\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"N\"\n          }\n        },\n        {\n          \"term\": {\n            \"HOSPITAL\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"DISABLE\": \"N\"\n          }\n        },\n        {\n          \"term\": {\n            \"CUR_ILL\": \"Y\"\n          }\n        },\n        {\n          \"term\":","12882":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT.keyword\": \"Oesophageal Perforation\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"Is there any person who has died of COVID-19?\"\"\"\n\n    # When generating the elasticsearch query\n    es_query =","10828":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"_id\": \"0929089-09807\"\n          }\n        },\n        {\n          \"match\": {\n            \"text\": \"shot\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a list of conditions and a list of fields\n    conditions = [\"VAERS_ID\", \"STATE\", \"AGE_YRS\"]\n    fields = [\"RECVDATE\", \"SYMPTOM_TEXT\"]\n\n    # WHEN generating an elasticsearch query\n    es_query = generate_elasticsearch_query(conditions=conditions, fields=fields)\n\n    # THEN assert it's a valid elasticsearch query","3298":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2020-12-23\",\n              \"lte\": \"2020-12-23\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"RECVDATE\",\"STATE\",\"AGE_YRS\",\"VAERS_ID\",\"SEX\",\"SYMPTOM_TEXT\",\"DIED\",\"ER_VISIT\",\"L_THREAT\",\"HOSPITAL\",\"HOSPDAYS\",\"DISABLE\",\"VAX_DATE\",\"LAB_DATA\",\"OTHER_MEDS\",\"CUR_ILL\",\"HISTORY\",\"PRIOR_VAX\",\"TODAYS_DATE\",\"OFC_VISIT\",\"VAX_TYPE\",\"VAX_MANU\",\"VAX_LOT\",\"VAX_DOSE_SER","11460":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_NAME.keyword\": {\n              \"value\": \"INFLUENZA (SEASONAL) (FLUZONE QUADRIVALENT)\",\n              \"boost\": 1.0\n            }\n          }\n        }\n      ],\n      \"should\": [],\n      \"must\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HOSPITAL\",\n      \"HOSPDAYS\",\n      \"DISABLE\",\n      \"VAX_DATE\",\n      \"LAB_DATA\",\n      \"OTHER_MEDS\",\n      \"CUR_ILL\",\n      \"HISTORY\",","7572":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"ALLERGIES\": \"knfa\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    name=\"Document Name\",\n                    url=\"https:\/\/example.com\/document-name\",\n                    fields={\n                        \"field1\": \"value1\",\n                        \"field2\": \"value2\",\n                    },\n                )\n            ],\n        ),\n        notes=\"Clinical Notes\",","11286":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"TX\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"terms\": {\n            \"VAX_TYPE\": [\"O\",\"R\"]\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",","5169":"\"\"\"\n\ndef main():\n    # Create the parser\n    my_parser = argparse.ArgumentParser(description='Process some integers.')\n\n    # Add the arguments\n    my_parser.add_argument('question',\n                           metavar='QUESTION',\n                           type=str,\n                           help='Question to be answered')\n\n    args = my_parser.parse_args()\n    print(\"Question:\", args.question)\n    answer = process_question(args.question)\n    if len(answer)>0:\n        print(\"Answer:\")\n        print(answer)\n\n\nif __name__ == '__main__':\n    main()","3602":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2005-01-01\",\n              \"lte\": \"2005-01-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_parse_question():\n    q = parse_question(QUESTION)\n\n    assert isinstance(q, Question)\n    assert len(q.clauses) == 3\n    assert all([isinstance(clause, Clause) for clause in q.clauses])\n    assert q.clauses[0].type == 'range'\n    assert q.clauses[0].field == 'RECVDATE'\n    assert q.clauses[0].value['gte'] ==","12969":"###[ what are the top 3 states that have the highest number of deaths due to COVID-19?]\nAnswer:\n\n###[ how many people in the United States have died from COVID-19?]\nAnswer:\n\n###[ what is the average age of a person who has been diagnosed with COVID-19?]\nAnswer:\n\n###[ what is the percentage of all adults between the ages of 20 and 65 who have received at least one dose of a COVID-19 vaccine?]\nAnswer:\n\n###[ what is the percentage of all adults between the ages of 20 and 65 who have received at least two doses of a COVID-19 vaccine?]\nAnswer:\n\n###[ what is the percentage of all adults between the ages of 20 and 65 who have","948":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"age_yrs\": {\n              \"gte\": 0,\n              \"lte\": 0.16999999999999998\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"vax_type\": \"JANSS\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_parse_question():\n    q = parse_question(q_str)\n\n    assert len(q['conditions']) == 2\n    assert 'vax_type' in q['conditions']\n    assert 'age_yrs' in q['conditions']\n    assert len(q['key_phrases']) == 3\n    assert'return' in q['key_phrases']\n    assert '","11315":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"AR\"\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"LA\"\n          }\n        }\n      ],\n      \"must\": [\n        {\n          \"match\": {\n            \"VAX_LOCATION\": \"AR\"\n          }\n        },\n        {\n          \"match\": {\n            \"VAX_LOCATION\": \"LA\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_parse():\n    q = Question(question=QUESTION)\n\n    assert len(q.clauses) == 2\n    assert isinstance(q.clauses[0], Clause)\n    assert isinstance(q.clauses[1], Clause)\n    assert q.clauses[0].condition is None\n    assert q.clauses[1].condition is None\n    assert len(q.clauses[","9038":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"USPFIZER INC\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2021-01-01\",\n              \"lte\": \"2021-12-31\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'give me all the patients who got vaccine manufactured by USPFIZER INC'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should match the expected result\n    assert json.loads(es_","2952":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"COUGH\"\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"N\"\n          }\n        },\n        {\n          \"term\": {\n            \"HOSPDAYS\": \"45\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_parse_question():\n    q = parse_question(QUESTION","7503":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"ALLERGIES\": \"HONEY_DEW\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=ANSWER,\n        notes=\"Clinical Notes\",\n        keywords=[\"Elasticsearch\"],\n    )\n\n    # When\n    result = generate_elasticsearch_query(question)\n\n    # Then\n    assert result == EXPECTED_ES_QUERY\n\n\nEXPECTED_SQL_QUERY = \"\"\"-- SQL Prompt: ### SQL database with field names:\n# RECVDATE, STATE, AGE_YRS,","1098":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"age_yrs\": {\n              \"gte\": 29.0,\n              \"lte\": 29.0\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"RECVDATE\", \"STATE\", \"AGE_YRS\", \"VAERS_ID\", \"SEX\", \"SYMPTOM_TEXT\", \"DIED\", \"ER_VISIT\", \"L_THREAT\", \"HOSPITAL\", \"HOSPDAYS\", \"DISABLE\", \"VAX_DATE\", \"LAB_DATA\", \"OTHER_MEDS\", \"CUR_ILL\", \"HISTORY\", \"PRIOR_VAX\", \"TODAYS_DATE\", \"OFC_VISIT\", \"VAX_TYPE\", \"VAX_MANU\", \"VAX_L","12560":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Ear Irritation\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_TH","1195":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"age_yrs\": {\n              \"gte\": 70.0,\n              \"lte\": 70.0\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"symptom_text\": \"fever\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a question in natural language\n    question = 'How many patients are 70.0 years old.'\n\n    # WHEN generating an Elasticsearch query\n    es_query = generate_elasticsearch_query(question)\n\n    # THEN assert it is correct\n    expected_es_query = json.loads(_EXPECTED_ES_QUERY_)\n    assert es_query == expected","8664":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": false\n          }\n        },\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2020-03-01\",\n              \"lte\": \"2020-04-01\"\n            }\n          }\n        },\n        {\n          \"terms\": {\n            \"SYMPTOM_TEXT\": [\n              \"MEASLES\",\n              \"BCG\"\n            ]\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt:\",\n        answer=\"Answer:\",\n        notes=\"","2564":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-07-15T00:00:00\",\n              \"lte\": \"2021-07-15T23:59:59\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding Elasticsearch query\n    assert generate_elasticsearch_query(question=QUESTION_1) == EXPECTED_QUERY_1\n\n    assert generate_elasticsearch_query(question=QUESTION_2) == EXPECTED_QUERY_2","4546":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"N\"\n          }\n        },\n        {\n          \"term\": {\n            \"OFC_VISIT\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"COUGH\"\n          }\n        },\n        {\n          \"term\": {\n            \"AGE_YRS\": \"50-69\"\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"TX\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_TYPE\": \"","2836":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"HOSPDAYS\": {\n              \"gte\": 52.0,\n              \"lte\": 52.0\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"RECVDATE\", \"STATE\", \"AGE_YRS\", \"VAERS_ID\", \"SEX\", \"SYMPTOM_TEXT\", \"DIED\", \"ER_VISIT\", \"L_THREAT\", \"HOSPITAL\", \"HOSPDAYS\", \"DISABLE\", \"VAX_DATE\", \"LAB_DATA\", \"OTHER_MEDS\", \"CUR_ILL\", \"HISTORY\", \"PRIOR_VAX\", \"TODAYS_DATE\", \"OFC_VISIT\", \"VAX_TYPE\", \"VAX_MANU\", \"VAX_LOT","3033":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"HOSPDAYS\": {\n              \"gte\": 59.0,\n              \"lte\": 59.0\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": false\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    name=\"Document Name\",\n                    url=\"https:\/\/example.com\/document-name\",\n                    fields={\n                        \"field_one\": \"value one\",\n                        \"field_two\": \"value two\"\n                    }\n                )\n            ],","5010":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME\": \"AZD1222\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Antenatal Sonogram\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"","92":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-01-17T00:00:00\",\n              \"lte\": \"2022-01-18T00:00:00\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"RECVDATE\",\"STATE\",\"AGE_YRS\",\"VAERS_ID\",\"SEX\",\"SYMPTOM_TEXT\",\"DIED\",\"ER_VISIT\",\"L_THREAT\",\"HOSPITAL\",\"HOSPDAYS\",\"DISABLE\",\"VAX_DATE\",\"LAB_DATA\",\"OTHER_MEDS\",\"CUR_ILL\",\"HISTORY\",\"PRIOR_VAX\",\"TODAYS_DATE\",\"OFC_VISIT\",\"VAX_TYPE\",\"VAX","3560":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-03-01\",\n              \"lte\": \"2022-03-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_DATE\": {\n              \"value\": \"03\\\/01\\\/2022\"\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt:\",\n        answer=\"Answer:\",\n        notes=\"Notes:\",\n        context=CONTEXT,\n    )\n\n    # When\n    result = generate_elasticsearch_query(question)\n\n    # Then\n    assert result == EXPECTED_ELAST","9696":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-01-14T00:00:00\",\n              \"lte\": \"2021-01-15T00:00:00\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"RECVDATE\",\"STATE\",\"AGE_YRS\",\"VAERS_ID\",\"SEX\",\"SYMPTOM_TEXT\",\"DIED\",\"ER_VISIT\",\"L_THREAT\",\"HOSPITAL\",\"HOSPDAYS\",\"DISABLE\",\"VAX_DATE\",\"LAB_DATA\",\"OTHER_MEDS\",\"CUR_ILL\",\"HISTORY\",\"PRIOR_VAX\",\"TODAYS_DATE\",\"OFC_VISIT\",\"VAX_TYPE\",\"VAX","6342":"###[ What is the average age of a vaccine recipient when they were vaccinated? ]\nAnswer:\n\n###[ What percentage of all vaccine recipients have died after being vaccinated? ]\nAnswer:\n\n###[ What is the most common cause of death among vaccine recipients who died after being vaccinated? ]\nAnswer:\n\n###[ Which state has the highest number of vaccine recipients who died after being vaccinated? ]\nAnswer:\n\n###[ Which state has the lowest number of vaccine recipients who died after being vaccinated? ]\nAnswer:\n\n###[ Which state has the highest number of vaccine recipients who received a Pfizer vaccine? ]\nAnswer:\n\n###[ Which state has the highest number of vaccine recipients who received a Moderna vaccine? ]\nAnswer:\n\n###[ Which state has the highest number of vaccine recipients who received","3296":"{\n  \"from\": 0,\n  \"size\": 50,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2019-11-18T00:00:00\",\n              \"lte\": \"2019-11-18T23:59:59\"\n            }\n          }\n        },\n        {\n          \"match_all\": {}\n        }\n      ],\n      \"must\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'Give me all the patients who got vaccines on 11\/18\/2019.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it","3113":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"vax_date\": {\n              \"gte\": \"08\/12\/2020\",\n              \"lte\": \"08\/12\/2020\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"vaers_id\"]\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n\n    # When the question contains multiple conditions\n    question = 'Give me all the patients who were diagnosed with diabetes.' \\\n              'And also have a prior history of cancer'\n    expected_result = \"\"\"\nPrompt: ### Elasticsearch database with field names:\n# RECVDATE, STATE, AGE_YRS, VAERS_ID","9475":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_NAME\": \"<NAME>\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2021-08-07T00:00:00\",\n              \"lte\": \"2021-08-07T23:59:59\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'Give me all the patients who got USPFIZER INC2021504356 vaccine.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question","4050":"{\n  \"size\": 5000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2020-01-23\",\n              \"lte\": \"2020-01-23\"\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"SYMPTOM_TEXT\": {\n              \"query\": \"adverse event\"\n            }\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'Find all the records where the adverse event started on 01\/23\/2020.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question","8626":"{\n  \"from\": 0,\n  \"size\": 25,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2020-03-01\",\n              \"lte\": \"2020-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"TX\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"COVID19\"\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME\": \"DT ADSORBED\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_","4397":"{\n  \"size\": 20,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-08\",\n              \"lte\": \"2021-04-07\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"N\"\n          }\n        },\n        {\n          \"term\": {\n            \"OFC_VISIT\": \"Y\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2021-03-08\",\n              \"lte\": \"2021-04-07\"\n            }\n          }\n        },\n        {\n          \"range\": {\n            \"ONSET_DT\": {\n              \"gte\": \"2021-03-23T","1361":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2020-03-01\",\n              \"lte\": \"2020-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"AGE_YRS\": 17.0\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query can be generated.\"\"\"\n\n    # GIVEN a list of conditions\n    conditions = [\n        Condition(\n            name=\"RECVDATE\",\n            operator=OperatorType.GREATER_THAN_OR_EQUALS,\n            value=\"2020-03-01\",\n        ),\n        Condition(","4473":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-09\",\n              \"lte\": \"2021-08-36\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"\n    Prompt: ### Elasticsearch database with field names:\n    # RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSP","7542":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"ALLERGIES\": \"A\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    name=\"Document Name\",\n                    url=\"https:\/\/example.com\/document-name\",\n                    fields={\n                        \"field1\": \"value1\",\n                        \"field2\": \"value2\",\n                    },\n                )\n            ],\n        ),\n        notes=\"Clinical Notes\",\n        id=\"id","6408":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT.keyword\": {\n              \"value\": \"New Problems\"\n            }\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"VAERS_ID\"\n    ]\n  }\n}\n\"\"\"\n\n\ndef test_parse_question():\n    q = parse_question(QUESTION)\n\n    assert len(q[\"conditions\"]) == 4\n    assert len(q[\"key_clauses\"]) == 5\n    assert len(q[\"","6804":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        },\n        {\n          \"term\": {\n            \"L_THREAT\": true\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    name=\"Document Name\",\n                    url=\"https:\/\/document-url\/\",\n                    fields={\n                        \"field1\": \"value1\",\n                        \"field2\": \"value2\"\n                    }\n                )\n            ]\n        ),\n        notes=\"Clinical Notes\",\n        id=\"id\",\n        keywords=[\"keyword\"],\n        categories=[\"category\"]","7248":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 25,\n              \"lte\": 64\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"z-pac\"\n          }\n        },\n        {\n          \"match\": {\n            \"ALLERGIES\": \"z-pac\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(QUESTION_STR)\n\n    # When\n    result = generate_","10664":"{\n  \"size\": 30,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"06\/01\/2021\",\n              \"lte\": \"07\/01\/2021\"\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"VAX_NAME\": \"<NAME>\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question string, return the corresponding elasticsearch query\n    assert generate_elasticsearch_query(\"Find all the cases where the vaccine recipients got vaccinated in 065K21A(MVU12).\") == expected","12431":"{\n  \"from\": 0,\n  \"size\": 25,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"1980-01-01\",\n              \"lte\": \"2021-04-30\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Hepatic vascular disorder\"\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME\": \"Moderna COVID-19 mRNA Vaccine Moderna COVID-19 mRNA Vaccine\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"","6860":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"malform\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    name=\"Document Name\",\n                    url=\"https:\/\/example.com\/document-name\",\n                    fields={\n                        \"field1\": \"value1\",\n                        \"field2\": \"value2\",\n                    },\n                )\n            ],\n        ),\n        notes=\"Clinical Notes\",\n        id=\"id\",\n        keywords=[\"keyword","3557":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2020-02-04\",\n              \"lte\": \"2020-02-04\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt:\",\n        answer=\"Answer:\",\n        notes=\"Notes:\",\n        context=CONTEXT,\n        start_line=35,\n        end_line=67,\n    )\n\n    expected_result = {\n        \"size\": 10000,\n        \"query\": {\n            \"","7313":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"ALLERGIES.keyword\": {\n              \"value\": \"per\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HOSPITAL\",\n      \"HOSPDAYS\",\n      \"DISABLE\",\n      \"VAX_DATE\",\n      \"LAB_DATA\",\n      \"OTHER_MEDS\",\n      \"CUR_ILL\",\n      \"HISTORY\",\n      \"PRIOR_VAX\",\n      \"TODAYS_DATE\",\n      \"OFC_VISIT\",\n      \"","1794":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31T00:00:00\",\n              \"lte\": \"2021-09-01T00:00:00\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Pyelonephritis acute\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'Give me all the patients who have Pyelonephritis acute after the vaccination.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question","11355":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"AR\"\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"MO\"\n          }\n        }\n      ],\n      \"must\": [\n        {\n          \"match\": {\n            \"VAX_TYPE\": \"COMBO\"\n          }\n        },\n        {\n          \"match\": {\n            \"VAX_MANU\": \"JANSSEN-CILAG\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_parse_question():\n    q = parse_question(QUESTION)\n\n    assert len(q[\"conditions\"]) == 2\n    assert len(q[\"key_clauses\"]) == 1\n    assert len(q[\"field_names\"]) == 30\n    assert len(q[\"field_values\"]) == 46\n    assert len(q[\"es_post","11289":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"TX\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"terms\": {\n            \"VAX_LOCATION\": [\n              \"OUTSIDE_US\",\n              \"UNKNOWN\"\n            ]\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",","12345":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": {\n              \"value\": \"Eye inflammation\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'Give me all the patients who have Eye inflammation after vaccine.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should match the expected result\n    assert json.loads(es","7113":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        }\n      ],\n      \"must\": [\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"COVID-19\"\n          }\n        },\n        {\n          \"match\": {\n            \"DIED\": \"Y\"\n          }\n        }\n      ]\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"DIED\"\n    ]\n  },\n  \"aggs\": {\n    \"group_by_pulmonary_disorders\": {\n      \"terms\": {\n        \"field\": \"","4260":"{\n  \"size\": 5000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-07\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"N\"\n          }\n        },\n        {\n          \"term\": {\n            \"OFC_VISIT\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"COUGH\"\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"TX\"\n          }\n        },\n        {\n          \"term\": {\n            \"TODAYS_DATE\": \"2021-09-06\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAERS","5599":"\"\"\"\n\ndef main():\n    # Connect to Elasticsearch\n    es = connectElasticsearch()\n\n    # Get the prompt\n    prompt = input(\"Prompt: \")\n\n    # Get the answer\n    answer = input(\"Answer: \")\n\n    # Get the notes\n    notes = input(\"Notes: \")\n\n    # Get the clinical notes\n    clinical_notes = input(\"Clinical Notes: \")\n\n    # Get the question\n    question = input(\"Question: \")\n\n    # Get the evidence\n    evidence = input(\"Evidence: \")\n\n    # Get the document ID\n    docid = input(\"Document ID: \")\n\n    # Get the title\n    title = input(\"Title: \")\n\n    # Get the abstract\n    abstract = input(\"Abstract: \")\n\n    # Get the keywords\n    keywords = input(\"Keywords: \")\n\n    # Get the section titles\n    section_titles = input(\"Section Titles: \")\n\n    # Get the section text\n    section_text = input(\"Section Text: \")\n\n    # Get the section sentences","11578":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"POLIO VIRUS, INACTIVATED\"\n          }\n        }\n      ],\n      \"must_not\": [\n        {\n          \"match\": {\n            \"VAX_NAME\": \"<NAME>\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=ANSWER,\n        notes=\"Clinical Notes\",\n        keywords=[\"vaccine\"],\n        category=\"category\",\n    )\n\n    # When\n    result = generate_elasticsearch_query(question)\n\n    # Then\n    assert result == EXPECTED_QUERY\n\n\ndef test_generate_elasticsearch","8994":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"USPFIZER INC\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2021-01-01\",\n              \"lte\": \"2021-12-31\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n    assert generate_elasticsearch_query(question=QUESTION_1) == EXPECTED_ES_QUERY_1\n\n    assert generate_elasticsearch_query(question=QUESTION_2) == EXPECTED_ES_QUERY_2\n\n    assert generate_elasticsearch_query(question","6773":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        },\n        {\n          \"term\": {\n            \"CUR_ILL\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"HISTORY\": \"UTI\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    name=\"Document Name\",\n                    url=\"https:\/\/example.com\/document-name\",\n                    fields={\n                        \"field_one\": \"value one\",\n                        \"field_two","7918":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-04-19\",\n              \"lte\": \"2021-04-19\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_DATE\": {\n              \"value\": \"4\/19\/2021\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n\n    # When\n    result = generate_elasticsearch_query(question=QUESTION)\n\n    # Then\n    assert result == EXPECTED_RESULT","5231":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"PUB\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HOSPITAL\",\n      \"HOSPDAYS\",\n      \"DISABLE\",\n      \"VAX_DATE\",\n      \"LAB_DATA\",\n      \"OTHER_MEDS\",\n      \"CUR_ILL\",\n      \"HISTORY\",\n      \"PRIOR_VAX\",\n      \"TODAYS_DATE\",\n      \"OFC_VISIT\",\n      \"VAX_","10215":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_NAME\": \"RV1\"\n          }\n        },\n        {\n          \"range\": {\n            \"TODAYS_DATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        }\n      ],\n      \"must_not\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [],\n    \"excludes\": []\n  },\n  \"stored_fields\": \"\",\n  \"aggregations\": {},\n  \"script_fields\": {},\n  \"docvalue_fields\": [\n    {\n      \"field\": \"TODAYS_DATE\",\n      \"format\": \"date_time\"\n    }\n  ],\n  \"sort\": [\n    {\n      \"TODAYS_DATE\": {\n        \"order","11901":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 25,\n              \"lte\": 64\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"POLIO VIRUS, INACTIVATED (NO BRAND NAME)\"\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"HPV (GARDASIL)\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question","8371":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"lt\": \"2021-03-05\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"DTP\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test generating elasticsearch queries.\"\"\"\n    # Test a simple query\n    assert generate_elasticsearch_query(\n        'What is the number of patients who died in the United States?',\n        'vaers',\n        ['DIED'],\n        ['VA']) == {'size': 10000,","842":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"age_yrs\": {\n              \"gte\": 67.0,\n              \"lte\": 67.0\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"RECVDATE\", \"STATE\", \"AGE_YRS\", \"VAERS_ID\", \"SEX\", \"SYMPTOM_TEXT\", \"DIED\", \"ER_VISIT\", \"L_THREAT\", \"HOSPITAL\", \"HOSPDAYS\", \"DISABLE\", \"VAX_DATE\", \"LAB_DATA\", \"OTHER_MEDS\", \"CUR_ILL\", \"HISTORY\", \"PRIOR_VAX\", \"TODAYS_DATE\", \"OFC_VISIT\", \"VAX_TYPE\", \"VAX_MANU\", \"VAX_L","12540":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Mania\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"DIED\",\n      \"HOSPITAL\",\n      \"HOSPDAYS\",\n      \"DISABLE\",\n      \"CUR_ILL\",\n      \"HISTORY\",\n      \"PRIOR_VAX\",\n      \"TODAYS_DATE\",\n      \"OFC_VISIT\",\n      \"V","9552":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"USPFIZER INC\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2022-01-01\",\n              \"lte\": \"2022-04-30\"\n            }\n          }\n        }\n      ]\n    }\n  }\n}\nPrompt: ### What is the average age of all patients who received a Pfizer vaccine in January 2022?]\nAnswer:\n{\n  \"size\": 0,\n  \"aggs\": {\n    \"avg_age\": {\n      \"avg\": {\n        \"field\": \"AGE_YRS\"\n      }\n    }\n  },\n  \"query\": {\n    \"bool\": {\n      \"filter\":","4653":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-07\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"N\"\n          }\n        },\n        {\n          \"term\": {\n            \"OFC_VISIT\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"COUGH\"\n          }\n        },\n        {\n          \"term\": {\n            \"AGE_YRS\": \"50-54\"\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"TX\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_TYPE\": \"","2426":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"09\/23\/2021\",\n              \"lte\": \"09\/23\/2021\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a list of conditions and a list of fields\n    conditions = [\"RECVDATE >= '09\/23\/2021'\", \"DIED == True\"]\n    fields = [\"RECVDATE\", \"STATE\", \"AGE_YRS\", \"VAERS_ID\", \"SEX\", \"SYMPTOM","9987":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-02-22\",\n              \"lte\": \"2022-02-22\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt:\",\n        answer=\"Answer:\",\n        notes=\"Notes:\",\n        context=CONTEXT,\n    )\n\n    # When\n    result = generate_elasticsearch_query(question)\n\n    # Then\n    assert result == EXPECTED_ELASTICSEARCH_QUERY\n\n\nEXPECTED_SQLITE3_QUERY = \"\"\"","4539":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-01\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"N\"\n          }\n        },\n        {\n          \"term\": {\n            \"OFC_VISIT\": \"Y\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2021-08-01\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"range\": {\n            \"TODAYS_DATE\": {\n              \"gte\": \"2021-08-","9361":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_NAME\": \"<NAME>\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2021-04-01\",\n              \"lte\": \"2021-05-01\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'Give me all the patients who got USPFIZER INC2021607389 vaccine.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should match the expected result\n    assert json.dumps(es_","2518":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-03-11\",\n              \"lte\": \"2022-03-11\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding Elasticsearch query\n\n    # When generating the Elasticsearch query for the question\n    elasticsearch_query = generate_elasticsearch_query(question=QUESTION)\n\n    # Then it should match the expected result\n    assert json.loads(elasticsearch_query) == EXPECTED_ELASTICSEARCH_QUERY","5630":"###[ What is the average age of all patients who were vaccinated against COVID-19 in California? ]\nAnswer:\n\n###[ Which state has the highest number of deaths amongst those vaccinated against COVID-19? ]\nAnswer:\n\n###[ Which state has the lowest number of deaths amongst those vaccinated against COVID-19? ]\nAnswer:\n\n###[ Which state has the highest number of hospitalization days amongst those vaccinated against COVID-19? ]\nAnswer:\n\n###[ Which state has the lowest number of hospitalization days amongst those vaccinated against COVID-19? ]\nAnswer:\n\n###[ Which state has the highest number of hospitalizations amongst those vaccinated against COVID-19? ]\nAnswer:\n\n###[ Which state has the lowest number of hospitalizations amongst those vaccinated against COVID-19?","1509":"{\n  \"size\": 5000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-03-16T00:00:00\",\n              \"lte\": \"2022-03-16T23:59:59\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n\n    # When the question is about a single date\n    assert generate_elasticsearch_query(\n        'Give me all the cases completed the form on 03\/16\/2022.')","8048":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"vax_date\": {\n              \"gte\": \"2013-12-20\",\n              \"lte\": \"2013-12-20\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"vax_type\": \"COMBO\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question string\n    question = \"\"\"List all the records who was vaccinated on 12\/20\/2013.\"\"\"\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question)\n\n    # Then it should match the expected result\n    assert json.loads(es_query) == json.loads(_","2792":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-10-24T00:00:00\",\n              \"lte\": \"2021-10-24T23:59:59\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a question in natural language\n    question = 'How many patients died on 10\/24\/2021?'\n\n    # WHEN generating an Elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # THEN assert","7543":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"HISTORY\": \"H\"\n          }\n        },\n        {\n          \"term\": {\n            \"ALLERGIES\": \"A\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid Elasticsearch query is generated.\"\"\"\n\n    # GIVEN a question in natural language\n    nl = 'Find any cases where the vaccine recipients were allergic to hives.'\n\n    # WHEN generating the corresponding Elasticsearch query\n    es_query = generate_elasticsearch_query(nl)\n\n    # THEN assert it matches the expected result\n    assert json.loads(es_query) == json.loads(_","330":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-04-10T00:00:00\",\n              \"lte\": \"2022-04-10T23:59:59\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"How many patients' records are received on 04\/10\/2022?\"\"\"\n\n    # When generating the corresponding Elasticsearch query\n    elasticsearch_query = generate_elasticsearch_query(question=question)\n\n    #","7064":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"BACK PAIN\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HOSP","7480":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"OFC_VISIT\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"HISTORY\": \"8\"\n          }\n        },\n        {\n          \"term\": {\n            \"ALLERGIES\": \"2\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=ANSWER,\n        notes=\"Clinical Notes\",\n        keywords=[\"Elasticsearch\"],\n    )\n\n    # When\n    result = generate_elasticsearch","7782":"\"\"\"\n\ndef main():\n    # Create a new index in elasticsearch if it doesn't exist yet\n    create_index()\n\n    # Get user input\n    while True:\n        print(\"Please enter your question:\")\n        q = input(\"> \")\n\n        # If user enters 'quit', exit program\n        if q == \"quit\":\n            break\n\n        # Otherwise, process their question using elasticsearch\n        else:\n            results = ask(q)\n\n            # Print out each result\n            for r in results:\n                print(r[\"_source\"])\n\n\nif __name__ == \"__main__\":\n    main()","5371":"{\n  \"size\": 25,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2020-03-01\",\n              \"lte\": \"2020-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"prolia (6mos)\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME\": \"COVID19 mRNA (nucleoside modified) Vaccine COQ-10\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_parse_question():\n    q = parse_question(QUESTION)\n\n    assert len(q[\"filters\"]) == 7\n    assert len(q[\"","11362":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"AR\"\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"NS\"\n          }\n        },\n        {\n          \"match\": {\n            \"VAX_TYPE\": \"COMBO\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test generating elasticsearch queries.\"\"\"\n    # Test a simple query\n    assert generate_elasticsearch_query(SIMPLE_QUESTION) == EXPECTED_ES_QUERY\n\n    # Test a more complex query\n    assert generate_elasticsearch_query(COMPLEX_QUESTION) == EXPECTED_ES_QUERY2\n\n\nEXPECTED_ANSWER = \"\"\"\nPrompt: ### Elasticsearch database with field names:\n# RECV","8032":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2021-04-14\",\n              \"lte\": \"2021-04-14\"\n            }\n          }\n        },\n        {\n          \"match_all\": {}\n        }\n      ],\n      \"must\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'List all the records who was vaccinated on 4\/14\/21.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should match the expected result\n    assert json.loads(es_query) == json.loads(_expected_result)","4500":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-05\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HOSPITAL\",\n      \"HOSPDAYS\",\n      \"DISABLE\",\n      \"VAX_DATE","7621":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": false\n          }\n        },\n        {\n          \"term\": {\n            \"ALLERGIES\": \"Ezetimibe\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HOSPITAL\",\n      \"HOSPDAYS\",\n      \"DISABLE\",\n      \"VAX_DATE\",\n      \"LAB_DATA\",\n      \"OTHER_MEDS\",\n      \"CUR_ILL\",\n      \"HISTORY\",\n      \"PRIOR_V","12172":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"COUGH\"\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"HOSPITAL\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"DISABLE\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME\": \"NO PRESCRIPTION\"\n          }\n        },\n        {\n          \"","12689":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Skin Sensitization\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test generating elasticsearch queries.\"\"\"\n    # Test a simple query\n    assert generate_elasticsearch_query(\n        'RECVDATE', 'VAERS_ID', 'STATE', 'AGE_YRS', 'SEX', 'SYMPTOM_TEXT', 'DIED', 'ER_VISIT', 'L_THREAT', 'HOSPITAL', 'HOSPDAYS', 'DISABLE', 'VAX_DATE', 'LAB_DATA', 'OTHER_","2061":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Ketosis\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT","2131":"###[ What is the average age of all patients who received at least one dose of Pfizer vaccine in the United States? ]\nAnswer:\n\n###[ Which state has the highest number of deaths amongst those who received a single-dose of Moderna vaccine? ]\nAnswer:\n\n###[ What percentage of patients who received a single-dose of Pfizer vaccine died within 30 days of receiving their second dose? ]\nAnswer:\n\n###[ What is the median number of hospital days for patients who received a single-dose of Pfizer vaccine? ]\nAnswer:\n\n###[ What is the maximum value of creatinine level recorded by any patient who received a single-dose of Pfizer vaccine? ]\nAnswer:\n\n###[ What is the minimum value of serum potassium level recorded by any patient who received a single-dose of Pfizer v","9869":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-04-25T00:00:00\",\n              \"lte\": \"2021-04-25T23:59:59\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding Elasticsearch query\n    assert generate_elasticsearch_query(question=QUESTION_1) == EXPECTED_QUERY_1\n\n    assert generate_elasticsearch_query(question=QUESTION_2) == EXPECTED_QUERY_2","542":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"AZ\"\n          }\n        }\n      ],\n      \"must\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [],\n    \"excludes\": []\n  },\n  \"stored_fields\": \"\",\n  \"script_fields\": {},\n  \"docvalue_fields\": [\n    {\n      \"field\": \"@timestamp\",\n      \"format\": \"date_time\"\n    }\n  ],\n  \"sort\": [\n    {\n      \"@timestamp\": {\n        \"order\": \"desc\"\n      }\n    }\n  ]\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a question in natural language\n    nl = 'Give me all the patients who comes from AZ.'","2320":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-01-08\",\n              \"lte\": \"2022-01-08\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'Give me all the patients who died on 01\/08\/2022.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should return the correct elasticsearch query\n    assert es_query == expected_es_query","6076":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        },\n        {\n          \"term\": {\n            \"ER_VISIT\": false\n          }\n        },\n        {\n          \"term\": {\n            \"L_THREAT\": false\n          }\n        },\n        {\n          \"term\": {\n            \"HOSPITAL\": false\n          }\n        },\n        {\n          \"term\": {\n            \"DISABLE\": false\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 18,\n              \"lte\": 65\n            }\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",","4478":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-08-31\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"AGE_YRS\": 56\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"HOSPDAYS\": 149\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"ALLERGIES\",\n      \"CUR_ILL\",\n      \"DISABLE\",","6856":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"squamous cell carcinoma\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    name=\"Document Name\",\n                    url=\"https:\/\/document-url\/\",\n                    fields={\n                        \"field1\": \"value1\",\n                        \"field2\": \"value2\",\n                    },\n                )\n            ],\n        ),\n        notes=\"Clinical Notes\",\n        id=\"id\",\n        keywords=[\"","10986":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-04-01\",\n              \"lte\": \"2021-05-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"FL3L98\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"How many people have been injected with FL3L98?\",\n        answer=None,\n        context=\"\",\n        start_pos=0,\n        end_pos=0,\n        meta={","6921":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 18,\n              \"lte\": 90\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"SMOKING\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HOSPITAL\",\n      \"HOSPDAYS\",","12545":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Coeliac Artery Stenosis\"\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"","1010":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"age_yrs\": {\n              \"gte\": 11.0,\n              \"lte\": 11.0\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"vax_type\": \"COMBO\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a list of conditions and a list of fields\n    conditions = [\"VAERS_ID\", \"DIED\"]\n    fields = [\"RECVDATE\", \"STATE\", \"AGE_YRS\", \"VAERS_ID\", \"SEX\", \"SYMPTOM_TEXT\", \"DIED\", \"ER_VISIT\", \"L_THREAT\", \"","466":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"ME\"\n          }\n        }\n      ],\n      \"must\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [],\n    \"excludes\": []\n  },\n  \"stored_fields\": \"\",\n  \"script_fields\": {},\n  \"docvalue_fields\": [\n    {\n      \"field\": \"RECVDATE\",\n      \"format\": \"date_time\"\n    },\n    {\n      \"field\": \"TODAYS_DATE\",\n      \"format\": \"date_time\"\n    }\n  ],\n  \"sort\": [\n    {\n      \"TODAYS_DATE\": {\n        \"order\": \"desc\"\n      }\n    }\n  ]\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural","3386":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"vax_date\": {\n              \"gte\": \"2021-02-03\",\n              \"lte\": \"2021-02-03\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"vax_type\": \"COMBO\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding Elasticsearch query\n\n    # When generating the Elasticsearch query for the question,\n    # Then the generated Elasticsearch query should be correct\n    assert generate_elasticsearch_query(question=QUESTION_1) == EXPECTED_ES_QUERY_1\n    assert generate_elasticsearch_query(question=QUESTION","1204":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"age_yrs\": {\n              \"gte\": 47.0,\n              \"lte\": 47.0\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"symptom_text\": \"fever\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    name=\"Document Name\",\n                    url=\"https:\/\/example.com\/document-name\",\n                    fields={\n                        \"field_one\": \"value one\",\n                        \"field_two\": \"value two","3695":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"1921-11-04\",\n              \"lte\": \"1921-11-04\"\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"SYMPTOM_TEXT\": {\n              \"query\": \"onset date of adverse event symptoms\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\nPrompt: ### Elasticsearch database with field names:\n# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_ME","10013":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-12-21\",\n              \"lte\": \"2021-12-21\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a question in natural language\n    question = 'How many people have died?'\n\n    # WHEN generating an Elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # THEN assert it is correct\n    expected_es_query = json.loads(_EXPECTED_ES_QUERY_)\n    assert es_query == expected_","10679":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"ER_VISIT\": \"06207\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2021-03-08T00:00:00\",\n              \"lte\": \"2021-03-08T23:59:59\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question string, return the corresponding elasticsearch query\n    assert generate_elasticsearch_query(question_","1676":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Peripheral artery stent insertion\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"What are the symptoms of COVID-19?\"\"\"\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(","4436":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-01\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"\n    Prompt: ### Elasticsearch database with field names:\n    # RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSP","7523":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"ALLERGIES\": \"GRAPEJUICE\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    name=\"Document Name\",\n                    url=\"https:\/\/example.com\/document-name\",\n                    fields={\n                        \"field1\": \"value1\",\n                        \"field2\": \"value2\",\n                    },\n                )\n            ],\n        ),\n        notes=\"Clinical Notes\",\n        id=\"id\",","2036":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"N\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT.keyword\": \"Lip Discoloration\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"VAERS_ID\"\n    ]\n  }\n}\n\"\"\"\n\ndef main():\n\n    # Get command line arguments\n    args = parse_args()\n\n    # Load config file\n    cfg = load_config(args.config)","3010":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"HOSPDAYS\": {\n              \"gte\": 17.0,\n              \"lte\": 17.0\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": false\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    name=\"Document Name\",\n                    url=\"https:\/\/example.com\/document-name\",\n                    fields={\n                        \"field_one\": \"value one\",\n                        \"field_two\": \"value two\"\n                    }\n                )\n            ],\n            metadata={\"meta_","7049":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2019-10-31\",\n              \"lte\": \"2019-10-31\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Pertussis\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HO","7780":"\"\"\"\n\ndef main():\n    # Create a new parser object\n    my_parser = argparse.ArgumentParser(description='Process some integers.')\n\n    # Add positional arguments\n    my_parser.add_argument('question',\n                           metavar='QUESTION',\n                           type=str,\n                           help='Question to be answered')\n\n    # Add optional arguments\n    my_parser.add_argument('-v', '--verbose',\n                           action='store_true',\n                           help='Verbose output')\n\n    args = my_parser.parse_args()\n\n    if args.verbose:\n        print(\"Question:\", args.question)\n\n    # Get the answer\n    answer = process_question(args.question)\n\n    # Print the answer\n    print(\"\\nAnswer:\")\n    print(answer)\n\n\nif __name__ == \"__main__\":\n    main()","3526":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2011-10-31T00:00:00\",\n              \"lte\": \"2011-10-31T23:59:59\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"N\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_parse_question():\n    q = parse_question(QUESTION)\n\n    assert isinstance(q, Question)\n    assert len(q.clauses) == 4\n    assert all([isinstance(clause, Clause) for clause in q.clauses])\n    assert q.clauses[0].type == 'range'\n    assert q.clauses[0].field","760":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"age_yrs\": {\n              \"gte\": 91.0,\n              \"lte\": 91.0\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"RECVDATE\", \"STATE\", \"AGE_YRS\", \"VAERS_ID\", \"SEX\", \"SYMPTOM_TEXT\", \"DIED\", \"ER_VISIT\", \"L_THREAT\", \"HOSPITAL\", \"HOSPDAYS\", \"DISABLE\", \"VAX_DATE\", \"LAB_DATA\", \"OTHER_MEDS\", \"CUR_ILL\", \"HISTORY\", \"PRIOR_VAX\", \"TODAYS_DATE\", \"OFC_VISIT\", \"VAX_TYPE\", \"VAX_MANU\", \"VAX_L","9557":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"USJNJFOC20220432907\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2022-05-06T00:00:00\",\n              \"lte\": \"2022-05-06T23:59:59\"\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question, generate an elasticsearch query that can be used to retrieve relevant documents.\n    question = 'How many patients got vaccine manufactured by USJNJFOC20220432","3918":"{\n  \"from\": 0,\n  \"size\": 50,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-02-09\",\n              \"lte\": \"2021-02-09\"\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"SYMPTOM_TEXT\": {\n              \"query\": \"02\/09\/2021\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'Give me all the patients who were diagnosed with COVID-19.'\n\n    # When generating the corresponding Elasticsearch query\n    elasticsearch_query = generate_elasticsearch_query","3170":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"vax_date\": {\n              \"gte\": \"2011-06-10\",\n              \"lte\": \"2011-06-10\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"vaers_id\"],\n  \"from\": 0,\n  \"size\": 50\n}\n\"\"\"\n\n\ndef parse_question(question):\n    \"\"\"Parse a question into its components\n\n    Args:\n        question (str): The question string\n\n    Returns:\n        dict: Dictionary containing the parsed components of the question\n    \"\"\"\n    # Remove punctuation\n    question = re.sub('[^A-Za-z0-9]+','', question).lower()\n\n    # Split on spaces\n    tokens = question.split(\" \")","10595":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_NAME\": \"FK9694\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HOSPITAL\",\n      \"HOSPDAYS\",\n      \"DISABLE\",\n      \"VAX_DATE\",\n      \"LAB_DATA\",\n      \"OTHER_MEDS\",\n      \"CUR_ILL\",\n      \"HISTORY\",\n      \"PRIOR_VAX\",\n      \"TODAYS_DATE\",\n      \"OFC_VISIT\",\n      \"VAX_TYPE\",","1628":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Therapy Change\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'What are the symptoms of COVID-19?'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should return the expected elasticsearch query\n    assert es_query == EXPECTED","3749":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-12-16\",\n              \"lte\": \"2021-12-16\"\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"SYMPTOM_TEXT\": {\n              \"query\": \"onset date of adverse event symptoms\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n    assert generate_elasticsearch_query(question=QUESTION_1) == EXPECTED_QUERY_1\n\n    assert generate_elasticsearch_query(question=QUESTION_2) == EXPECTED_QUERY_2\n\n    assert","9013":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"US0095075132203\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_MANU\": \"US010686\"\n          }\n        }\n      ]\n    }\n  }\n}\nPrompt: ### Elasticsearch database with field names:\n# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_L","5139":"\"\"\"\n\ndef main():\n    # Create the parser\n    my_parser = argparse.ArgumentParser(description='Process some integers.')\n\n    # Add the arguments\n    my_parser.add_argument('question',\n                           metavar='QUESTION',\n                           type=str,\n                           help='Question to be answered')\n\n    args = my_parser.parse_args()\n    print(\"Question:\", args.question)\n    answer = process_question(args.question)\n    print(\"Answer:\")\n    pprint(answer)\n\n\nif __name__ == '__main__':\n    main()","3563":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"09\/12\/2016\",\n              \"lte\": \"09\/12\/2016\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"N\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt:\",\n        answer=\"Answer:\",\n        notes=\"Notes:\",\n        context=CONTEXT,\n        start_line=35,\n        end_line=47,\n    )\n\n    expected_result = {\n        \"size\": 0,\n        \"query\": {\n            \"bool\": {\n                \"filter\": [","9132":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"US0095075132204\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\n    \"RECVDATE\",\n    \"STATE\",\n    \"AGE_YRS\",\n    \"VAERS_ID\",\n    \"SEX\",\n    \"SYMPTOM_TEXT\",\n    \"DIED\",\n    \"ER_VISIT\",\n    \"L_THREAT\",\n    \"HOSPITAL\",\n    \"HOSPDAYS\",\n    \"DISABLE\",\n    \"VAX_DATE\",\n    \"LAB_DATA\",\n    \"OTHER_MEDS\",\n    \"CUR_ILL\",\n    \"HISTORY\",\n    \"PRIOR_VAX\",\n    \"TODAYS_DATE\",\n    \"OFC_VISIT\",\n    \"","4419":"{\n  \"size\": 25,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-09\",\n              \"lte\": \"2021-04-06\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"fever\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n\n    # When generating the elasticsearch query for the question\n    es_query = generate_elasticsearch_query(question=QUESTION)\n\n    # Then it should match the expected result\n    assert json.loads(es_query) == EXPECTED_ES_QUERY","9412":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_NAME\": \"USJNJFOC20220110175\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"RECVDATE\", \"STATE\", \"AGE_YRS\", \"VAERS_ID\", \"SEX\", \"SYMPTOM_TEXT\", \"DIED\", \"ER_VISIT\", \"L_THREAT\", \"HOSPITAL\", \"HOSPDAYS\", \"DISABLE\", \"VAX_DATE\", \"LAB_DATA\", \"OTHER_MEDS\", \"CUR_ILL\", \"HISTORY\", \"PRIOR_VAX\", \"TODAYS_DATE\", \"OFC_VISIT\", \"VAX_TYPE\", \"VAX_MANU\", \"VAX_LOT\", \"VAX","4689":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-01\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"N\"\n          }\n        },\n        {\n          \"term\": {\n            \"OFC_VISIT\": \"Y\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2021-08-01\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"range\": {\n            \"TODAYS_DATE\": {\n              \"gte\": \"2021-08-01\",","10058":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-01-15T00:00:00\",\n              \"lte\": \"2022-01-16T00:00:00\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\ndef main():\n\n    # Create a parser object\n    my_parser = argparse.ArgumentParser(description='Process some integers.')\n\n    # Add positional arguments\n    my_parser.add_argument('question',\n                           metavar='QUESTION',\n                           type=str,\n                           help='Question text')\n\n    # Add optional arguments\n    my_parser.add_argument('-v', '--verbose',","9382":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_NAME\": \"<NAME>\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2021-01-01\",\n              \"lte\": \"2021-03-01\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'Give me all the patients who got USPFIZER INC202101064027 vaccine.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should match the expected result\n    assert json.dumps(","536":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"PA\"\n          }\n        }\n      ],\n      \"must\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [],\n    \"excludes\": []\n  },\n  \"stored_fields\": \"\",\n  \"script_fields\": {},\n  \"aggregations\": {}\n}\nPrompt: ### Elasticsearch database with field names:\n# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT","8077":"{\n  \"size\": 5000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2021-03-09\",\n              \"lte\": \"2021-03-09\"\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"VAX_DATE\": {\n              \"query\": \"2021-03-09\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'List all the records who was vaccinated on 03\/09\/2021.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query","9214":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_NAME\": \"USPFIZER INC202101815402\"\n          }\n        },\n        {\n          \"range\": {\n            \"TODAYS_DATE\": {\n              \"gte\": \"2021-03-07T00:00:00\",\n              \"lte\": \"2021-03-07T23:59:59\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"What is the number of records that the vaccine recipient got USPFIZER INC2021018","7833":"\"\"\"\n\ndef main():\n    # Create a new parser object\n    my_parser = argparse.ArgumentParser(description='Process some integers.')\n\n    # Add positional arguments\n    my_parser.add_argument('question',\n                           metavar='QUESTION',\n                           type=str,\n                           help='Question to be answered')\n\n    # Add optional arguments\n    my_parser.add_argument('-v', '--verbose',\n                           action='store_true',\n                           help='Verbose output')\n\n    args = my_parser.parse_args()\n\n    if args.verbose:\n        print(\"Question:\", args.question)\n\n\nif __name__ == \"__main__\":\n    main()","738":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"age_yrs\": {\n              \"gte\": 80.0,\n              \"lte\": 80.0\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"RECVDATE\", \"STATE\", \"AGE_YRS\", \"VAERS_ID\", \"SEX\", \"SYMPTOM_TEXT\", \"DIED\", \"ER_VISIT\", \"L_THREAT\", \"HOSPITAL\", \"HOSPDAYS\", \"DISABLE\", \"VAX_DATE\", \"LAB_DATA\", \"OTHER_MEDS\", \"CUR_ILL\", \"HISTORY\", \"PRIOR_VAX\", \"TODAYS_DATE\", \"OFC_VISIT\", \"VAX_TYPE\", \"VAX_MANU\", \"VAX_L","8261":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-02-13T00:00:00\",\n              \"lte\": \"2021-02-13T23:59:59\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that the function returns correct elasticsearch query.\"\"\"\n\n    # GIVEN a list of conditions and a list of fields\n    conditions = [\"RECVDATE >= '2021-02-13' AND RECVDATE <= '2021-02-13'\",\n                  \"DIED ==","8438":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"lt\": \"2020-08-31\",\n              \"gte\": \"2020-06-01\"\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"VAX_NAME\": {\n              \"query\": \"IPV\"\n            }\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_parse_question():\n    q = parse_question(QUESTION)\n\n    assert len(q[\"conditions\"]) == 4\n    assert len(q[\"key_phrases\"]) == 5\n    assert len(q[\"fields\"]) == 17\n    assert len(q[\"filters\"]) == 2","8226":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-18T00:00:00\",\n              \"lte\": \"2021-03-19T23:59:59\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that the generated elasticsearch query is correct.\"\"\"\n\n    # GIVEN a question\n    question = Question(\n        prompt=\"Prompt:\",\n        answer=\"Answer:\",\n        notes=\"Clinical Notes:\",\n        raw_question=RAW_QUESTION,\n    )\n\n    # WHEN generating the elasticsearch query\n    es_query = question._generate","8479":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 25,\n              \"lte\": 89\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"MENINGOCOCCAL CONJUGATE AND TETANUS TOXOID\"\n          }\n        },\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2020-03-04\",\n              \"lte\": \"2020-03-04\"\n            }\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}","2612":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-10-21T00:00:00\",\n              \"lte\": \"2021-10-21T23:59:59\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding Elasticsearch query\n\n    # When generating the Elasticsearch query for the question\n    elasticsearch_query = generate_elasticsearch_query(question=QUESTION)\n\n    # Then it should match the expected result\n    assert json.loads(elasticsearch_query)","1990":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 18,\n              \"lte\": 90\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"Nasal dryness\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            documents=[\n                Document(\n                    name=\"Document Name\",\n                    url=\"https:\/\/example.com\/document-name\",\n                    fields={","12774":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Azoospermia\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"Is there any person have Azoospermia after vaccine?\"\"\"\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query","12579":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"VACCINATION SITE ABSCESS\"\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"","4637":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-07\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"N\"\n          }\n        },\n        {\n          \"term\": {\n            \"OFC_VISIT\": \"Y\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-07\"\n            }\n          }\n        },\n        {\n          \"range\": {\n            \"TODAYS_DATE\": {\n              \"gte\": \"2021-08-31\",","9183":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"USPFIZER INC\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\n    \"RECVDATE\",\n    \"STATE\",\n    \"AGE_YRS\",\n    \"VAERS_ID\",\n    \"SEX\",\n    \"SYMPTOM_TEXT\",\n    \"DIED\",\n    \"ER_VISIT\",\n    \"L_THREAT\",\n    \"HOSPITAL\",\n    \"HOSPDAYS\",\n    \"DISABLE\",\n    \"VAX_DATE\",\n    \"LAB_DATA\",\n    \"OTHER_MEDS\",\n    \"CUR_ILL\",\n    \"HISTORY\",\n    \"PRIOR_VAX\",\n    \"TODAYS_DATE\",\n    \"OFC_VISIT\",\n    \"VAX_TYPE\",\n    \"V","1030":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"age_yrs\": {\n              \"gte\": 63.0,\n              \"lte\": 63.0\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"RECVDATE\", \"STATE\", \"AGE_YRS\", \"VAERS_ID\", \"SEX\", \"SYMPTOM_TEXT\", \"DIED\", \"ER_VISIT\", \"L_THREAT\", \"HOSPITAL\", \"HOSPDAYS\", \"DISABLE\", \"VAX_DATE\", \"LAB_DATA\", \"OTHER_MEDS\", \"CUR_ILL\", \"HISTORY\", \"PRIOR_VAX\", \"TODAYS_DATE\", \"OFC_VISIT\", \"VAX_TYPE\", \"VAX_MANU\", \"VAX_L","4406":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-01\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"\n    Prompt: ### Elasticsearch database with field names:\n    # RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSP","3027":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"HOSPDAYS\": {\n              \"gte\": 45.0,\n              \"lte\": 45.0\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": false\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    name=\"Document Name\",\n                    url=\"https:\/\/example.com\/document-name\",\n                    fields={\n                        \"field_one\": \"value one\",\n                        \"field_two\": \"value two\"\n                    }\n                )\n            ],","10315":"\"\"\"\n\ndef main():\n    # load data\n    df = pd.read_csv('vaers-jan2021.csv')\n\n    # clean data\n    df['VAERS_ID'] = df['VAERS_ID'].astype(str).apply(lambda x: x.zfill(7))\n    df['VAX_DATE'] = pd.to_datetime(df['VAX_DATE'])\n    df['TODAYS_DATE'] = pd.to_datetime(df['TODAYS_DATE'])\n    df['AGE_YRS'] = df['VAX_DATE'].dt.year - df['TODAYS_DATE'].dt.year\n    df['DIED'] = df['DIED'].fillna('')\n    df['SYMPTOM_TEXT'] = df['SYMPTOM_TEXT'].fillna('')\n    df['ALLERGIES'] = df['ALLERGIES'].fillna('')\n    df['HISTORY'] = df['","812":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"age_yrs\": {\n              \"gte\": 34.0,\n              \"lte\": 34.0\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"RECVDATE\", \"STATE\", \"AGE_YRS\", \"VAERS_ID\", \"SEX\", \"SYMPTOM_TEXT\", \"DIED\", \"ER_VISIT\", \"L_THREAT\", \"HOSPITAL\", \"HOSPDAYS\", \"DISABLE\", \"VAX_DATE\", \"LAB_DATA\", \"OTHER_MEDS\", \"CUR_ILL\", \"HISTORY\", \"PRIOR_VAX\", \"TODAYS_DATE\", \"OFC_VISIT\", \"VAX_TYPE\", \"VAX_MANU\", \"VAX_L","7203":"###[ What are the top 3 states by number of deaths?]\nPrompt: ### Elasticsearch database with field names:\n# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES### To generate the Elasticsearch query for the question, first we need to get an Elasticsearch POST search template.Then identify the filed names, condition values, and key clauses (such as \u2019must\u2019, \u2019should\u2019, or \u2019must","8625":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": false\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 25,\n              \"lte\": 64\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"HPV\"\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"DTAP\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(QUESTION_STR)\n\n    # When\n    result = generate_elasticsearch_","3091":"###[ What is the average age of a patient who died after being vaccinated against COVID-19? ]\nAnswer:\n\n###[ What are the top three states by number of deaths due to COVID-19? ]\nAnswer:\n\n###[ Which state has the highest rate of deaths among all states in the US? ]\nAnswer:\n\n###[ What is the percentage of deaths that occurred in the United States? ]\nAnswer:\n\n###[ What is the average length of stay for COVID-19 hospitalized patients? ]\nAnswer:\n\n###[ What is the average number of days spent in the hospital before receiving their COVID-19 vaccine? ]\nAnswer:\n\n###[ What is the average number of days between the onset of symptoms and hospitalization for COVID-19 patients? ]\nAnswer:\n\n###[ What is the average number of days between the on","12809":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n    assert generate_elasticsearch_query(question=QUESTION_1) == EXPECTED_QUERY_1\n\n    assert generate_elasticsearch_query(question=QUESTION_2) == EXPECTED_QUERY_2\n\n    assert generate_elasticsearch_query(question=QUESTION_","11621":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"TX\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"DTAP\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"IPV\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"HIB\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"VAERS_ID\"\n    ]\n  }","2049":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Perfusion brain scan normal\"\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"N\"\n          }\n        },\n        {\n          \"term\": {\n            \"HOSPITAL\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"DISABLE\": \"N\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_TYPE\": \"AZD\"\n          }\n        },\n        {","5281":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 25,\n              \"lte\": 64\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"koselugo\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'Give me all the patients who was taking koselugo.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should match the","1736":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Gait Disturbance\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'Give me all the patients who have Gait disturbance after the vaccination.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should return the correct query\n    assert es_query == expected_es_query","4808":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 25,\n              \"lte\": 64\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"COVID-19\"\n          }\n        },\n        {\n          \"match\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"match\": {\n            \"HOSPITAL\": \"\"\n          }\n        },\n        {\n          \"match\": {\n            \"DISABLE\": \"Y\"\n          }\n        },\n        {\n          \"match\": {\n            \"CUR_ILL\": \"Y\"\n          }\n        },\n        {\n          \"match\": {\n            \"PRIOR_VAX\": \"Y\"","7123":"###[ What are the top three states by number of deaths?]\nPrompt: ### Elasticsearch database with field names:\n# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES### To generate the Elasticsearch query for the question, first we need to get an Elasticsearch POST search template.Then identify the filed names, condition values, and key clauses (such as \u2019must\u2019, \u2019should\u2019, or \u2019must not","7767":"\"\"\"\n\ndef main():\n    # Create a new parser object\n    my_parser = argparse.ArgumentParser(description='Process some integers.')\n\n    # Add positional arguments\n    my_parser.add_argument('question',\n                           metavar='QUESTION',\n                           type=str,\n                           help='Question to be answered')\n\n    # Add optional arguments\n    my_parser.add_argument('-v', '--verbose',\n                           action='store_true',\n                           help='Verbose output')\n\n    args = my_parser.parse_args()\n\n    if args.verbose:\n        print(\"Question:\", args.question)\n\n    # Get the answer\n    answer = process_question(args.question)\n\n    # Print the answer\n    print(\"\\nAnswer:\")\n    print(answer)\n\n\nif __name__ == \"__main__\":\n    main()","5086":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME\": \"Hepatitis B (HBv)\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HOSPITAL\",\n      \"HOSPDAYS\",\n      \"DISABLE\",\n      \"VAX_","7499":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": false\n          }\n        },\n        {\n          \"term\": {\n            \"OFC_VISIT\": true\n          }\n        },\n        {\n          \"term\": {\n            \"HISTORY.keyword\": \"Amoxicillin\"\n          }\n        },\n        {\n          \"term\": {\n            \"HISTORY.keyword\": \"Trimethoprim\"\n          }\n        },\n        {\n          \"term\": {\n            \"HISTORY.keyword\": \"Sulfamethoxazole\"\n          }\n        },\n        {\n          \"term\": {\n            \"HISTORY.keyword\": \"Clindamycin\"\n          }\n        },\n        {\n          \"term\": {\n            \"HISTORY.keyword\": \"Doxycycline\"\n          }\n        },\n        {\n          \"term\": {\n            \"","7018":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"tachycardia\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HOSP","9700":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-04\",\n              \"lte\": \"2021-03-04\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"STATE\", \"AGE_YRS\", \"VAERS_ID\", \"SEX\", \"SYMPTOM_TEXT\", \"DIED\", \"ER_VISIT\", \"L_THREAT\", \"HOSPITAL\", \"HOSPDAYS\", \"DISABLE\", \"VAX_DATE\", \"LAB_DATA\", \"OTHER_MEDS\", \"CUR_ILL\", \"HISTORY\", \"PRIOR_VAX\", \"TODAYS_DATE\", \"OFC_VISIT\", \"VAX_TYPE\", \"VAX_MAN","5512":"\"\"\"\n\ndef main():\n    # Connect to Elasticsearch\n    es = connectElasticsearch()\n\n    # Get the prompt\n    prompt = input(\"Prompt: \")\n\n    # Get the answer\n    answer = input(\"Answer: \")\n\n    # Get the notes\n    notes = input(\"Notes: \")\n\n    # Get the clinical notes\n    clinical_notes = input(\"Clinical Notes: \")\n\n    # Get the patient id\n    patient_id = input(\"Patient ID: \")\n\n    # Get the date\n    date = datetime.datetime.now().strftime(\"%m\/%d\/%Y\")\n\n    # Create a new document in Elasticsearch\n    createDocument(es, prompt, answer, notes, clinical_notes, patient_id, date)\n\n\nif __name__ == \"__main__\":\n    main()","12781":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Anaemia\"\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"HOSPITAL\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"DISABLE\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME\": \"Moderna COVID-19","5023":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Full Cardiac & Neurologic Workup\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"DIED\",\n      \"HOSPITAL\",\n      \"HOSPDAYS\",\n      \"DISABLE\",\n      \"CUR_ILL\",\n      \"HISTORY\",\n      \"PRIOR_VAX\",\n      \"TODAYS_DATE\",\n      \"OF","5842":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 18,\n              \"lte\": 90\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"tizanidine\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Is there any patients who was taking tizanidine?\",\n        answer=None,\n        context=\"\",\n        qa_pairs=[],\n        id=123456789,\n    )\n\n    expected_result = {\n        \"query\": {\n            \"bool\": {\n                \"filter","9759":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-02-11\",\n              \"lte\": \"2021-02-11\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"STATE\",\"AGE_YRS\",\"VAERS_ID\",\"SEX\",\"SYMPTOM_TEXT\",\"DIED\",\"ER_VISIT\",\"L_THREAT\",\"HOSPITAL\",\"HOSPDAYS\",\"DISABLE\",\"VAX_DATE\",\"LAB_DATA\",\"OTHER_MEDS\",\"CUR_ILL\",\"HISTORY\",\"PRIOR_VAX\",\"TODAYS_DATE\",\"OFC_VISIT\",\"VAX_TYPE\",\"VAX_MANU\",\"VAX_LOT\",\"VAX_DOSE_SERIES\",\"VAX_","8992":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"USSA2022SA051715\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\n    \"RECVDATE\",\n    \"STATE\",\n    \"AGE_YRS\",\n    \"VAERS_ID\",\n    \"SEX\",\n    \"SYMPTOM_TEXT\",\n    \"DIED\",\n    \"ER_VISIT\",\n    \"L_THREAT\",\n    \"HOSPITAL\",\n    \"HOSPDAYS\",\n    \"DISABLE\",\n    \"VAX_DATE\",\n    \"LAB_DATA\",\n    \"OTHER_MEDS\",\n    \"CUR_ILL\",\n    \"HISTORY\",\n    \"PRIOR_VAX\",\n    \"TODAYS_DATE\",\n    \"OFC_VISIT\",\n    \"","7556":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"OFC_VISIT\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"HISTORY\": \"1\"\n          }\n        },\n        {\n          \"term\": {\n            \"ALLERGIES\": \"1\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HOSPITAL\",\n      \"HOSPDAYS\",\n      \"","9492":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_NAME\": \"US0095075132201\"\n          }\n        },\n        {\n          \"range\": {\n            \"TODAYS_DATE\": {\n              \"gte\": \"2020-06-01\",\n              \"lte\": \"2020-06-30\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'Give me all the patients who got US0095075132201USA005784 vaccine.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question","11542":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"DTAP\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"IPV\"\n          }\n        }\n      ],\n      \"should\": [],\n      \"must\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=ANSWER,\n        notes=\"Clinical Notes\",\n        keywords=[\"Elasticsearch\"],\n    )\n\n    # When\n    result = generate_elasticsearch_query(question)\n\n    # Then\n    assert result == EXPECTED_ES_","5524":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME\": \"<NAME>\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_DOSE_SERIES\": \"800\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_parse_question():\n    q = parse_question(QUESTION)\n\n    assert len(q[\"conditions\"]) == 5\n    assert len(q[\"key_clauses\"]) == 6\n    assert len(q[\"field_","1886":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 18,\n              \"lte\": 90\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"Fournier's Gangrene\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(QUESTION_STR)\n\n    # When\n    result = generate_elasticsearch_query(question)\n\n    # Then\n    assert result == EXPECTED_ES_QUERY\n\n\nEXPECTED_ES_QUERY2 = \"\"\"Prompt: ### Elasticsearch database with field","7474":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"neosporin opthalamic\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = 'Show me all the patients who has an allergic to neosporin opthalamic.'\n    expected_result = json.loads(EXPECTED_ELASTICSEARCH_QUERY)\n\n    # When\n    result = generate_elasticsearch_query(question)\n\n    # Then\n    assert result == expected_result\n\n\ndef test_generate","3074":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        },\n        {\n          \"term\": {\n            \"ER_VISIT\": false\n          }\n        },\n        {\n          \"term\": {\n            \"L_THREAT\": false\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Y\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n    assert generate_elasticsearch_query(question=QUESTION_1) == EXPECTED_QUERY_1\n\n    assert generate_elasticsearch_query(question=QUESTION_2) == EXPECTED_QUERY_2\n\n    assert generate_elasticsearch","7791":"\"\"\"\n\ndef main():\n    # load data\n    df = pd.read_csv('vaers-january-2021.csv')\n\n    # clean data\n    df['VAERS_ID'] = df['VAERS_ID'].astype(str).apply(lambda x: x.zfill(7))\n    df['VAX_DATE'] = pd.to_datetime(df['VAX_DATE'])\n    df['TODAYS_DATE'] = pd.to_datetime(df['TODAYS_DATE'])\n    df['AGE_YRS'] = df['VAX_DATE'].dt.year - df['TODAYS_DATE'].dt.year\n    df['DIED'] = df['DIED'].fillna('')\n    df['SYMPTOM_TEXT'] = df['SYMPTOM1'] +'' + df['SYMPTOM2'] +'' + df['SYMPTOM3'] +'' + df","6060":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Strep Throat\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    name=\"Document Name\",\n                    url=\"https:\/\/example.com\/document-name\",\n                    fields={\n                        \"field_one\": \"value one\",\n                        \"field_two\": \"value two\",\n                    },\n                )\n            ],\n        ),","1668":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT.keyword\": \"Psychiatric evaluation normal\"\n          }\n        },\n        {\n          \"match\": {\n            \"VAX_NAME.keyword\": \"COVID-19 mRNA Vaccine Moderna\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"\n    Prompt: ### Elasticsearch database with field names:\n    # RE","709":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"VAERS_ID\"\n    ]\n  }\n}\nPrompt: ###[Give me all the VAERS IDs that are associated with a patient who died in the United States.]\nAnswer:\n{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {","12950":"###[ what are the top 3 states that have the highest number of deaths amongst those who received at least one dose of Pfizer vaccine in the US?]\nAnswer:\n\n###[ what is the average age of a person who has died after receiving at least one dose of Pfizer vaccine in the US?]\nAnswer:\n\n###[ what is the percentage of people who have died after receiving at least one dose of Pfizer vaccine in the US?]\nAnswer:\n\n###[ what is the average number of days spent in hospital after receiving at least one dose of Pfizer vaccine in the US?]\nAnswer:\n\n###[ what is the average number of days spent in the emergency department after receiving at least one dose of Pfizer vaccine in the US?]\nAnswer:\n\n###[ what is the average number of days spent in","1524":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-02-27T00:00:00\",\n              \"lte\": \"2022-02-28T00:00:00\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a question in natural language\n    question = QUESTION_TEMPLATE.format(\n        'how many patients died of covid on 0","11097":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_DOSE_SERIES\": \"7+\"\n          }\n        },\n        {\n          \"range\": {\n            \"TODAYS_DATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n\n    # When generating the elasticsearch query for the question\n    es_query = generate_elasticsearch_query(question=QUESTION)\n\n    # Then it should match the expected result\n    assert json.loads(es_query) == EXPECTED_ES","337":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-03-08T00:00:00\",\n              \"lte\": \"2022-03-08T23:59:59\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"How many patients' records are received on 03\/08\/2022?\"\"\"\n\n    # When generating the corresponding Elasticsearch query\n    elasticsearch_query = generate_elasticsearch_query(question=","3261":"{\n  \"from\": 0,\n  \"size\": 50,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2020-01-27T00:00:00\",\n              \"lte\": \"2020-01-27T23:59:59\"\n            }\n          }\n        },\n        {\n          \"match_all\": {}\n        }\n      ],\n      \"must\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'Give me all the patients who got vaccines on 01\/27\/2020.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it","7010":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Barrett\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    name=\"Document Name\",\n                    url=\"https:\/\/example.com\/document-name\",\n                    fields={\n                        \"field1\": \"value1\",\n                        \"field2\": \"value2\",\n                    },\n                )\n            ],\n        ),\n        notes=\"Clinical Notes\",\n        id=\"id","12127":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"TX\"\n          }\n        },\n        {\n          \"terms\": {\n            \"VAX_NAME\": [\n              \"DENGVAXIA\",\n              \"VAQTA\"\n            ]\n          }\n        }\n      ],\n      \"must_not\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [],\n    \"excludes\": []\n  },\n  \"stored_fields\": \"\",\n  \"aggregations\": {\n    \"agg_vaxname\": {\n      \"composite\": {\n        \"size\": 10000,\n        \"sources\":","456":"{\n  \"size\": 1,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-02-27\",\n              \"lte\": \"2022-02-29\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HOSPITAL\",\n      \"HOSPDAYS\",\n      \"DISABLE\",\n      \"VAX_DATE\",","5885":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2019-10-31\",\n              \"lte\": \"2020-04-05\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 65,\n              \"lte\": 75\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"high blood pressure\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = 'What are the","8273":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-09\",\n              \"lte\": \"2021-03-09\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that the generated elasticsearch query is correct.\"\"\"\n\n    # GIVEN a question\n    question = Question(\n        prompt=\"Prompt:\",\n        answer=\"Answer:\",\n        notes=\"Clinical Notes:\",\n        raw_question=RAW_QUESTION,\n    )\n\n    # WHEN generating the elasticsearch query\n    es_query = question._generate_elasticsearch_query()\n\n    # THEN assert it's correct\n    expected_es_query","11675":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Zoster Live\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME\": \"<NAME>\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM","4065":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"02\/20\/2022\",\n              \"lte\": \"02\/20\/2022\"\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"SYMPTOM_TEXT\": {\n              \"query\": \"onset date of adverse event symptom\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n\n    # When\n    result = generate_elasticsearch_query(question=QUESTION)\n\n    # Then\n    assert result == EXPECTED_RESULT","13020":"###[ Which state has the highest number of deaths among all states in the US?]\nAnswer:\n\n###[ What are the top 5 symptoms reported by patients who received a Pfizer vaccine?]\nAnswer:\n\n###[ How many people have died due to COVID-19 in California?]\nAnswer:\n\n###[ What is the average age of those who received at least one dose of a COVID-19 vaccine in California?]\nAnswer:\n\n###[ What is the percentage of people who received at least one dose of a COVID-19 vaccine in California?]\nAnswer:\n\n###[ What is the average age of those who received at least two doses of a COVID-19 vaccine in California?]\nAnswer:\n\n###[ What is the percentage of people who received at least two doses of a COVID-19 vaccine in California?","10955":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2020-03-01\",\n              \"lte\": \"2020-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT.keyword\": \"f m0698\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt:\",\n        answer=\"Answer:\",\n        notes=\"Clinical Notes:\",\n        raw_question=RAW_QUESTION,\n    )\n\n    # When\n    result","4248":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-05-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"N\"\n          }\n        },\n        {\n          \"term\": {\n            \"OFC_VISIT\": \"Y\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-05-01\"\n            }\n          }\n        },\n        {\n          \"range\": {\n            \"TODAYS_DATE\": {\n              \"gte\": \"2021-03-","8558":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": false\n          }\n        },\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"lte\": \"2020-04-30T00:00:00\"\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"Meningococcal meningitis\"\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"Measles\"\n          }\n        }\n      ],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = 'Give me all the patients who","12218":"\"\"\"\n\ndef main():\n    # Get command line arguments\n    parser = argparse.ArgumentParser(description='Process some integers.')\n    parser.add_argument('--question', type=str, help=\"Question to be answered\")\n    args = parser.parse_args()\n\n    if args.question == None:\n        print(\"Please provide a valid question.\")\n        return\n    \n    # Load data\n    df = pd.read_csv('vaers-january-2019.csv')\n    df['RECVDATE'] = pd.to_datetime(df['RECVDATE'])\n    df['VAX_DATE'] = pd.to_datetime(df['VAX_DATE'])\n    df['TODAYS_DATE'] = pd.to_datetime(pd.Timestamp.today())\n    df['AGE_YRS'] = round((df['TODAYS_DATE'].dt.date - df['BIRTHDATE'].dt.date)\/np.timedelta6","1542":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-02-23T00:00:00\",\n              \"lte\": \"2022-02-23T23:59:59\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a question in natural language\n    question = \"How many patients completed their reports on 02\/23\/2022?\"\n\n    # WHEN generating an Elasticsearch query\n    es_query = generate_elasticsearch_query(question=","7217":"###[ What are the top three states by number of deaths?]\nPrompt: ### Elasticsearch database with field names:\n# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES### To generate the Elasticsearch query for the question, first we need to get an Elasticsearch POST search template.Then identify the filed names, condition values, and key clauses (such as \u2019must\u2019, \u2019should\u2019, or \u2019must not","7640":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": false\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Erythema\"\n          }\n        },\n        {\n          \"term\": {\n            \"ALLERGIES\": true\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HOSPITAL\",\n      \"HOSPDAYS\",\n      \"DISABLE\",\n      \"VAX_DATE\",\n      \"LAB_DATA\",\n      \"OTHER","9877":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-04-03T00:00:00\",\n              \"lte\": \"2022-04-03T23:59:59\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding Elasticsearch query\n\n    # When generating the Elasticsearch query for the question\n    elasticsearch_query = generate_elasticsearch_query(question=QUESTION)\n\n    # Then it should match the expected result\n    assert json.loads(elasticsearch_query) == EXPECTED_","10147":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2020-03-01\",\n              \"lte\": \"2020-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"PNC15\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"DIED\",\n      \"HOSPITAL\",\n      \"HOSPDAYS\",\n      \"DISABLE\",\n      \"CUR_ILL\",\n      \"HISTORY\",\n      \"PRIOR_VAX\",\n      \"TODAYS_DATE\",\n      \"OFC_VISIT\",","6008":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"chemo\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    name=\"Document Name\",\n                    url=\"https:\/\/example.com\/document-name\",\n                    fields={\n                        \"field1\": \"value1\",\n                        \"field2\": \"value2\",\n                    },\n                )\n            ],\n        ),\n        notes=\"Clinical Notes\",\n        id=\"id\",\n        keywords=[\"keyword","630":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"PW\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 18,\n              \"lte\": 90\n            }\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a question in natural language\n    nl = 'How many patients are from PW?'\n\n    # WHEN generating the corresponding elasticsearch query\n    es_query = generate_elasticsearch_query(nl)\n\n    # THEN assert it is correct\n    expected_es_query = json.loads(_EXPECTED_ES_QUERY_)\n    assert es_query == expected_es_query","6406":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-01-01\",\n              \"lte\": \"2021-01-31\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME\": \"<NAME>\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n\n    # When generating the elasticsearch query, we should be able to handle questions with multiple conditions, such as:\n    # - \u201cGive me all patients who were diagnosed with cancer\u201d\n    # - \u201cGive me all patients who are between 45 and 60 years old","8619":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": false\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 25,\n              \"lte\": 64\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"MEASLES\"\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"JAPANESE ENCEPHALITIS\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(QUESTION_TEMPLATE)\n\n    #","1461":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-01-26T00:00:00\",\n              \"lte\": \"2021-01-27T00:00:00\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n\n    # When\n    result = generate_elasticsearch_query(question=QUESTION)\n\n    # Then\n    assert result == EXPECTED_RESULT","10607":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_NAME\": \"Pfizer-BioNTech\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"1980-01-01\",\n              \"lte\": \"2021-04-30\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'give me all the patients who got vaccine from pfizer'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should return the correct query\n    assert es_query == expected_es_query","3647":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2008-11-01\",\n              \"lte\": \"2008-11-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_DATE\": {\n              \"value\": \"2008-11-01\"\n            }\n          }\n        }\n      ]\n    }\n  }\n}\nPrompt: ###[ What is the average age of patients who received a Pfizer vaccine in 2009?]\nAnswer:\n{\n  \"size\": 0,\n  \"aggs\": {\n    \"avg_age\": {\n      \"avg\": {\n        \"field\": \"AGE_YRS\"\n      }\n    }\n  },\n  \"query\": {","1452":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-01-04T00:00:00\",\n              \"lte\": \"2022-01-05T00:00:00\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n\n    # When\n    result = generate_elasticsearch_query(question=QUESTION)\n\n    # Then\n    assert result == EXPECTED_RESULT","7095":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Common Variable Immunodeficiency\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",","5764":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 18,\n              \"lte\": 65\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"gabapentine\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a list of conditions and a list of fields\n    conditions = [\"VA\", \"18-65\"]\n    fields = [\"STATE\", \"AGE_YRS\", \"SYMPTOM_TEXT\"]\n    must_nots = []\n    shoulds = []\n\n    # WHEN generating an elasticsearch query\n    es_query = generate_elasticsearch","12961":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"N\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_TYPE\": \"JANSSEN\"\n          }\n        },\n        {\n          \"term\": {\n            \"SEX\": \"M\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Hypogonadism\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"VAERS_ID\"\n    ]","11921":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_NAME.keyword\": {\n              \"value\": \"INFLUENZA (SEASONAL)\",\n              \"boost\": 1\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME.keyword\": {\n              \"value\": \"HEP B (RECOMBIVAX HB)\",\n              \"boost\": 1\n            }\n          }\n        }\n      ],\n      \"should\": [],\n      \"must\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = 'List all the patients who got INFLUENZA (SEASONAL) (FLUCELVAX) vaccine and HEP B","11173":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"RL\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_TYPE\": \"COMBO\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt:\",\n        answer=\"Answer:\",\n        notes=\"Clinical Notes:\",\n        code=None,\n        id=None,\n    )\n    expected_result = json.loads(EXPECTED_ELASTICSEARCH_","9172":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"USPFIZER INC\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2021-12-01\",\n              \"lte\": \"2022-01-01\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"\n    Find all patients who received at least one dose of Pfizer COVID-19 vaccine between December 1st, 2021 and January 1st, 2022.\n    \"\"\"\n\n    # When generating the corresponding Elasticsearch query\n    elasticsearch_query =","771":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"age_yrs\": {\n              \"gte\": 39.0,\n              \"lte\": 39.0\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"RECVDATE\", \"STATE\", \"AGE_YRS\", \"VAERS_ID\", \"SEX\", \"SYMPTOM_TEXT\", \"DIED\", \"ER_VISIT\", \"L_THREAT\", \"HOSPITAL\", \"HOSPDAYS\", \"DISABLE\", \"VAX_DATE\", \"LAB_DATA\", \"OTHER_MEDS\", \"CUR_ILL\", \"HISTORY\", \"PRIOR_VAX\", \"TODAYS_DATE\", \"OFC_VISIT\", \"VAX_TYPE\", \"VAX_MANU\", \"VAX_L","10235":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_NAME.keyword\": \"IPV\"\n          }\n        },\n        {\n          \"range\": {\n            \"TODAYS_DATE\": {\n              \"gte\": \"2020-08-31\",\n              \"lte\": \"2020-09-01\",\n              \"format\": \"yyyy-MM-dd\"\n            }\n          }\n        }\n      ],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_parse_question():\n    q = parse_question(QUESTION)\n\n    assert len(q[\"conditions\"]) == 4\n    assert len(q[\"key_clauses\"]) == 5\n    assert len(q[\"field_names\"]) == 17\n    assert len(q[\"field_values\"]) ==","5202":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"High Blood Pressure\"\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"HOSPITAL\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"DISABLE\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"CUR_ILL\": \"Y\"\n          }\n        },\n        {\n          \"","4367":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-05-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n\n    # When generating the elasticsearch query for the question\n    es_query = generate_elasticsearch_query(question=QUESTION)\n\n    # Then it should match the expected result\n    assert json.loads(es_query) == EXPECTED_ES_QUERY","6754":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"trigger finger\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a list of conditions and a list of key words\n    conditions = [\"DIED\", True]\n    keywords = [\"trigger finger\"]\n\n    # WHEN generating an elasticsearch query\n    es_query = generate_elasticsearch_query(conditions=conditions, keywords=keywords)\n\n    # THEN assert it's a valid elasticsearch query\n    assert isinstance(es_query, dict)\n    assert es_query[\"query\"][\"bool\"][\"filter\"][0][\"term\"][\"DIED\"] == True\n    assert","5219":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"PH\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_MANU\": \"PFIZER\\\\BIONTECH\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question string, return an elasticsearch query dict\n    assert generate_elasticsearch_query(question_str) == expected_es_query","6556":"###[ What are the top 5 states in terms of number of deaths?]\nPrompt: ### Elasticsearch database with field names:\n# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES### To generate the Elasticsearch query for the question, first we need to get an Elasticsearch POST search template.Then identify the filed names, condition values, and key clauses (such as \u2019must\u2019, \u2019should\u2019, or","5959":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": false\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"hypothyroid\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = 'Give me all the patients who have hypothyroid.'\n    expected_result = json.loads(EXPECTED_ELASTICSEARCH_QUERY)\n\n    # When\n    result = generate_elasticsearch_query(question)\n\n    # Then\n    assert result == expected_result\n\n\ndef test_generate_elasticsearch_query_with_multiple_conditions():\n    \"\"\"Test that a valid elasticsearch query is generated when there are multiple conditions in the question.\"\"\"","6348":"###[ What is the average age of a vaccine recipient when they were vaccinated? ]\nAnswer:\n\n###[ What percentage of all vaccine recipients have diabetes? ]\nAnswer:\n\n###[ What percentage of all vaccine recipients have hypertension? ]\nAnswer:\n\n###[ What percentage of all vaccine recipients have asthma? ]\nAnswer:\n\n###[ What percentage of all vaccine recipients have heart disease? ]\nAnswer:\n\n###[ What percentage of all vaccine recipients have cancer? ]\nAnswer:\n\n###[ What percentage of all vaccine recipients have chronic lung disease? ]\nAnswer:\n\n###[ What percentage of all vaccine recipients have kidney disease? ]\nAnswer:\n\n###[ What percentage of all vaccine recipients have died after receiving their second dose of Pfizer-BioNTech? ]\nAnswer:","6398":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Pneumonia\"\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"VAERS_ID\"\n    ]\n  }\n}\n\"\"\"\n\ndef parse_question(question):\n    \"\"\"\n    Parses a question into its components\n\n    Args:\n        question (str): The question to be parsed\n    \n    Returns:\n        dict: A","3152":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"vax_date\": {\n              \"gte\": \"2018-12-01\",\n              \"lte\": \"2018-12-01\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"vaers_id\"]\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'Give me all the patients who were diagnosed with diabetes.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question)\n\n    # Then it should return the correct query\n    assert es_query == EXPECTED_ES_QUERY\n\n\nEXPECTED_ES_QUERY_WITH_SYMPTOMS = \"\"\"Prompt: ### Elasticsearch","11214":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"MO\"\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"OT\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_TYPE\": \"COMBO\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED","2634":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-04-12\",\n              \"lte\": \"2022-04-12\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt:\",\n        answer=\"Answer:\",\n        notes=\"Clinical Notes:\",\n        keywords=[\"Elasticsearch\"],\n    )\n    expected_result = json.loads(EXPECTED_ELASTICSEARCH_QUERY)\n\n    # When\n    result = generate_elasticsearch_query(question)\n\n    #","6495":"###[ What are the top 5 states in terms of number of deaths?]\nPrompt: ### Elasticsearch database with field names:\n# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES### To generate the Elasticsearch query for the question, first we need to get an Elasticsearch POST search template.Then identify the filed names, condition values, and key clauses (such as \u2019must\u2019, \u2019should\u2019, or","11620":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Meningococcal meningitis\"\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"N\"\n          }\n        },\n        {\n          \"term\": {\n            \"HOSPITAL\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"DISABLE\": \"N\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME\": \"<NAME>\"\n          }\n        }","58":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-01-28T00:00:00\",\n              \"lte\": \"2022-01-28T23:59:59\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"STATE\",\"AGE_YRS\",\"VAERS_ID\",\"SEX\",\"SYMPTOM_TEXT\",\"DIED\",\"ER_VISIT\",\"L_THREAT\",\"HOSPITAL\",\"HOSPDAYS\",\"DISABLE\",\"VAX_DATE\",\"LAB_DATA\",\"OTHER_MEDS\",\"CUR_ILL\",\"HISTORY\",\"PRIOR_VAX\",\"TODAYS_DATE\",\"OFC_VISIT\",\"VAX_TYPE\",\"VAX_MANU\",\"","2124":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"SMEAR CERVIX\"\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"N\"\n          }\n        },\n        {\n          \"term\": {\n            \"HOSPITAL\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"DISABLE\": \"N\"\n          }\n        },\n        {\n          \"term\": {\n            \"CUR_ILL\": \"Y\"\n          }\n        },\n        {","9736":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-03-28T00:00:00\",\n              \"lte\": \"2022-03-29T00:00:00\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"RECVDATE\",\"STATE\",\"AGE_YRS\",\"VAERS_ID\",\"SEX\",\"SYMPTOM_TEXT\",\"DIED\",\"ER_VISIT\",\"L_THREAT\",\"HOSPITAL\",\"HOSPDAYS\",\"DISABLE\",\"VAX_DATE\",\"LAB_DATA\",\"OTHER_MEDS\",\"CUR_ILL\",\"HISTORY\",\"PRIOR_VAX\",\"TODAYS_DATE\",\"OFC_VISIT\",\"VAX_TYPE\",\"VAX","4912":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 18,\n              \"lte\": 65\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"heart attack\"\n          }\n        },\n        {\n          \"match\": {\n            \"DIED\": \"N\"\n          }\n        },\n        {\n          \"match\": {\n            \"ER_VISIT\": \"Y\"\n          }\n        },\n        {\n          \"match\": {\n            \"L_THREAT\": \"Y\"\n          }\n        },\n        {\n          \"match\": {\n            \"HOSPITAL\": \"Y\"\n          }\n        },\n        {\n          \"range\": {\n            \"HOSPDAYS\": {\n              \"gte\": 30\n            }\n          }","3169":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"vax_date\": {\n              \"gte\": \"07\/01\/2018\",\n              \"lte\": \"07\/01\/2018\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"vaers_id\"]\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'Give me all the patients who were diagnosed with diabetes.'\n\n    # When I call the function to generate the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should return the correct elasticsearch query\n    assert es_query == EXPECTED_ES_QUERY","7135":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        }\n      ],\n      \"must\": [\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"smoking\"\n          }\n        }\n      ]\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"AGE_YRS\",\n      \"DIED\",\n      \"HOSPITAL\",\n      \"HOSPDAYS\",\n      \"DISABLE\",\n      \"LAB_DATA\",\n      \"OTHER_MEDS\",\n      \"CUR_ILL\",\n      \"HISTORY\",\n      \"PRIOR_VAX\",\n      \"","9886":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-04-21\",\n              \"lte\": \"2021-04-21\"\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"STATE\": \"VA\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'Return all cases recorded on 04\/21\/2021.'\n\n    # When generating the corresponding Elasticsearch query\n    elasticsearch_query = generate_elasticsearch_query(question)\n\n    # Then it should match the expected result\n    assert json.loads(elasticsearch_query) == json.loads(EXPECTED_ELASTICSEARCH_","879":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"age_yrs\": {\n              \"gte\": 48.0,\n              \"lte\": 48.0\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"RECVDATE\", \"STATE\", \"AGE_YRS\", \"VAERS_ID\", \"SEX\", \"SYMPTOM_TEXT\", \"DIED\", \"ER_VISIT\", \"L_THREAT\", \"HOSPITAL\", \"HOSPDAYS\", \"DISABLE\", \"VAX_DATE\", \"LAB_DATA\", \"OTHER_MEDS\", \"CUR_ILL\", \"HISTORY\", \"PRIOR_VAX\", \"TODAYS_DATE\", \"OFC_VISIT\", \"VAX_TYPE\", \"VAX_MANU\", \"VAX_L","7950":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"02\/28\/21\",\n              \"lte\": \"02\/28\/21\"\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"VAX_NAME\": \"<NAME>\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'give me all the patients who priviously got vaccinated'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should return the correct query\n    assert es_query == EXPECTED_ES_QUERY","1750":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Urine sodium increased\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"\n    Prompt: ### Elasticsearch database with field names:\n    # RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_","569":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"MT\"\n          }\n        }\n      ],\n      \"must\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [],\n    \"excludes\": []\n  },\n  \"stored_fields\": \"\",\n  \"script_fields\": {},\n  \"docvalue_fields\": [\n    {\n      \"field\": \"RECVDATE\",\n      \"format\": \"date_time\"\n    },\n    {\n      \"field\": \"TODAYS_DATE\",\n      \"format\": \"date_time\"\n    }\n  ],\n  \"sort\": [\n    {\n      \"TODAYS_DATE\": {\n        \"order\": \"desc\"\n      }\n    }\n  ]\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch","7549":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"ALLERGIES\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME\": \"COVID-19 mRNA Vaccine Moderna mRNA COVID-19 Vaccine Janssen (JANSSEN) Covishield (CHADO)\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a question in natural language\n    question = 'Find any cases where the vaccine recipients were allergic to methylphenidate.'\n\n    # WHEN generating the corresponding elasticsearch query\n    es_query =","9785":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-04-13T00:00:00\",\n              \"lte\": \"2022-04-13T23:59:59\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding Elasticsearch query\n    assert generate_elasticsearch_query(question=QUESTION_1) == EXPECTED_QUERY_1\n\n    assert generate_elasticsearch_query(question=QUESTION_2) == EXPECTED_QUERY_2","8727":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": false\n          }\n        },\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2020-03-01\",\n              \"lte\": \"2020-04-01\"\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"POLIO VIRUS, INACTIVATED AND DENGUE TETRAValent\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt:\",","9525":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"USJNJFOC20220104603\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2021-12-01\",\n              \"lte\": \"2021-12-31\"\n            }\n          }\n        }\n      ]\n    }\n  }\n}\nPrompt: ### Elasticsearch database with field names:\n# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HIST","12306":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Pericardial effusion\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'What are the symptoms of COVID-19?'\n\n    # When generating the elasticsearch query\n    es_query = generate","7599":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"ALLERGIES.keyword\": \"Wheat Allergy\"\n          }\n        },\n        {\n          \"range\": {\n            \"TODAYS_DATE\": {\n              \"gte\": \"2021-03-08\",\n              \"lte\": \"2021-04-07\",\n              \"format\": \"yyyy-MM-dd\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HOSPITAL","5017":"'''\n\ndef main():\n    # Create a parser object\n    my_parser = argparse.ArgumentParser(description='Process some integers.')\n\n    # Add positional arguments\n    my_parser.add_argument('question',\n                           metavar='QUESTION',\n                           type=str,\n                           help='Question to be answered')\n\n    # Add optional arguments\n    my_parser.add_argument('-v', '--verbose',\n                           action='store_true',\n                           help='Verbose output')\n\n    args = my_parser.parse_args()\n\n    if args.verbose:\n        print(\"Question is:\", args.question)\n\n    # Get the answer\n    answer = process_question(args.question)\n\n    # Print the answer\n    print(\"\\nAnswer:\")\n    print(answer)\n\n\nif __name__ == \"__main__\":\n    main()","4116":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"03\/04\/2022\",\n              \"lte\": \"03\/04\/2022\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n\n    # When\n    result = generate_elasticsearch_query(question=QUESTION)\n\n    # Then\n    assert result == EXPECTED_RESULT","552":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"ME\"\n          }\n        }\n      ],\n      \"must\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [],\n    \"excludes\": []\n  },\n  \"stored_fields\": \"\",\n  \"script_fields\": {},\n  \"aggregations\": {}\n}\nPrompt: ### Elasticsearch database with field names:\n# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT","11726":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"TX\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAERS_ID\": \"145678\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"HEPB\"\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"HOSPITAL\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"DISABLE\": \"Y\"\n          }\n        },","11874":"{\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        {\n          \"match\": {\n            \"VAX_NAME\": \"MENINGOCOCCAL\"\n          }\n        },\n        {\n          \"match\": {\n            \"VAX_NAME\": \"INFLUENZA\"\n          }\n        }\n      ],\n      \"filter\": [],\n      \"should\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = 'Give me all the patients who got MENINGOCOCCAL (NO BRAND NAME) vaccine and INFLUENZA (SEASONAL) (FLULAVAL QUADRIVALENT) vaccine.'\n    expected_result = json.loads(EXPECTED_ELASTICSEARCH_QUERY)\n\n    # When\n    result = generate_elasticsearch_query(","8938":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"USPFIZER INC\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2021-01-01\",\n              \"lte\": \"2021-12-31\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'give me all the patients who got vaccine manufactured by USPFIZER INC'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should match the expected result\n    assert json.loads(es_","6072":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        },\n        {\n          \"term\": {\n            \"ER_VISIT\": false\n          }\n        },\n        {\n          \"term\": {\n            \"L_THREAT\": false\n          }\n        },\n        {\n          \"term\": {\n            \"HOSPITAL\": false\n          }\n        },\n        {\n          \"term\": {\n            \"DISABLE\": false\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 10,\n              \"lte\": 89\n            }\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a list of conditions extracted from a clinical note","7921":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-01-28\",\n              \"lte\": \"2021-01-28\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_DATE\": {\n              \"value\": \"01\/28\/2021\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'give me all the patients who received at least one dose of Pfizer'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should return the correct query\n    assert","11372":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"UN\"\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"OT\"\n          }\n        },\n        {\n          \"exists\": {\n            \"field\": \"VAX_DATE\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test generating elasticsearch queries.\"\"\"\n    # Test a simple query\n    assert generate_elasticsearch_query(SIMPLE_QUESTION) == EXPECTED_QUERY\n\n    # Test a complex query\n    assert generate_elasticsearch_query(COMPLEX_QUESTION) == COMPLEX_EXPECTED_QUERY\n\n\ndef test_get_question_type():\n    \"\"\"Test getting question type.\"\"\"\n    assert get_question_type(\"What is","5966":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"lyphodenitis\"\n          }\n        },\n        {\n          \"term\": {\n            \"ALLERGIES\": \"diabetes\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = 'Give me all the patients who have lyphodema diabetes.'\n    expected_result = json.loads(EXPECTED_ELASTICSEARCH_QUERY)\n\n    # When\n    result = generate_elasticsearch_query(question)\n\n    # Then\n    assert result == expected_result\n\n\ndef test_generate_elasticsearch_query","1072":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"age_yrs\": {\n              \"gte\": 92.0,\n              \"lte\": 92.0\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"RECVDATE\", \"STATE\", \"AGE_YRS\", \"VAERS_ID\", \"SEX\", \"SYMPTOM_TEXT\", \"DIED\", \"ER_VISIT\", \"L_THREAT\", \"HOSPITAL\", \"HOSPDAYS\", \"DISABLE\", \"VAX_DATE\", \"LAB_DATA\", \"OTHER_MEDS\", \"CUR_ILL\", \"HISTORY\", \"PRIOR_VAX\", \"TODAYS_DATE\", \"OFC_VISIT\", \"VAX_TYPE\", \"VAX_MANU\", \"VAX_L","3811":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-10-16\"\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"SYMPTOM_TEXT\": {\n              \"query\": \"10\/16\/2021\",\n              \"slop\": 5\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n    assert generate_elasticsearch_query(question=QUESTION_1) == EXPECTED_QUERY_1\n\n    assert generate_elasticsearch_query(question=QUESTION_2) == EXPECTED_QUERY_2\n\n    assert generate_elasticsearch_query(question=QUESTION","10609":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"#EW0191\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"RECVDATE\", \"STATE\", \"AGE_YRS\", \"VAERS_ID\", \"SEX\", \"SYMPTOM_TEXT\", \"DIED\", \"ER_VISIT\", \"L_THREAT\", \"HOSPITAL\", \"HOSPDAYS\", \"DISABLE\", \"VAX_DATE\", \"LAB_DATA\", \"OTHER_MEDS\", \"CUR_ILL\", \"HISTORY\", \"PRIOR_VAX\", \"TODAYS_DATE\", \"OFC_VISIT\", \"VAX_TYPE\", \"VAX_MANU\", \"VAX_LOT\", \"VAX_DOSE_SERIES\", \"V","3445":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"vax_date\": {\n              \"gte\": \"1901-02-25T00:00:00\",\n              \"lte\": \"1901-02-25T23:59:59\"\n            }\n          }\n        },\n        {\n          \"match_all\": {}\n        }\n      ],\n      \"must\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n    assert generate_elasticsearch_query(question=QUESTION_1) == EXPECTED_QUERY_1\n\n    assert generate_elasticsearch_query(question=QUESTION_2) == EXPECTED_QUERY_2\n\n    assert generate_elasticsearch_query(question=QUEST","6401":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Syndrome\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"VAERS_ID\"\n    ]\n  }\n}\n\"\"\"\n\n\ndef test_parse_question():\n    q = parse_question(QUESTION)\n\n    assert len(q[\"conditions\"]) == 5\n    assert len(q[\"key_clauses\"]) == 6\n    assert len(q[\"field_names\"]) == 18\n    assert len","5439":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-05T00:00:00\",\n              \"lte\": \"2021-04-04T23:59:59\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME\": \"fentanyl\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"\n    Prompt: ### Elasticsearch database with field names:\n    # RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_","6031":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        },\n        {\n          \"term\": {\n            \"DIAGNOSIS.MDC\": \"4089\/3\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'List all the patients who are dignosed of diabetes.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should return the expected result\n    assert es_query == EXPECTED_ES_QUERY","6326":"'''\n\ndef main():\n    # load data\n    df = pd.read_csv('vaers-january-2021.csv')\n\n    # clean data\n    df['VAERS_ID'] = df['VAERS_ID'].astype(str).apply(lambda x: x.zfill(7))\n    df['VAX_DATE'] = pd.to_datetime(df['VAX_DATE'])\n    df['TODAYS_DATE'] = pd.to_datetime(df['TODAYS_DATE'])\n    df['AGE_YRS'] = df['VAX_DATE'].dt.year - df['BIRTH_YEAR']\n    df['DIED'] = df['DIED'].fillna('')\n    df['SYMPTOM_TEXT'] = df['SYMPTOM1'] + '|' + df['SYMPTOM2'] + '|' + df['SYMPTOM3'] + '|' + df['","1840":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31T00:00:00\",\n              \"lte\": \"2021-09-01T00:00:00\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": {\n              \"value\": \"Cardiomyopathy acute\"\n            }\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'Give me all the patients who have Cardiomyopathy acute after the vaccination.'\n\n    # When generating the elasticsearch query\n    es_query = generate_","10832":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAERS_ID\": \"u022722\"\n          }\n        },\n        {\n          \"range\": {\n            \"TODAYS_DATE\": {\n              \"gte\": \"2020-03-04\",\n              \"lte\": \"2020-03-04\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question string, return the corresponding elasticsearch query\n    assert generate_elasticsearch_query(question_string) == expected_output","3857":"{\n  \"from\": 0,\n  \"size\": 50,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-12-01\"\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"SYMPTOM_TEXT\": {\n              \"query\": \"12\/01\/2021\",\n              \"slop\": 3\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n    assert generate_elasticsearch_query(question=QUESTION_1) == EXPECTED_QUERY_1\n\n    assert generate_elasticsearch_query(question=QUESTION_2) == EXPECTED_","1941":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        },\n        {\n          \"term\": {\n            \"ER_VISIT\": false\n          }\n        },\n        {\n          \"term\": {\n            \"L_THREAT\": false\n          }\n        },\n        {\n          \"term\": {\n            \"HOSPITAL\": false\n          }\n        },\n        {\n          \"term\": {\n            \"DISABLE\": false\n          }\n        },\n        {\n          \"term\": {\n            \"CUR_ILL\": true\n          }\n        },\n        {\n          \"term\": {\n            \"PRIOR_VAX\": false\n          }\n        },\n        {\n          \"term\": {\n            \"OFC_VISIT\": false\n          }\n        },\n        {\n          \"term\": {\n            \"ALLERGIES\": true\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }","4424":"{\n  \"size\": 5000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-01\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n\n    # When generating the elasticsearch query for the question\n    es_query = generate_elasticsearch_query(question=QUESTION)\n\n    # Then it should match the expected result\n    assert json.loads(es_query) == EXPECTED_ES_QUERY","10829":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"_id\": \"E13247\"\n          }\n        },\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2020-08-01\",\n              \"lte\": \"2020-09-01\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question string, return the corresponding elasticsearch query\n    assert generate_elasticsearch_query(question_string) == expected_output","4153":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"07\/28\/2021\",\n              \"lte\": \"07\/28\/2021\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HOSPITAL\",\n      \"HOSPDAYS\",\n      \"DISABLE\",\n      \"VAX_DATE\",","1627":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": {\n              \"value\": \"EYE LID\"\n            }\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'What are the symptoms of COVID-19?'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should return the expected elasticsearch query","11654":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT.keyword\": \"INFLUENZA (SEASONAL)\"\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"N\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME.keyword\": \"(NO BRAND NAME)\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"VAERS_ID\"\n    ]\n  }\n}\n\"\"\"\n\ndef test_","1194":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"age_yrs\": {\n              \"gte\": 107.0,\n              \"lte\": 107.0\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"symptom_text\": \"fever\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    name=\"Document Name\",\n                    url=\"https:\/\/example.com\/document-name\",\n                    fields={\n                        \"field_one\": \"value one\",\n                        \"field_two\": \"value two\",","9636":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"USPFIZER INC\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2021-01-01\",\n              \"lte\": \"2021-12-31\"\n            }\n          }\n        }\n      ]\n    }\n  }\n}\nPrompt: ### What is the average age of all patients who received a Pfizer vaccine in 2021?]\nAnswer:\n{\n  \"size\": 0,\n  \"aggs\": {\n    \"avg_age\": {\n      \"avg\": {\n        \"field\": \"AGE_YRS\"\n      }\n    }\n  },\n  \"query\": {\n    \"bool\": {\n      \"filter\": [","11878":"{\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        {\n          \"match\": {\n            \"VAX_NAME\": \"INFLUENZA (SEASONAL) (FLUZONE HIGH-DOSE)\"\n          }\n        },\n        {\n          \"match\": {\n            \"VAX_NAME\": \"POLIO VIRUS, INACTIVATED\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=ANSWER,\n        notes=\"Clinical Notes\",\n        id=\"1234567890\",\n    )\n\n    # When\n    result = generate_elasticsearch_query(question)\n\n    # Then\n    assert result == EXPECTED_ES_QUERY\n\n\ndef test_generate_elasticsearch_query__no_answer():","8916":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"USPFIZER INC\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2021-12-31\",\n              \"lte\": \"2022-01-01\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'give me all the patients who got vaccine manufactured by USPFIZER INC'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should match the expected result\n    assert json.loads(es_","163":"{\n  \"size\": 5000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-03-31\",\n              \"lte\": \"2022-03-31\"\n            }\n          }\n        },\n        {\n          \"match_all\": {}\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n\n    # When generating the elasticsearch query for the question\n    es_query = generate_elasticsearch_query(question=QUESTION)\n\n    # Then it should match the expected result\n    assert json.loads(es_query) == EXPECTED_ES_QUERY","1833":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Selective IgG Deficiency\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"\n    Prompt: ### Elasticsearch database with field names:\n    # RECVDATE, STATE, AGE_YRS","7393":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Natural Rubber Allergy\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'Show me all the patients who has an allergic to natural rubber.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question)\n\n    # Then it should match the expected result\n    assert json.loads(es_query) == json.loads(EXPECTED_ES_QUERY)","3913":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"08\/27\/2000\"\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"SYMPTOM_TEXT\": {\n              \"query\": \"start\",\n              \"slop\": 15\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'Give me all the patients who died.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should return the correct elasticsearch query\n    assert es_query == EXPECTED_ES_QUERY","8638":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2020-03-01\",\n              \"lte\": \"2020-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"ROTAVIRUS\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"DT ADSORBED\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt:\",\n        answer=\"Answer:\",","11100":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_DOSE_SERIES\": \"UNK\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HOSPITAL\",\n      \"HOSPDAYS\",\n      \"DISABLE\",\n      \"VAX_DATE\",\n      \"LAB_DATA\",\n      \"OTHER_MEDS\",\n      \"CUR_ILL\",\n      \"HISTORY\",\n      \"PRIOR_VAX\",\n      \"TODAYS_DATE\",\n      \"OFC_","1581":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Perfume\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'What are the symptoms of COVID-19?'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should return the expected elasticsearch query\n    assert es_query == EXPECTED_ES","4706":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-01\",\n              \"lte\": \"2021-08-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"AGE_YRS\": 56\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"N\"\n          }\n        },\n        {\n          \"term\": {\n            \"HOSPDAYS\": 439\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n    assert generate_elasticsearch_query","10253":"\"\"\"\n\ndef main():\n    # load data\n    df = pd.read_csv('vaers-january-2021.csv')\n\n    # clean data\n    df['VAERS_ID'] = df['VAERS_ID'].astype(str).apply(lambda x: x.zfill(7))\n    df['VAX_DATE'] = pd.to_datetime(df['VAX_DATE'])\n    df['TODAYS_DATE'] = pd.to_datetime(df['TODAYS_DATE'])\n    df['AGE_YRS'] = df['VAX_DATE'].dt.year - df['TODAYS_DATE'].dt.year\n    df['AGE_YRS'] = df['AGE_YRS'].fillna(-999)\n    df['DIED'] = df['DIED'].replace({'Y': 'Yes', 'N': 'No'})\n    df['CUR_ILL'] = df['CUR","6321":"'''\n\ndef main():\n    # Get command line arguments\n    parser = argparse.ArgumentParser(description='Process some integers.')\n    parser.add_argument('--question', type=str, help='Question to answer')\n\n    args = parser.parse_args()\n    print('Question:', args.question)\n\n    # Load data\n    df = pd.read_csv('.\/data\/vaers-january-2019.csv')\n\n    # Process data\n    df['RECVDATE'] = pd.to_datetime(df['RECVDATE'])\n    df['SYMPTOM_TEXT'] = df['SYMPTOM1'].fillna('') +'' + df['SYMPTOM2'].fillna('') +'' + df['SYMPTOM3'].fillna('') +'' + df['SYMPTOM4'].fillna('') +'' + df['SYMPTOM5'].fillna('') +'' + df['SYMPTOM6'].fillna('') +","6053":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"water retention\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'List all the patients who are dignosed of water retention.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should return the expected result\n    assert es_query == EXPECTED_ES_QUERY","9215":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_NAME\": \"USPFIZER INC202101030266\"\n          }\n        },\n        {\n          \"range\": {\n            \"TODAYS_DATE\": {\n              \"gte\": \"2021-01-01\",\n              \"lte\": \"2021-01-08\",\n              \"format\": \"yyyy-MM-dd\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"What is the number of records that the vaccine recipient got USPFIZER INC202101030266 vaccine","6294":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Right Kidney Cyst\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",","1135":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"age_yrs\": {\n              \"gte\": 89.0,\n              \"lte\": 89.0\n            }\n          }\n        },\n        {\n          \"match_all\": {}\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a list of conditions and a list of fields\n    conditions = [\"89.0\", \"89.0\"]\n    fields = [\"age_yrs\"]\n\n    # WHEN generating an elasticsearch query\n    es_query = generate_elasticsearch_query(conditions=conditions, fields=fields)\n\n    # THEN assert it's a valid elasticsearch query\n    assert json.loads(es_query) == EXPECTED_ES_","6840":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        },\n        {\n          \"term\": {\n            \"ER_VISIT\": false\n          }\n        },\n        {\n          \"term\": {\n            \"L_THREAT\": true\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = 'Search all the patients who are dignosed of arterial stent insertion.'\n    expected_result = json.loads(EXPECTED_ELASTICSEARCH_QUERY)\n\n    # When\n    result = generate_elasticsearch_query(question)\n\n    # Then\n    assert result == expected_result\n\n\ndef test_generate_elasticsearch_query_with_multiple_conditions():\n    \"\"\"Test","1013":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"age_yrs\": {\n              \"gte\": 103.0,\n              \"lte\": 103.0\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"vax_type\": \"COMBO\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return an elasticsearch query that can be used to retrieve relevant documents.\n\n    # When generating the elasticsearch query, we should use the following fields:\n    # - age_yrs\n    # - sex\n    # - state\n    # - hospital\n    # - er_visit\n    # - l_threat\n    # - hospdays\n    # - disable\n    # - cur_ill\n    # -","1604":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Muscle Fatigue\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'What are the symptoms of COVID-19?'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should return the correct query\n    assert es_query == EXPECTED_ES_QUERY","4983":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME\": \"COVID-19 mRNA Vaccine Moderna\"\n          }\n        },\n        {\n          \"term\": {\n            \"TEST_NAME\": \"Ana\"\n          }\n        }\n      ],\n      \"must_not\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [],\n    \"excludes\": []\n  },\n  \"stored_fields\": \"[]\",\n  \"aggregations\": {\n    \"agg_vax_name\": {\n      \"terms\": {\n        \"field\": \"VAX_NAME.keyword\",","11070":"{\n  \"size\": 5000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2020-03-01\",\n              \"lte\": \"2020-06-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"2102142\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_parse_question():\n    q = parse_question(QUESTION)\n\n    assert len(q[\"conditions\"]) == 7\n    assert q[\"conditions\"][0][\"field\"] == \"RECVDATE\"\n    assert q[\"conditions\"][0][\"value\"] == \"2020-03-","6735":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        },\n        {\n          \"term\": {\n            \"ER_VISIT\": false\n          }\n        },\n        {\n          \"term\": {\n            \"L_THREAT\": \"M\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    name=\"Document Name\",\n                    url=\"https:\/\/example.com\/document-name\",\n                    fields={\n                        \"field1\": \"value1\",\n                        \"field2\": \"value2\",\n                    },\n                )\n            ],","6811":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"nerve\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = '### Prompt: ### Elasticsearch database with field names: \\n' +\\\n               '# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX,","12014":"{\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        {\n          \"match\": {\n            \"VAX_NAME\": \"<NAME>\"\n          }\n        },\n        {\n          \"match\": {\n            \"VAX_NAME\": \"ActHIB\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(QUESTION_1)\n\n    # When\n    result = generate_elasticsearch_query(question)\n\n    # Then\n    assert result == EXPECTED_ES_QUERY_1\n\n\nEXPECTED_ES_QUERY_2 = \"\"\"Prompt: ### Elasticsearch database with field names:\n# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSP","6601":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2019-10-31\",\n              \"lte\": \"2020-04-05\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"CUR_ILL\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Hepatitis B\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DI","89":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-05-24T00:00:00\",\n              \"lte\": \"2022-05-24T23:59:59\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"RECVDATE\",\"STATE\",\"AGE_YRS\",\"VAERS_ID\",\"SEX\",\"SYMPTOM_TEXT\",\"DIED\",\"ER_VISIT\",\"L_THREAT\",\"HOSPITAL\",\"HOSPDAYS\",\"DISABLE\",\"VAX_DATE\",\"LAB_DATA\",\"OTHER_MEDS\",\"CUR_ILL\",\"HISTORY\",\"PRIOR_VAX\",\"TODAYS_DATE\",\"OFC_VISIT\",\"VAX_TYPE\",\"VAX","11649":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"INFLUENZA (SEASONAL) (FLUZONE)\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HOSPITAL\",\n      \"HOSPDAYS\",","9507":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"USPFIZER INC\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2021-01-01\",\n              \"lte\": \"2021-12-31\"\n            }\n          }\n        }\n      ]\n    }\n  }\n}\nPrompt: ### What is the average age of all patients who received a Pfizer vaccine in January 2021?]\nAnswer:\n{\n  \"size\": 0,\n  \"aggs\": {\n    \"avg_age\": {\n      \"avg\": {\n        \"field\": \"AGE_YRS\"\n      }\n    }\n  },\n  \"query\": {\n    \"bool\": {\n      \"filter\":","12018":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 25,\n              \"lte\": 64\n            }\n          }\n        },\n        {\n          \"terms\": {\n            \"VAX_NAME\": [\n              \"MENINGOCOCCAL CONJUGATE\",\n              \"DTAP + IPV\"\n            ]\n          }\n        }\n      ],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a list of conditions and a list of fields\n    conditions = [\"VA\", \">=25\", \"<=64\"]","9579":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"USPFIZER INC\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2021-01-01\",\n              \"lte\": \"2021-12-31\"\n            }\n          }\n        }\n      ]\n    }\n  }\n}\nPrompt: ### What is the average age of all patients who received a Pfizer vaccine in January 2021?]\nAnswer:\n{\n  \"size\": 0,\n  \"aggs\": {\n    \"avg_age\": {\n      \"avg\": {\n        \"field\": \"AGE_YRS\"\n      }\n    }\n  },\n  \"query\": {\n    \"bool\": {\n      \"filter\":","5084":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME\": \"Lipase Test\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HOSPITAL\",\n      \"HOSPDAYS\",\n      \"DISABLE\",\n      \"VAX_DATE\",","10224":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_NAME\": \"DTAPIPVHIB\"\n          }\n        },\n        {\n          \"range\": {\n            \"TODAYS_DATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\",\n              \"format\": \"yyyy-MM-dd\"\n            }\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"\n    What are the symptoms of COVID-19?\n    \"\"\"\n\n    # When generating the corresponding Elasticsearch query\n    elasticsearch_query = generate_elasticsearch_query(question=question)\n\n    # Then","3853":"{\n  \"from\": 0,\n  \"size\": 50,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2016-06-01\"\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"SYMPTOM_TEXT\": {\n              \"query\": \"06\/01\/2016\",\n              \"slop\": 3\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n    assert generate_elasticsearch_query(question=QUESTION_1) == EXPECTED_QUERY_1\n\n    assert generate_elasticsearch_query(question=QUESTION_2) == EXPECTED_","905":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"age_yrs\": {\n              \"gte\": 66.0,\n              \"lte\": 66.0\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"RECVDATE\", \"STATE\", \"AGE_YRS\", \"VAERS_ID\", \"SEX\", \"SYMPTOM_TEXT\", \"DIED\", \"ER_VISIT\", \"L_THREAT\", \"HOSPITAL\", \"HOSPDAYS\", \"DISABLE\", \"VAX_DATE\", \"LAB_DATA\", \"OTHER_MEDS\", \"CUR_ILL\", \"HISTORY\", \"PRIOR_VAX\", \"TODAYS_DATE\", \"OFC_VISIT\", \"VAX_TYPE\", \"VAX_MANU\", \"VAX_L","3346":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"06\/19\/2021\",\n              \"lte\": \"06\/19\/2021\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"RECVDATE\",\"STATE\",\"AGE_YRS\",\"VAERS_ID\",\"SEX\",\"SYMPTOM_TEXT\",\"DIED\",\"ER_VISIT\",\"L_THREAT\",\"HOSPITAL\",\"HOSPDAYS\",\"DISABLE\",\"VAX_DATE\",\"LAB_DATA\",\"OTHER_MEDS\",\"CUR_ILL\",\"HISTORY\",\"PRIOR_VAX\",\"TODAYS_DATE\",\"OFC_VISIT\",\"VAX_TYPE\",\"VAX_MANU\",\"VAX_LOT\",\"VAX_DOSE_SER","1435":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-02-15T00:00:00\",\n              \"lte\": \"2022-02-15T23:59:59\"\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"DIED\": \"Y\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n    assert generate_elasticsearch_query(question=QUESTION_1) == EXPECTED_QUERY_1\n\n    assert generate_elasticsearch_query(question=QUESTION_2) == EXPECTED_QUERY_2\n\n    assert","11870":"{\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        {\n          \"match\": {\n            \"VAX_NAME\": \"HPV\"\n          }\n        },\n        {\n          \"match\": {\n            \"VAX_NAME\": \"NO BRAND NAME\"\n          }\n        }\n      ]\n    }\n  }\n}\nPrompt: ### Elasticsearch database with field names:\n# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALL","12555":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Temperature diff in extremity\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_","8605":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"terms\": {\n            \"VAERS_ID\": [\n              \"10853\",\n              \"12690\"\n            ]\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 10,\n              \"lte\": 100\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"ADENOVIRUS TYPES 4 AND\/OR 7; LIVE, ORAL AND INFLUENZA\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    #","12911":"###[ what are the top 3 states that have the highest number of deaths due to covid-19?]\nAnswer:\n\n###[ how many patients were hospitalized in a day?]\nAnswer:\n\n###[ what is the average age of all patients who died?]\nAnswer:\n\n###[ what is the average age of all patients who did not die?]\nAnswer:\n\n###[ what is the average length of stay in days among all patients who died?]\nAnswer:\n\n###[ what is the average length of stay in days among all patients who survived?]\nAnswer:\n\n###[ what is the average number of days spent in the hospital before receiving their vaccination?]\nAnswer:\n\n###[ what is the average number of days spent in the hospital after receiving their vaccination?]\nAnswer:\n\n###[ what is the average number of days","5610":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME\": \"fentanyl\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HOSPITAL\",\n      \"HOSPDAYS\",\n      \"DISABLE\",\n      \"VAX_DATE\",","1012":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"age_yrs\": {\n              \"gte\": 22.0,\n              \"lte\": 22.0\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"vax_type\": \"COMBO\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"\n    Find all patients who received at least one of these two vaccines:\n    - Pfizer-BioNTech\n    - Moderna\n    \n    Prompt: ### Elasticsearch database with field names:\n    # RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_TH","3717":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2014-11-01\",\n              \"lte\": \"2014-11-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n    assert generate_elasticsearch_query(question=QUESTION_1) == EXPECTED_QUERY_1\n\n    assert generate_elasticsearch_query(question=QUESTION_2) == EXPECTED_QUERY_2\n\n    assert generate_elasticsearch_query(question=QUESTION_3) == EXPECTED_QUERY_3\n\n    assert","2254":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Enterobacteriaceae\"\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMP","6203":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": false\n          }\n        },\n        {\n          \"term\": {\n            \"HISTORY.keyword\": \"Alcoholic cirrhosis\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=ANSWER,\n        notes=\"Clinical Notes\",\n        keywords=[\"Elasticsearch\"],\n    )\n\n    # When\n    result = generate_elasticsearch_query(question)\n\n    # Then\n    assert result == EXPECTED_ES_QUERY\n\n\nEXPECTED_SQL_QUERY = \"\"\"-- SQL Prompt: ### SQL database with field","8510":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"INFLUENZA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"DTAP\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\nPrompt: ### Elasticsearch database with field names:\n# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT,","3917":"{\n  \"from\": 0,\n  \"size\": 30,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"05\/29\/2021\"\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"SYMPTOM_TEXT\": {\n              \"query\": \"05\/29\/2021\",\n              \"slop\": 7\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n    assert generate_elasticsearch_query(question=QUESTION_1) == EXPECTED_QUERY_1\n\n    assert generate_elasticsearch_query(question=QUESTION_2) == EXPECTED_","380":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-01-05T00:00:00\",\n              \"lte\": \"2022-01-05T23:59:59\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        }\n      ]\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HOSPITAL\",\n      \"HOSPDAYS\",\n      \"DISABLE\",","357":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-03-03T00:00:00\",\n              \"lte\": \"2022-03-03T23:59:59\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"How many patients' records are received on 03\/03\/2022?\"\"\"\n\n    # When generating the corresponding Elasticsearch query\n    elasticsearch_query = generate_elasticsearch_query(question=","12185":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"TX\"\n          }\n        },\n        {\n          \"terms\": {\n            \"VAX_TYPE\": [\n              \"DTaP\",\n              \"IPV\"\n            ],\n            \"VAX_NAME\": [\n              \"KINRIX\",\n              \"ROTARIX\"\n            ]\n          }\n        }\n      ]\n    }\n  },\n  \"_source\": {\n    \"includes\": []\n  },\n  \"aggs\": {\n    \"agg_1\": {\n      \"composite\": {\n        \"sources\": [\n          {\n            \"STATE\": {\n              \"terms\": {","6990":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"N\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"low pulse rate\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HOSP","2909":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"HOSPDAYS\": {\n              \"gte\": 55.0,\n              \"lte\": 55.0\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": false\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'List all the vaccine recipients have hospitalized for 55.0 days.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should match the expected result\n    assert json.loads(es_query) == json.loads(_expected_result)","6658":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": false\n          }\n        },\n        {\n          \"term\": {\n            \"CUR_ILL\": true\n          }\n        },\n        {\n          \"term\": {\n            \"HISTORY.keyword\": \"contraception\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = 'Give me all the patients who had contraception.'\n    expected_result = json.loads(EXPECTED_ELASTICSEARCH_QUERY)\n\n    # When\n    result = generate_elasticsearch_query(question)\n\n    # Then\n    assert result == expected_result\n\n\ndef test_generate_elasticsearch_query_with_multiple_conditions():\n    \"\"\"Test that a valid","5288":"{\n  \"from\": 0,\n  \"size\": 50,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 30,\n              \"lte\": 79\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"larin fe 1\/20\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_parse_question():\n    q = Question(QUESTION)\n\n    assert len(q.clauses) == 4\n    assert len(q.fields) == 18\n    assert len(q.conditions) == 6\n    assert len(q.field_names) == 1","7666":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": false\n          }\n        },\n        {\n          \"term\": {\n            \"ALLERGIES\": \"aspirin\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 18,\n              \"lte\": 90\n            }\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HOSPITAL\",\n      \"HOSPDAYS\",\n      \"DISABLE\",","7184":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"TX\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Fibrocystic Breast\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"DIED\",\n      \"HOSPITAL\",\n      \"HOSPDAYS\",\n      \"DISABLE\",\n      \"LAB_DATA\",\n      \"OTHER_MEDS\",\n      \"CUR_ILL\",\n      \"HISTORY\",\n      \"PRIOR_VAX\",\n      \"","3732":"{\n  \"from\": 0,\n  \"size\": 30,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"08\/15\/2019\",\n              \"lte\": \"08\/15\/2019\"\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"SYMPTOM_TEXT\": {\n              \"query\": \"onset date of adverse event symptoms\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n\n    # When\n    result = generate_elasticsearch_query(question=QUESTION)\n\n    # Then\n    assert result == EXPECTED_RESULT","1093":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"age_yrs\": {\n              \"gte\": 4.0,\n              \"lte\": 4.0\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"RECVDATE\", \"STATE\", \"AGE_YRS\", \"VAERS_ID\", \"SEX\", \"SYMPTOM_TEXT\", \"DIED\", \"ER_VISIT\", \"L_THREAT\", \"HOSPITAL\", \"HOSPDAYS\", \"DISABLE\", \"VAX_DATE\", \"LAB_DATA\", \"OTHER_MEDS\", \"CUR_ILL\", \"HISTORY\", \"PRIOR_VAX\", \"TODAYS_DATE\", \"OFC_VISIT\", \"VAX_TYPE\", \"VAX_MANU\", \"VAX_LOT\",","9664":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-02-23T00:00:00\",\n              \"lte\": \"2022-02-24T00:00:00\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"RECVDATE\",\"STATE\",\"AGE_YRS\",\"VAERS_ID\",\"SEX\",\"SYMPTOM_TEXT\",\"DIED\",\"ER_VISIT\",\"L_THREAT\",\"HOSPITAL\",\"HOSPDAYS\",\"DISABLE\",\"VAX_DATE\",\"LAB_DATA\",\"OTHER_MEDS\",\"CUR_ILL\",\"HISTORY\",\"PRIOR_VAX\",\"TODAYS_DATE\",\"OFC_VISIT\",\"VAX_TYPE\",\"VAX","6117":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": \"1\"\n          }\n        },\n        {\n          \"term\": {\n            \"ARTHRITIS\": \"1\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    name=\"Document Name\",\n                    url=\"https:\/\/example.com\/document-name\",\n                    fields={\n                        \"field_one\": \"value one\",\n                        \"field_two\": \"value two\",\n                    },\n                )\n            ],\n        ),\n        notes=\"Clinical Notes\",\n        keywords=[\"keyword\"],","38":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-01-08\",\n              \"lte\": \"2022-01-08\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"STATE\", \"AGE_YRS\", \"VAERS_ID\", \"SEX\", \"SYMPTOM_TEXT\", \"DIED\", \"ER_VISIT\", \"L_THREAT\", \"HOSPITAL\", \"HOSPDAYS\", \"DISABLE\", \"VAX_DATE\", \"LAB_DATA\", \"OTHER_MEDS\", \"CUR_ILL\", \"HISTORY\", \"PRIOR_VAX\", \"TODAYS_DATE\", \"OFC_VISIT\", \"VAX_TYPE\", \"VAX_MAN","5846":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2020-03-01\",\n              \"lte\": \"2020-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT.keyword\": \"CYANOCOBALAMIN\"\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"N\"\n          }\n        },\n        {\n          \"term\": {\n            \"HOSPITAL\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"DISABLE\": \"N\"\n          }\n        },\n        {\n          \"term\": {\n            \"CUR_ILL\": \"Y\"\n          }\n        },","175":"{\n  \"size\": 5000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-04-13\",\n              \"lte\": \"2022-04-13\"\n            }\n          }\n        },\n        {\n          \"match_all\": {}\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n\n    # When generating the elasticsearch query for the question\n    es_query = generate_elasticsearch_query(question=QUESTION)\n\n    # Then it should match the expected result\n    assert json.loads(es_query) == EXPECTED_ES_QUERY","7684":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": false\n          }\n        },\n        {\n          \"term\": {\n            \"ALLERGIES\": \"nifedipine\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a question in natural language\n    question = 'How many patients are allergic to nifedipine?'\n\n    # WHEN generating the corresponding elasticsearch query\n    es_query = generate_elasticsearch_query(question)\n\n    # THEN assert it matches the expected result\n    assert json.loads(es_query) == json.loads(_EXPECTED_ES_QUERY_)","5534":"\"\"\"\n\ndef main():\n    # Connect to Elasticsearch\n    es = connectElasticsearch()\n\n    # Get the data from Elasticsearch\n    res = getData(es)\n\n    # Print out the results\n    printResults(res)\n\n\nif __name__ == \"__main__\":\n    main()","965":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"age_yrs\": {\n              \"gte\": 39.0,\n              \"lte\": 39.0\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"vax_type\": \"COMBO\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a list of conditions and a list of fields\n    conditions = [\"VAERS_ID\", \"DIED\"]\n    fields = [\"RECVDATE\", \"STATE\", \"AGE_YRS\", \"VAERS_ID\", \"SEX\", \"SYMPTOM_TEXT\", \"DIED\", \"ER_VISIT\", \"L_THREAT\", \"","7835":"\"\"\"\n\ndef main():\n    # Create a new parser object\n    my_parser = argparse.ArgumentParser(description='Process some integers.')\n\n    # Add positional arguments\n    my_parser.add_argument('question',\n                           metavar='QUESTION',\n                           type=str,\n                           help='Question to be answered')\n\n    # Add optional arguments\n    my_parser.add_argument('-v', '--verbose',\n                           action='store_true',\n                           help='Verbose output')\n\n    args = my_parser.parse_args()\n\n    if args.verbose:\n        print(\"Question:\", args.question)\n\n    # Get the answer\n    answer = process_question(args.question)\n\n    # Print the answer\n    print(\"\\nAnswer:\")\n    print(answer)\n\n\nif __name__ == \"__main__\":\n    main()","3334":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2022-01-13T00:00:00\",\n              \"lte\": \"2022-01-13T23:59:59\"\n            }\n          }\n        },\n        {\n          \"match_all\": {}\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'Give me all the patients who got vaccines on 01\/13\/2022.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should match the expected result\n    assert json","8014":"{\n  \"size\": 5000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2021-10-04\",\n              \"lte\": \"2021-10-04\"\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"VAX_DATE\": {\n              \"query\": \"2021-10-04\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'List all the records who was vaccinated on 10\/4\/21.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=","4715":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-07\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"N\"\n          }\n        },\n        {\n          \"term\": {\n            \"OFC_VISIT\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"COUGH\"\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"TX\"\n          }\n        },\n        {\n          \"term\": {\n            \"TODAYS_DATE\": \"2021-09-06\"\n          }\n        },\n        {\n          \"term\": {\n            \"VA","9003":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"USJNJFOC20220201352\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"*\"\n    ],\n    \"excludes\": []\n  },\n  \"stored_fields\": \"\",\n  \"script_fields\": {},\n  \"docvalue_fields\": [\n    {\n      \"field\": \"RECVDATE\",\n      \"format\": \"date_time\"\n    },\n    {\n      \"field\": \"TODAYS_DATE\",\n      \"format\": \"date_time\"\n    }\n  ],\n  \"sort\": [\n    {\n      \"TODAYS_DATE\": {\n        \"order\": \"desc\"\n      }\n    }\n  ],\n  \"aggregations\": {},\n  \"highlight\": {","9639":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"USPFIZER INC\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2021-01-01\",\n              \"lte\": \"2021-12-31\"\n            }\n          }\n        }\n      ]\n    }\n  }\n}\nPrompt: ### What is the average age of all patients who received a Pfizer vaccine in January 2021?]\nAnswer:\n{\n  \"size\": 0,\n  \"aggs\": {\n    \"avg_age\": {\n      \"avg\": {\n        \"field\": \"AGE_YRS\"\n      }\n    }\n  },\n  \"query\": {\n    \"bool\": {\n      \"filter\":","6274":"###[ What is the average age of a vaccine recipient when they were vaccinated? ]\nAnswer:\n\n###[ What percentage of all vaccine recipients have diabetes? ]\nAnswer:\n\n###[ What percentage of all vaccine recipients have hypertension? ]\nAnswer:\n\n###[ What percentage of all vaccine recipients have asthma? ]\nAnswer:\n\n###[ What percentage of all vaccine recipients have chronic obstructive pulmonary disease? ]\nAnswer:\n\n###[ What percentage of all vaccine recipients have heart failure? ]\nAnswer:\n\n###[ What percentage of all vaccine recipients have COPD? ]\nAnswer:\n\n###[ What percentage of all vaccine recipients have dementia? ]\nAnswer:\n\n###[ What percentage of all vaccine recipients have stroke? ]\nAnswer:\n\n###[ What percentage of all vaccine recipients have kid","9149":"{\n  \"from\": 0,\n  \"size\": 50,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"USPFIZER INC\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HOSPITAL\",\n      \"HOSPDAYS\",\n      \"DISABLE\",\n      \"VAX_DATE\",\n      \"LAB_DATA\",\n      \"OTHER_MEDS\",\n      \"CUR_ILL\",\n      \"HISTORY\",\n      \"PRIOR_VAX\",\n      \"TODAYS_DATE","10692":"{\n  \"size\": 25,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"ZZ\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAERS_ID\": \"037FZ1A\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=ANSWER,\n        notes=\"Clinical Notes\",\n        keywords=[\"Elasticsearch\"],\n    )\n\n    # When\n    result = generate_elasticsearch_query(question)\n\n    # Then\n    assert result == EXPECTED_ES_QUERY\n\n\ndef test_generate_elasticsearch_query__no_answer():\n    \"\"\"Test that None is returned if no answer is provided.\"\"\"","11758":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_NAME.keyword\": \"INFLUENZA (SEASONAL) (FLUMIST)\"\n          }\n        },\n        {\n          \"range\": {\n            \"TODAYS_DATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"VAERS_ID\"\n    ]\n  }\n}\n\"\"\"\n\ndef get_es_template(question):\n    \"\"\"\n    Get the elasticsearch query template based on the question type\n\n    Args:\n        question ([type]): [description]\n\n    Returns:\n        [type]: [description]\n    \"\"\"","535":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"WV\"\n          }\n        }\n      ],\n      \"must\": []\n    }\n  },\n  \"_source\": [\"RECVDATE\", \"STATE\", \"AGE_YRS\", \"VAERS_ID\", \"SEX\", \"SYMPTOM_TEXT\", \"DIED\", \"ER_VISIT\", \"L_THREAT\", \"HOSPITAL\", \"HOSPDAYS\", \"DISABLE\", \"VAX_DATE\", \"LAB_DATA\", \"OTHER_MEDS\", \"CUR_ILL\", \"HISTORY\", \"PRIOR_VAX\", \"TODAYS_DATE\", \"OFC_VISIT\", \"VAX_TYPE\", \"VAX_MANU\", \"VAX_LOT\", \"VAX_DOSE_SERIES\", \"VAX_NAME\", \"ALLERGIES\"]\n}\n\"\"\"","8707":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2020-03-01\",\n              \"lte\": \"2020-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"DTAP\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"POLIO\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"INACT\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_","7967":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-09-24\",\n              \"lte\": \"2021-09-24\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_DATE\": {\n              \"value\": \"9\/24\/2021\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n\n    # When\n    result = generate_elasticsearch_query(question=QUESTION)\n\n    # Then\n    assert result == EXPECTED_RESULT","2350":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"lte\": \"2022-08-05T00:00:00\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'Give me all the patients who died on 05\/08\/2022.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should return the correct elasticsearch query\n    assert es_query == expected_es_query","7996":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2021-07-14\",\n              \"lte\": \"2021-07-14\"\n            }\n          }\n        },\n        {\n          \"match_all\": {}\n        }\n      ],\n      \"must\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'List all the records who was vaccinated on 7\/14\/21.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should match the expected result\n    assert json.loads(es_query) == json.loads(_expected_result)","7529":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"ALLERGIES\": \"Y\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"*\"\n    ],\n    \"excludes\": []\n  },\n  \"stored_fields\": \"\",\n  \"aggregations\": {},\n  \"script_fields\": {},\n  \"docvalue_fields\": [\n    {\n      \"field\": \"@timestamp\",\n      \"format\": \"date_time\"\n    }\n  ],\n  \"sort\": [\n    {\n      \"@timestamp\": {\n        \"order\": \"desc\",\n        \"unmapped_type\": \"boolean\"\n      }\n    }\n  ],\n  \"highlight\": {\n    \"pre_tags\": [","8424":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2020-03-01\",\n              \"lte\": \"2020-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"ANTHRAX\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a list of conditions and a list of fields\n    conditions = [\"RECVDATE >= '2020-03-01'\",\n                  \"RECVDATE <= '2020-04-01'\",","9357":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_NAME\": \"USPFIZER INC202200284884\"\n          }\n        },\n        {\n          \"range\": {\n            \"TODAYS_DATE\": {\n              \"gte\": \"2022-03-07T00:00:00\",\n              \"lte\": \"2022-03-07T23:59:59\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n    assert generate_elasticsearch_query(question=QUESTION_1) == EXPECTED_","12739":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_NAME\": \"Carbonic anhydrase\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2020-01-01\",\n              \"lte\": \"2020-12-31\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test generating elasticsearch queries.\"\"\"\n    # Test a simple query\n    q = Question(\n        prompt=\"Prompt:\",\n        answer=\"Answer:\",\n        context=\"Context:\",\n        notes=\"Notes:\",\n        id=1,\n        source=\"Source:\",\n        tags=[\"tag\"],\n        title=\"Title:\",\n        type=\"type\",","7197":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2019-10-31\",\n              \"lte\": \"2019-10-31\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"TX\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAERS_ID\": \"145867\"\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"HOSPITAL\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"DISABLE\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"CUR_ILL\": \"Y\"\n          }\n        },\n        {\n          \"","5093":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME\": \"COVID-19 mRNA Vaccine Moderna (MVX)\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Cardiovascular disease\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"VAERS_ID\"\n    ]\n  }\n}\n\"\"\"\n\ndef get_es_query(question):\n    \"\"\"\n    This function takes a natural language question","5381":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2020-03-01\",\n              \"lte\": \"2020-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME\": \"Moderna COVID-19 Vaccine Moderna COVID-19 Vaccine\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_parse_question():\n    q = Question(qtext=QUESTION_TEXT)\n\n    assert len(q.clauses) == 5\n    assert len(q.filters) == 2\n    assert len(q.fields) == 16\n    assert","1914":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 18,\n              \"lte\": 90\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"Sedative\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=ConfidenceLevel.HIGH,\n            spans=[Span(start=23, end=45)],\n        ),\n        notes=\"Clinical Notes\",\n        id=\"id\",\n        source","9584":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"USPFIZER INC\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2021-01-01\",\n              \"lte\": \"2021-01-31\"\n            }\n          }\n        }\n      ]\n    }\n  }\n}\nPrompt: ### What is the average age of all patients who received a Pfizer vaccine in January 2021?]\nAnswer:\n{\n  \"size\": 0,\n  \"aggs\": {\n    \"avg_age\": {\n      \"avg\": {\n        \"field\": \"AGE_YRS\"\n      }\n    }\n  },\n  \"query\": {\n    \"bool\": {\n      \"filter\":","5827":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 25,\n              \"lte\": 64\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"estragon\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    name=\"Document Name\",\n                    url=\"https:\/\/example.com\/document-name\",\n                    fields={\n                        \"field_one","9520":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"USPFIZER INC\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2021-01-01\",\n              \"lte\": \"2021-01-04\"\n            }\n          }\n        }\n      ]\n    }\n  }\n}\nPrompt: ### What is the average age of all patients who received a Pfizer vaccine in January 2021?]\nAnswer:\n{\n  \"size\": 0,\n  \"aggs\": {\n    \"avg_age\": {\n      \"avg\": {\n        \"field\": \"AGE_YRS\"\n      }\n    }\n  },\n  \"query\": {\n    \"bool\": {\n      \"filter\":","7058":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"N\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"increased blood pressure\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HO","10130":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 18,\n              \"lte\": 90\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"FLUA4\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    name=\"Document Name\",\n                    url=\"https:\/\/example.com\/document-name\",\n                    fields={\n                        \"field_","830":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"age_yrs\": {\n              \"gte\": 23.0,\n              \"lte\": 23.0\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"RECVDATE\", \"STATE\", \"AGE_YRS\", \"VAERS_ID\", \"SEX\", \"SYMPTOM_TEXT\", \"DIED\", \"ER_VISIT\", \"L_THREAT\", \"HOSPITAL\", \"HOSPDAYS\", \"DISABLE\", \"VAX_DATE\", \"LAB_DATA\", \"OTHER_MEDS\", \"CUR_ILL\", \"HISTORY\", \"PRIOR_VAX\", \"TODAYS_DATE\", \"OFC_VISIT\", \"VAX_TYPE\", \"VAX_MANU\", \"VAX_L","3253":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2021-11-12\",\n              \"lte\": \"2021-11-12\"\n            }\n          }\n        },\n        {\n          \"match_all\": {}\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'Give me all the patients who got vaccines on 11\/12\/2021.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should match the expected result\n    assert json.loads(es_query) == json.loads(_expected_result)","4764":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 25,\n              \"lte\": 64\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"CT HEAD\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef main():\n\n    # Create a parser object\n    my_parser = argparse.ArgumentParser(description='Process some integers.')\n\n    # Add positional arguments\n    my_parser.add_argument('question',\n                           metavar='QUESTION',\n                           type=str,\n                           help='Question text')\n\n    args = my_parser.parse","2438":"{\n  \"size\": 5000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"lte\": \"2021-12-31\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a question in natural language\n    nl = 'Find all vaccine recipients who died on 12\/31\/2021.'\n\n    # WHEN generating an Elasticsearch query\n    es_query = generate_elasticsearch_query(nl)\n\n    # THEN assert it matches the expected result\n    assert json.loads(es_query) == json.loads(_","11686":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"COUGH\"\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"HOSPITAL\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"DISABLE\": \"N\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME\": \"VARICELLA\"\n          }\n        }\n      ],","10148":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-04-01\",\n              \"lte\": \"2021-05-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"flu3\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",","11724":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"TX\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"HEP A\"\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME\": \"COVID-19 mRNA Vaccine Moderna COVID-19 Vaccine Janssen (JANSSEN)\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_","2519":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-12-05\",\n              \"lte\": \"2021-12-05\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n\n    # When generating the elasticsearch query for the question\n    es_query = generate_elasticsearch_query(question=QUESTION)\n\n    # Then it should match the expected result\n    assert json.loads(es_query) == EXPECTED_ES_QUERY","7984":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2022-01-26T00:00:00\",\n              \"lte\": \"2022-01-26T23:59:59\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_TYPE\": \"COMBO\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question string, return the corresponding elasticsearch query\n    assert generate_elasticsearch_query(question_str) == expected_es_query","2021":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT.keyword\": \"Epicondylitis\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"VAERS_ID\"\n    ]\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a question in natural language\n    question = 'How many patients have Epicondylitis after vaccination?'\n\n    # WHEN generating","97":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-03-28T00:00:00\",\n              \"lte\": \"2022-03-28T23:59:59\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"STATE\",\"AGE_YRS\",\"VAERS_ID\",\"SEX\",\"SYMPTOM_TEXT\",\"DIED\",\"ER_VISIT\",\"L_THREAT\",\"HOSPITAL\",\"HOSPDAYS\",\"DISABLE\",\"VAX_DATE\",\"LAB_DATA\",\"OTHER_MEDS\",\"CUR_ILL\",\"HISTORY\",\"PRIOR_VAX\",\"TODAYS_DATE\",\"OFC_VISIT\",\"VAX_TYPE\",\"VAX_MANU\",\"","12067":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_NAME.keyword\": {\n              \"value\": \"HEP B\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME.keyword\": {\n              \"value\": \"INFLUENZA (SEASONAL)\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME.keyword\": {\n              \"value\": \"FLUZONE HIGH-DOSE\"\n            }\n          }\n        }\n      ],\n      \"must\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a list of conditions and a list of fields\n    conditions = [\"VAX_NAME ==","4127":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2016-10-03T00:00:00\",\n              \"lte\": \"2016-10-03T23:59:59\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query can be generated.\"\"\"\n\n    # Given\n    question = Question(\n        'What is the number of cases where onset date of adverse event symptom is 10\/03\/2016.'\n    )\n    expected_result","4790":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_NAME\": \"CRP\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"RECVDATE\", \"STATE\", \"AGE_YRS\", \"VAERS_ID\", \"SEX\", \"SYMPTOM_TEXT\", \"DIED\", \"ER_VISIT\", \"L_THREAT\", \"HOSPITAL\", \"HOSPDAYS\", \"DISABLE\", \"VAX_DATE\", \"LAB_DATA\", \"OTHER_MEDS\", \"CUR_ILL\", \"HISTORY\", \"PRIOR_VAX\", \"TODAYS_DATE\", \"OFC_VISIT\", \"VAX_TYPE\", \"VAX_MANU\", \"VAX_LOT\", \"VAX_DOSE_SERIES\", \"VAX_NAME\",","8554":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": false\n          }\n        },\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"lte\": \"2019-08-31\"\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"BCG\"\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"VARICELLA\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'Give me all the patients who got BCG and VARICELLA before.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)","4169":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2013-11-30T00:00:00\",\n              \"lte\": \"2013-11-30T23:59:59\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n    assert generate_elasticsearch_query(question=QUESTION_1) == EXPECTED_QUERY_1\n\n    assert generate_elasticsearch_query(question=QUESTION_2) == EXPECTED_QUERY_2","2408":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-12\",\n              \"lte\": \"2021-08-12\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'Give me all the patients who died on 08\/12\/2021.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should return the correct elasticsearch query\n    assert es_query == expected_es_query","5464":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME\": \"IPRATROPIUM BROMIDE\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"\n    Prompt: ### Elasticsearch database with field names:\n    # RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_","8643":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": false\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 25,\n              \"lte\": 64\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"MEASLES\"\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"PNEUMONIA\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(QUESTION_TEMPLATE)\n\n    # When\n    result = generate","8407":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2020-03-01\",\n              \"lte\": \"2020-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Yellow fever\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"Find all patients who have yellow fever symptoms before March 1st.\"\"\"\n\n    # When generating the corresponding elasticsearch query\n    es_query = generate_elasticsearch_query(question)\n\n    # Then it should match the expected result\n    assert json.loads(","8468":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME\": \"HIB\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HOSPITAL\",\n      \"HOSPDAYS\",\n      \"DISABLE\",\n      \"VAX_DATE\",\n      \"LAB","4320":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"N\"\n          }\n        },\n        {\n          \"term\": {\n            \"OFC_VISIT\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"COUGH\"\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"TX\"\n          }\n        },\n        {\n          \"term\": {\n            \"TODAYS_DATE\": \"2021-04-05\"\n          }\n        },\n        {\n          \"term\": {\n            \"VA","1626":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Glomerular filtration rate\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'What are the symptoms of COVID-19?'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should return the expected elasticsearch query\n    assert es_query","6922":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 18,\n              \"lte\": 90\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"inflammatory\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HOSPITAL\",\n      \"HOSPDAYS\",","9543":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"USJNJFOC20220233773\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2021-12-01\",\n              \"lte\": \"2021-12-31\"\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n    assert generate_elasticsearch_query(question=QUESTION_1) == EXPECTED_QUERY_1\n\n    assert generate_elasticsearch_query(question=QUESTION_2) == EXPECTED_QUERY_2\n\n    assert generate_elasticsearch","8936":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"USPFIZER INC\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2021-01-01\",\n              \"lte\": \"2021-12-31\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n    assert generate_elasticsearch_query(question=QUESTION_1) == EXPECTED_ES_QUERY_1\n\n    assert generate_elasticsearch_query(question=QUESTION_2) == EXPECTED_ES_QUERY_2\n\n    assert generate_elasticsearch_query(question","3344":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2020-07-26T00:00:00\",\n              \"lte\": \"2020-07-26T23:59:59\"\n            }\n          }\n        },\n        {\n          \"match_all\": {}\n        }\n      ],\n      \"must\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'Give me all the patients who got vaccines on 07\/26\/2020.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)","6278":"###[ What is the average age of a vaccine recipient when they were vaccinated? ]\nAnswer:\n\n###[ What is the percentage of patients who died after receiving their second dose of Pfizer-BioNTech vaccine? ]\nAnswer:\n\n###[ What is the percentage of patients who died after receiving their second dose of Moderna vaccine? ]\nAnswer:\n\n###[ What is the percentage of patients who died after receiving their second dose of Janssen vaccine? ]\nAnswer:\n\n###[ What is the percentage of patients who died after receiving their second dose of any vaccine? ]\nAnswer:\n\n###[ What is the percentage of patients who died after receiving their second dose of any vaccine? ]\nAnswer:\n\n###[ What is the percentage of patients who died after receiving their second dose of any vaccine? ]\nAnswer:","9486":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_NAME\": \"<NAME>\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2021-09-07T00:00:00\",\n              \"lte\": \"2021-09-07T23:59:59\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'Give me all the patients who got USPFIZER INC2021344815 vaccine.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question","5360":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 25,\n              \"lte\": 64\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"fluoxetine\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_parse_question():\n    q = Question(qtext=QTEXT)\n\n    assert len(q.clauses) == 3\n    assert isinstance(q.clauses[0], FilterClause)\n    assert isinstance(q.clauses[1], RangeClause)\n    assert isinstance(q.clauses[","11548":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": false\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"MENINGOCOCCAL CONJUGATE\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    id=\"Document ID\",\n                    type=\"Document Type\",\n                    web_url=\"https:\/\/example.com\/document-id\",\n                )\n            ],\n        ),\n        notes=\"Clinical Notes","1831":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": {\n              \"value\": \"Respiratory tract congestion\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"\n    Prompt: ### Elasticsearch database with field names:\n    # RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL","12806":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Neuralgia\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'Is there any person who has died of COVID-19?'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=","11190":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"LA\"\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"MO\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_TYPE\": \"COMBO\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED","11136":"'''\n\ndef main():\n    # load data\n    df = pd.read_csv('vaers-january-2021.csv')\n\n    # clean data\n    df['VAERS_ID'] = df['VAERS_ID'].astype(str).apply(lambda x: x.zfill(7))\n    df['VAX_DATE'] = pd.to_datetime(df['VAX_DATE'])\n    df['TODAYS_DATE'] = pd.to_datetime(df['TODAYS_DATE'])\n    df['AGE_YRS'] = df['VAX_DATE'].dt.year - df['TODAYS_DATE'].dt.year\n    df['AGE_YRS'] = df['AGE_YRS'].fillna(-999)\n    df['AGE_YRS'] = df['AGE_YRS'].astype(int)\n    df['DIED'] = df['DIED'].replace({'Y","8538":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        },\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"lte\": \"2019-08-31\"\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"HIB AND VACCINE NOT SPECIFIED\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    name=\"Document Name\",\n                    url=\"https:\/\/example.com\/document\",\n                    fields={","11347":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"RI\"\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"LA\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_MANU\": \"Moderna\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_MANU\": \"Pfizer\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HOSPITAL\",\n      \"HOSPDAYS\",","11635":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Hib\"\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"N\"\n          }\n        },\n        {\n          \"term\": {\n            \"HOSPITAL\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"DISABLE\": \"N\"\n          }\n        },\n        {\n          \"term\": {\n            \"CUR_ILL\": \"Y\"\n          }\n        },\n        {\n          \"term\": {","10355":"\"\"\"\nimport json\nfrom elasticsearch import Elasticsearch\nes = Elasticsearch()\n\n\ndef get_query(question):\n    # TODO: write your code here\n\n    return {\n        \"size\": 10000,\n        \"_source\": [\"RECVDATE\", \"STATE\", \"AGE_YRS\", \"VAERS_ID\", \"SEX\", \"SYMPTOM_TEXT\", \"DIED\",\n                    \"ER_VISIT\", \"L_THREAT\", \"HOSPITAL\", \"HOSPDAYS\", \"DISABLE\", \"VAX_DATE\", \"LAB_DATA\",\n                    \"OTHER_MEDS\", \"CUR_ILL\", \"HISTORY\", \"PRIOR_VAX\", \"TODAYS_DATE\", \"OFC_VISIT\",\n                    \"VAX_TYPE\", \"VAX_MANU\", \"VAX_LOT\", \"VAX_DOSE_SERIES\", \"VAX_NAME\", \"ALLERGIES\"],","9790":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-01-30T00:00:00\",\n              \"lte\": \"2022-01-30T23:59:59\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding Elasticsearch query\n    assert generate_elasticsearch_query(question=QUESTION_1) == EXPECTED_QUERY_1\n\n    assert generate_elasticsearch_query(question=QUESTION_2) == EXPECTED_QUERY_2","1747":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Serum ferritin normal\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME\": \"COMIRNATY Pfizer-BioNTech\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"\n    Prompt: ### Elasticsearch database with field names:","12446":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Body Mass Index Decreased\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_","4445":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-05-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": {\n              \"value\": \"fever\"\n            }\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"\n    What are the symptoms of COVID-19?\n    \"\"\"\n\n    # When generating the corresponding Elasticsearch query\n    elasticsearch_query = generate_elasticsearch_query(question=question)\n\n    # Then it should match the expected result","7251":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": \"N\"\n          }\n        },\n        {\n          \"term\": {\n            \"HISTORY\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"ALLERGIES\": \"Y\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(QUESTION_STR)\n\n    # When\n    result = generate_elasticsearch_query(question)\n\n    # Then\n    assert result == EXPECTED_ES_QUERY\n\n\nEXPECTED_ES_QUERY2 = \"\"\"Prompt: ### Elasticsearch database with field names:\n# RECVDATE, STATE, AGE_Y","12899":"###[ Which of these conditions are associated with a higher risk of death? ]\nAnswer:\n\n###[ What is the age distribution of patients who received at least one dose of Pfizer-BioNTech vaccine in California? ]\nAnswer:\n\n###[ How many people have died due to COVID-19 in California? ]\nAnswer:\n\n###[ What is the average number of days spent in hospital before receiving any vaccination? ]\nAnswer:\n\n###[ What is the percentage of people who have had at least one allergy in the past year? ]\nAnswer:\n\n###[ What is the percentage of people who have been diagnosed with cancer in the past year? ]\nAnswer:\n\n###[ What is the percentage of people who have been diagnosed with heart disease in the past year? ]\nAnswer:\n\n###[ What is the percentage of people who have been diag","8709":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": false\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 25,\n              \"lte\": 64\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"Pneumonia\"\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"Anthrax\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(QUESTION_STR)\n\n    # When\n    result = generate","1041":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"age_yrs\": {\n              \"gte\": 88.0,\n              \"lte\": 88.0\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\n    \"RECVDATE\",\n    \"STATE\",\n    \"AGE_YRS\",\n    \"VAERS_ID\",\n    \"SEX\",\n    \"SYMPTOM_TEXT\",\n    \"DIED\",\n    \"ER_VISIT\",\n    \"L_THREAT\",\n    \"HOSPITAL\",\n    \"HOSPDAYS\",\n    \"DISABLE\",\n    \"VAX_DATE\",\n    \"LAB_DATA\",\n    \"OTHER_MEDS\",\n    \"CUR_ILL\",\n    \"HISTORY\",\n    \"PRIOR_VAX\",\n    \"TODAYS_DATE\",\n    \"OFC","7471":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"peanut\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = 'Show me all the patients who has an allergic to peanut.'\n    expected_result = json.loads(EXPECTED_ELASTICSEARCH_QUERY)\n\n    # When\n    result = generate_elasticsearch_query(question)\n\n    # Then\n    assert result == expected_result\n\n\ndef test_generate_elasticsearch_query_with_multiple_conditions():","12449":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Neutropenia\"\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"N\"\n          }\n        },\n        {\n          \"term\": {\n            \"HOSPITAL\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"DISABLE\": \"N\"\n          }\n        },\n        {\n          \"term\": {\n            \"CUR_ILL\": \"Y\"\n          }\n        }\n      ],\n      \"","11593":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"HEPB\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    name=\"Document Name\",\n                    url=\"https:\/\/example.com\/document-name\",\n                    fields={\n                        \"field1\": \"value1\",\n                        \"field2\": \"value2\",\n                    },\n                )\n            ],\n        ),\n        notes=\"Clinical Notes\",\n        keywords=[\"keyword\"],\n        categories","2202":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Metastatic disease of brain\"\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"HOSPITAL\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"DISABLE\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"CUR_ILL\": \"Y\"\n          }\n        }\n      ],","2781":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-01-19T00:00:00\",\n              \"lte\": \"2022-01-19T23:59:59\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a question in natural language\n    question = \"How many patients died on 01\/19\/2022?\"\n\n    # WHEN generating an Elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # THEN assert","8242":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-05-22\",\n              \"lte\": \"2021-05-22\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that the function returns the correct Elasticsearch query.\"\"\"\n\n    # GIVEN a list of conditions and a list of fields\n    conditions = [\"RECVDATE >= '2021-05-22'\", \"DIED == 'Y'\"]\n    fields = [\"RECVDATE\", \"STATE\", \"AGE_YRS\", \"VAERS_ID\", \"SEX\", \"SYMPTOM","11651":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"TX\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Hib\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",","5989":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Polymyalgia\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'List all the patients who are dignosed of polymyalgia.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should match the expected result\n    assert json.loads(es_query) == json.loads(_expected_result)","136":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-04-02\",\n              \"lte\": \"2022-04-02\"\n            }\n          }\n        },\n        {\n          \"match_all\": {}\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n\n    # When generating the elasticsearch query for the question\n    es_query = generate_elasticsearch_query(question=QUESTION)\n\n    # Then it should match the expected result\n    assert json.loads(es_query) == EXPECTED_ES_QUERY","12331":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Nasal dryness\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = 'Give me all the patients who have Nasal dryness after vaccine.'","8057":"{\n  \"size\": 5000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2021-02-18T00:00:00\",\n              \"lte\": \"2021-02-18T23:59:59\"\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"VAX_DATE\": {\n              \"query\": \"2021-02-18T00:00:00\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'List all the records who was vaccinated on 0","8066":"{\n  \"size\": 34768,\n  \"took\": 1,\n  \"timed_out\": false,\n  \"_shards\": {\n    \"total\": 1,\n    \"successful\": 1,\n    \"skipped\": 0,\n    \"failed\": 0\n  },\n  \"hits\": {\n    \"total\": {\n      \"value\": 34768,\n      \"relation\": \"eq\"\n    },\n    \"max_score\": null,\n    \"hits\": [\n      {\n        \"_index\": \"vaers\",\n        \"_type\": \"_doc\",\n        \"_id\": \"AV-cXW8BqZfJ_yKQeR_A\",\n        \"_score\": null,\n        \"_source\": {\n          \"RECVDATE\": \"05\/19\/2022\",\n          \"STATE\": \"TX\",\n          \"AGE_YRS\": \"\",\n          \"VAERS_ID\": \"1","1606":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Pericardial fibrosis\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"What are the symptoms of COVID-19?\"\"\"\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should return the correct query\n    assert es_query == EXPECTED_ES_QUERY\n\n\nEXPECTED_","6092":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 18,\n              \"lte\": 90\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    name=\"Document Name\",\n                    url=\"https:\/\/example.com\/document-name\",\n                    fields={\n                        \"field_one\": \"value one\",\n                        \"field_two\": \"value two\"\n                    }\n                )","12963":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_TYPE\": \"JANSSEN\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HOSPITAL\",","10602":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"SH\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_LOT\": \"8020\"\n          }\n        }\n      ],\n      \"must\": []\n    }\n  }\n}\nPrompt: ### Elasticsearch database with field names:\n# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES,","3968":"{\n  \"size\": 5000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-12-29\",\n              \"lte\": \"2021-12-29\"\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"SYMPTOM_TEXT\": {\n              \"query\": \"adverse event\"\n            }\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n\n    # When generating the elasticsearch query for the question\n    es_query = generate_elasticsearch_query(question=QUESTION)\n\n    # Then it should match the expected result\n    assert json.loads(es","6842":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"infected toe\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'Who is diagnosed with COVID-19?'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should return the expected result\n    assert es_query == EXPECTED_ES_QUERY\n\n\nEXPECTED_ES_QUERY2 = \"\"\"Prompt: ### Elasticsearch database with field names:\n# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM","8797":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"terms\": {\n            \"SYMPTOM_TEXT\": [\n              \"MENINGOCOCCAL B\",\n              \"JAPANESE ENCEPHALITIS\"\n            ]\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMP","6573":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Vestibular disorder\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"DIED\",\n      \"HOSPITAL\",\n      \"HOSPDAYS\",\n      \"DISABLE\",\n      \"VAX_DATE\",\n      \"LAB_DATA\",\n      \"OTHER_MEDS\",\n      \"CUR_ILL\",","11119":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"_id\": \"1023\"\n          }\n        },\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2020-08-01\",\n              \"lte\": \"2020-09-01\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n    assert generate_elasticsearch_query(question=QUESTION_1) == EXPECTED_QUERY_1\n\n    assert generate_elasticsearch_query(question=QUESTION_2) == EXPECTED_QUERY_2\n\n    assert generate_elasticsearch_query(question=QUESTION_3) == EXPECTED_QUERY","2538":"{\n  \"size\": 5000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-01-28\",\n              \"lte\": \"2022-01-28\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a question in natural language\n    question = 'Find all vaccine recipients who died on 01\/28\/2022.'\n\n    # WHEN generating an Elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # THEN assert it matches","8091":"{\n  \"size\": 5000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2021-03-07\",\n              \"lte\": \"2021-03-07\"\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"VAX_DATE\": {\n              \"query\": \"2021-03-07\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'List all the records who was vaccinated on 3\/7\/2021.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question","4974":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 18,\n              \"lte\": 65\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"left shoulder mri test\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef main():\n\n    # Create a parser object\n    my_parser = argparse.ArgumentParser(description='Process some integers.')\n\n    # Add positional arguments\n    my_parser.add_argument('question',\n                           metavar='QUESTION',\n                           type=str,\n                           help='Question text')\n\n    # Add optional arguments\n    my_parser.add_argument('-v', '--verbose', action='store","3258":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"03\/20\/2022\",\n              \"lte\": \"03\/20\/2022\"\n            }\n          }\n        },\n        {\n          \"match_all\": {}\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n\n    # Given a question in natural language\n    question = 'Give me all the patients who got vaccines on 03\/20\/2022.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should match the expected result\n    assert json.loads(es_query) == json.loads(_expected_result)","7699":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"ALLERGIES.keyword\": \"naproxen\"\n          }\n        },\n        {\n          \"range\": {\n            \"TODAYS_DATE\": {\n              \"gte\": \"2021-03-08\",\n              \"lte\": \"2021-04-07\",\n              \"format\": \"yyyy-MM-dd\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HOSPITAL\",","11478":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_NAME.keyword\": {\n              \"value\": \"INFLUENZA (SEASONAL) (FLUZONE HIGH-DOSE QUADRIVALENT)\",\n              \"boost\": 1.0\n            }\n          }\n        },\n        {\n          \"range\": {\n            \"TODAYS_DATE\": {\n              \"gte\": null,\n              \"lte\": null,\n              \"format\": \"strict_date_optional_time\",\n              \"boost\": 1.0\n            }\n          }\n        }\n      ],\n      \"should\": [],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'What are","10700":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"04\"\n          }\n        },\n        {\n          \"term\": {\n            \"AGE_YRS\": \"35-39\"\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_DATE\": \"04\/28\/2021\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_parse_question():\n    q = parse_question(QUESTION)\n\n    assert len(q[\"conditions\"]) == 6\n    assert len(q[\"key_clauses\"]) == 2\n    assert len(q[\"field_names\"]) == 17","5165":"\"\"\"\n\ndef main():\n    # Create the parser\n    my_parser = argparse.ArgumentParser(description='Process some integers.')\n\n    # Add the arguments\n    my_parser.add_argument('question',\n                           metavar='QUESTION',\n                           type=str,\n                           help='Question to be answered')\n\n    args = my_parser.parse_args()\n    print(\"Question:\", args.question)\n    answer = process_question(args.question)\n    print(\"Answer:\")\n    print(answer)\n\n\nif __name__ == '__main__':\n    main()","236":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-05-22T00:00:00\",\n              \"lte\": \"2022-05-23T00:00:00\"\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"SYMPTOM_TEXT\": {\n              \"query\": \"fever\"\n            }\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'List all the records received between 05\/22\/2022 and 05\/23\/2","6086":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"age_yrs\": {\n              \"gte\": 18,\n              \"lte\": 90\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"died\": true\n          }\n        },\n        {\n          \"match\": {\n            \"symptom_text\": \"overweight\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    name=\"Document Name\",\n                    url=\"https:\/\/example.com\/document-name\",\n                    fields={\n                        \"field_one\": \"","7507":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"ALLERGIES\": \"B\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HOSPITAL\",\n      \"HOSPDAYS\",\n      \"DISABLE\",\n      \"VAX_DATE\",\n      \"LAB_DATA\",\n      \"OTHER_MEDS\",\n      \"CUR_ILL\",\n      \"HISTORY\",\n      \"PRIOR_VAX","4491":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-06\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"N\"\n          }\n        },\n        {\n          \"term\": {\n            \"OFC_VISIT\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"COUGH\"\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"TX\"\n          }\n        },\n        {\n          \"term\": {\n            \"TODAYS_DATE\": \"2021-09-06\"\n          }\n        },\n        {\n          \"term\": {\n            \"VA","10472":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"MI\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_MANU\": \"<NAME>\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a list of conditions and a list of fields\n    conditions = [\"STATE == 'MI'\", \"VAX_MANU == '<NAME>'\"]\n    fields = ['RECVDATE', 'STATE', 'AGE_YRS', 'VAERS_ID', 'SEX',\n              'SYMPTOM_TEXT', 'DIED', 'ER_VISIT', 'L_THREAT', 'HOSPITAL',\n              'HOSPDAYS', 'DISABLE', 'V","12403":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"ELECTROCARDIOGRAM ST SEGMENT ABNORMAL\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'What are the symptoms of COVID-19?'\n\n    # When generating the elasticsearch query","3601":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-30T00:00:00\",\n              \"lte\": \"2021-08-30T23:59:59\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_DATE\": {\n              \"value\": \"08\\\/30\\\/2021\"\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n    assert generate_elasticsearch_query(question=QUESTION_1) == EXPECTED_QUERY_1\n\n    assert generate_elasticsearch_query(question=QUESTION_","3491":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"vax_date\": {\n              \"gte\": \"2021-12-17\",\n              \"lte\": \"2021-12-17\"\n            }\n          }\n        },\n        {\n          \"match_all\": {}\n        }\n      ],\n      \"must\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding Elasticsearch query\n\n    # When generating the Elasticsearch query for the question,\n    # Then the generated Elasticsearch query should be correct\n    assert generate_elasticsearch_query(question=QUESTION_1) == EXPECTED_ES_QUERY_1\n    assert generate_elasticsearch_query(question=QUESTION_2) == EXPECTED_ES_QUERY_2\n    assert generate_","3202":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"vax_date\": {\n              \"gte\": \"03\/12\/2022\",\n              \"lte\": \"03\/12\/2022\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"vaers_id\"]\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n\n    # When the question contains multiple conditions\n    question = 'Give me all the patients who were diagnosed with COVID-19 before 03\/12\/2022.' \\\n              'And also give me their VAERS ID numbers'\n    expected_result = \"\"\"\nPrompt: ### Elasticsearch database with field names:\n# RECVDATE","1137":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"age_yrs\": {\n              \"gte\": 0.57999999999999996,\n              \"lte\": 0.58000000000000004\n            }\n          }\n        },\n        {\n          \"match_all\": {}\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a list of conditions and a list of fields\n    conditions = [\"0.58 years\"]\n    fields = [\"age_yrs\"]\n\n    # WHEN generating an elasticsearch query\n    es_query = generate_elasticsearch_query(conditions=conditions, fields=fields)","8405":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2020-03-01\",\n              \"lte\": \"2020-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"BCG\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'Find all records who got BCG shot before.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should return the expected elasticsearch query\n    assert json.loads(es_query) ==","2286":"'''\n\ndef main():\n    # load data\n    df = pd.read_csv('vaers-january-2021.csv')\n\n    # clean data\n    df['VAERS_ID'] = df['VAERS_ID'].astype(str).apply(lambda x: x.zfill(7))\n    df['VAX_DATE'] = pd.to_datetime(df['VAX_DATE'])\n    df['TODAYS_DATE'] = pd.to_datetime(df['TODAYS_DATE'])\n    df['AGE_YRS'] = df['VAX_DATE'].dt.year - df['TODAYS_DATE'].dt.year\n    df['DIED'] = df['DIED'].fillna('')\n    df['SYMPTOM_TEXT'] = df['SYMPTOM_TEXT'].fillna('')\n    df['ALLERGIES'] = df['ALLERGIES'].fillna('')\n    df['HISTORY']","9984":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-03-01\",\n              \"lte\": \"2022-05-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_parse_question():\n    assert parse_question(QUESTION) == EXPECTED_RESULT","10019":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-03-10\",\n              \"lte\": \"2022-03-10\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"How many people have been recorded?\",\n        answer=None,\n        notes=\"On 03\/10\/2022, how many people have been recorded?\",\n        context=\"\",\n        qid=\"test_qid\",\n    )\n    expected_result = json.loads(_EXPECTED_ELASTICSEARCH_","711":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"RI\"\n          }\n        }\n      ]\n    }\n  },\n  \"_source\": {\n    \"includes\": []\n  },\n  \"aggs\": {\n    \"groupby_state\": {\n      \"terms\": {\n        \"field\": \"STATE\",\n        \"size\": 5\n      },\n      \"aggs\": {\n        \"groupby_age_yrs\": {\n          \"terms\": {\n            \"field\": \"AGE_YRS\",\n            \"size\": 5\n          },\n          \"aggs\": {\n            \"groupby_sex\": {\n              \"terms\":","13028":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_TYPE\": \"JANSSEN\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HOSPITAL\",","10968":"{\n  \"size\": 5000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2020-08-01\",\n              \"lte\": \"2020-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"0331421A\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_parse_question():\n    q = parse_question(QUESTION)\n\n    assert len(q[\"conditions\"]) == 7\n    assert q[\"conditions\"][0][\"field\"] == \"RECVDATE\"\n    assert q[\"conditions\"][0][\"value\"] == \"2020-08","1086":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"age_yrs\": {\n              \"gte\": 1.83,\n              \"lte\": 1.83\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"RECVDATE\", \"STATE\", \"AGE_YRS\", \"VAERS_ID\", \"SEX\", \"SYMPTOM_TEXT\", \"DIED\", \"ER_VISIT\", \"L_THREAT\", \"HOSPITAL\", \"HOSPDAYS\", \"DISABLE\", \"VAX_DATE\", \"LAB_DATA\", \"OTHER_MEDS\", \"CUR_ILL\", \"HISTORY\", \"PRIOR_VAX\", \"TODAYS_DATE\", \"OFC_VISIT\", \"VAX_TYPE\", \"VAX_MANU\", \"VAX_L","3164":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"vax_date\": {\n              \"gte\": \"07\/19\/2021\",\n              \"lte\": \"07\/19\/2021\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"vaers_id\"]\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n\n    # When the question contains multiple conditions\n    question = 'Give me all the patients who were diagnosed with COVID-19 before 03\/05\/2021.' \\\n              'And also give me their VAERS ID numbers'\n    expected_result = \"\"\"\nPrompt: ### Elasticsearch database with field names:\n# RECVDATE","9974":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-12-06\",\n              \"lte\": \"2021-12-06\"\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"SYMPTOM_TEXT\": {\n              \"query\": \"fever\"\n            }\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding Elasticsearch query\n\n    # When generating the Elasticsearch query for the question\n    elasticsearch_query = generate_elasticsearch_query(question=QUESTION)\n\n    # Then it should match the expected result\n    assert json.loads(EXPECTED_ELASTICSEARCH_QUERY) == json.","3657":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-10-01\",\n              \"lte\": \"2021-10-01\"\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"SYMPTOM_TEXT\": {\n              \"query\": \"onset date of adverse event symptoms\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n    assert generate_elasticsearch_query(question=QUESTION_1) == EXPECTED_ES_QUERY_1\n\n    assert generate_elasticsearch_query(question=QUESTION_2) == EXPECTED_ES_QUERY_2","755":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"age_yrs\": {\n              \"gte\": 90.0,\n              \"lte\": 90.0\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"RECVDATE\", \"STATE\", \"AGE_YRS\", \"VAERS_ID\", \"SEX\", \"SYMPTOM_TEXT\", \"DIED\", \"ER_VISIT\", \"L_THREAT\", \"HOSPITAL\", \"HOSPDAYS\", \"DISABLE\", \"VAX_DATE\", \"LAB_DATA\", \"OTHER_MEDS\", \"CUR_ILL\", \"HISTORY\", \"PRIOR_VAX\", \"TODAYS_DATE\", \"OFC_VISIT\", \"VAX_TYPE\", \"VAX_MANU\", \"VAX_L","12879":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Pharyngeal Cyst\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"Is there any person who has died of COVID-19?\"\"\"\n\n    # When generating the corresponding Elasticsearch query\n    elasticsearch_query = generate_","12748":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT.keyword\": \"IIIrd nerve disorder\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"Is there any person who has had COVID-19 before age 65 died of other illness?\"\"\"\n\n    # When generating the","199":"{\n  \"size\": 5000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-01-13T00:00:00\",\n              \"lte\": \"2022-01-14T00:00:00\"\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"SYMPTOM_TEXT\": {\n              \"query\": \"fever\"\n            }\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'List all the records received between January 13th, 2022 and January 14th, 20","9119":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"USJNJFOC20220237050\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"*\"\n    ],\n    \"excludes\": []\n  },\n  \"stored_fields\": \"\",\n  \"script_fields\": {},\n  \"docvalue_fields\": [\n    {\n      \"field\": \"RECVDATE\",\n      \"format\": \"date_time\"\n    },\n    {\n      \"field\": \"TODAYS_DATE\",\n      \"format\": \"date_time\"\n    }\n  ],\n  \"sort\": [\n    {\n      \"TODAYS_DATE\": {\n        \"order\": \"desc\"\n      }\n    }\n  ],\n  \"aggregations\": {},\n  \"highlight\": {","9482":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_NAME\": \"USJNJFOC20220151104\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"RECVDATE\", \"STATE\", \"AGE_YRS\", \"VAERS_ID\", \"SEX\", \"SYMPTOM_TEXT\", \"DIED\", \"ER_VISIT\", \"L_THREAT\", \"HOSPITAL\", \"HOSPDAYS\", \"DISABLE\", \"VAX_DATE\", \"LAB_DATA\", \"OTHER_MEDS\", \"CUR_ILL\", \"HISTORY\", \"PRIOR_VAX\", \"TODAYS_DATE\", \"OFC_VISIT\", \"VAX_TYPE\", \"VAX_MANU\", \"VAX_LOT\", \"VAX","11369":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"TX\"\n          }\n        },\n        {\n          \"terms\": {\n            \"VAX_TYPE\": [\n              \"COMBO\",\n              \"PFIZER\\u00ae (BIONTECH)\",\n              \"MODERNA\",\n              \"JANSSEN\",\n              \"COVID-19 mRNA Vaccine Moderna\",\n              \"COVID-19 Vaccine Janssen\",\n              \"COVID-19 mRNA Vaccine J&J\",\n              \"COVID-19 Vaccine AstraZ","2606":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-07-25T00:00:00\",\n              \"lte\": \"2021-07-25T23:59:59\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding Elasticsearch query\n\n    # When generating the Elasticsearch query for the question\n    elasticsearch_query = generate_elasticsearch_query(question=QUESTION)\n\n    # Then it should match the expected result\n    assert json.loads(elasticsearch_query)","11487":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_NAME.keyword\": \"TETANUS DIPHTHERIA\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME.keyword\": \"NO BRAND NAME\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\nPrompt: ### Elasticsearch database with field names:\n# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU,","5793":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2020-03-01\",\n              \"lte\": \"2020-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"MIRALAX PRN\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt:\",\n        answer=None,\n        notes=\"Clinical Notes:\",\n        code=None,\n        id=None,\n        meta={\n            \"field_names\": [\"","10086":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-01-30T00:00:00\",\n              \"lte\": \"2021-01-30T23:59:59\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        }\n      ]\n    }\n  }\n}\nPrompt: ### How many people were vaccinated on January 30th, 2021 in Virginia?\n# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX","10119":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 18,\n              \"lte\": 90\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"flu3\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    name=\"Document Name\",\n                    url=\"https:\/\/example.com\/document-name\",\n                    fields={\n                        \"field_one","7607":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": \"N\"\n          }\n        },\n        {\n          \"term\": {\n            \"HISTORY.keyword\": \"Food Allergy\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HOSPITAL\",\n      \"HOSPDAYS\",\n      \"DISABLE\",\n      \"VAX_DATE\",\n      \"LAB_DATA\",\n      \"OTHER_MEDS\",\n      \"CUR_ILL\",\n      \"HISTORY\",\n      \"PRIOR_VAX\",","7046":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Nerve Block\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HO","9571":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"USPFIZER INC\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2021-01-01\",\n              \"lte\": \"2021-12-31\"\n            }\n          }\n        }\n      ]\n    }\n  }\n}\nPrompt: ### What is the average age of all patients who received a Pfizer vaccine in 2021?]\nAnswer:\n{\n  \"size\": 0,\n  \"aggs\": {\n    \"avg_age\": {\n      \"avg\": {\n        \"field\": \"AGE_YRS\"\n      }\n    }\n  },\n  \"query\": {\n    \"bool\": {\n      \"filter\": [","12046":"{\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        {\n          \"match\": {\n            \"VAX_NAME\": \"<NAME>\"\n          }\n        },\n        {\n          \"match\": {\n            \"VAX_NAME\": \"<NAME>\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(QUESTION_1)\n\n    # When\n    result = generate_elasticsearch_query(question)\n\n    # Then\n    assert result == EXPECTED_ES_QUERY_1\n\n\nEXPECTED_ES_QUERY_2 = \"\"\"Prompt: ### Elasticsearch database with field names:\n# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS","8826":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"EBOLA ZAIRE\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"DENGUE TETRAVALENT\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(QUESTION_1)\n\n    # When\n    result = generate_elasticsearch_query(question)\n\n    # Then\n    assert result == EXPECTED_QUERY_1\n\n\nEXPECTED_QUERY_2 = \"\"\"Prompt: ### Elasticsearch database with field names:\n# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER","1065":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"age_yrs\": {\n              \"gte\": 44.0,\n              \"lte\": 44.0\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"RECVDATE\", \"STATE\", \"AGE_YRS\", \"VAERS_ID\", \"SEX\", \"SYMPTOM_TEXT\", \"DIED\", \"ER_VISIT\", \"L_THREAT\", \"HOSPITAL\", \"HOSPDAYS\", \"DISABLE\", \"VAX_DATE\", \"LAB_DATA\", \"OTHER_MEDS\", \"CUR_ILL\", \"HISTORY\", \"PRIOR_VAX\", \"TODAYS_DATE\", \"OFC_VISIT\", \"VAX_TYPE\", \"VAX_MANU\", \"VAX_L","9198":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"USPFIZER INC\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\n    \"RECVDATE\",\n    \"STATE\",\n    \"AGE_YRS\",\n    \"VAERS_ID\",\n    \"SEX\",\n    \"SYMPTOM_TEXT\",\n    \"DIED\",\n    \"ER_VISIT\",\n    \"L_THREAT\",\n    \"HOSPITAL\",\n    \"HOSPDAYS\",\n    \"DISABLE\",\n    \"VAX_DATE\",\n    \"LAB_DATA\",\n    \"OTHER_MEDS\",\n    \"CUR_ILL\",\n    \"HISTORY\",\n    \"PRIOR_VAX\",\n    \"TODAYS_DATE\",\n    \"OFC_VISIT\",\n    \"VAX_TYPE\",\n    \"V","2607":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-02-27T00:00:00\",\n              \"lte\": \"2022-02-28T00:00:00\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a question in natural language\n    question = 'How many patients passed away on 02\/27\/2022.'\n\n    # WHEN generating the corresponding elasticsearch query\n    es_query","5880":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": false\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 0,\n              \"lte\": 120\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"anemic\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = 'Give me all the patients who have anemic.'\n    expected_result = json.loads(EXPECTED_ELASTICSEARCH_QUERY)\n\n    # When\n    result = generate_elasticsearch_query(question)\n\n    # Then\n    assert result == expected_result\n\n\ndef","1307":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"1985-01-01\",\n              \"lte\": \"2021-04-30\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"AGE_YRS\": 96.0\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query can be generated.\"\"\"\n\n    # GIVEN a list of conditions\n    conditions = [\n        Condition(\n            name=\"RECVDATE\",\n            operator=OperatorEnum.GREATER_THAN_OR_EQUALS,\n            value=\"1985-01-01\",\n        ),\n        Condition(","7533":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"ALLERGIES\": \"Nut Allergy\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=ANSWER,\n        notes=\"Clinical Notes\",\n        keywords=[\"Elasticsearch\"],\n    )\n\n    # When\n    result = generate_elasticsearch_query(question)\n\n    # Then\n    assert result == EXPECTED_ES_QUERY\n\n\nEXPECTED_SQL_QUERY = \"\"\"-- SQL Prompt: ### SQL database with field names:\n# RECVDATE, STATE, A","11442":"\"\"\"\n\ndef main():\n    # Create a parser object\n    my_parser = argparse.ArgumentParser(description='Process some integers.')\n\n    # Add positional arguments\n    my_parser.add_argument('question',\n                           metavar='QUESTION',\n                           type=str,\n                           help='Question text')\n\n    # Add optional arguments\n    my_parser.add_argument('-v', '--verbose',\n                           action='store_true',\n                           help='Verbose output')\n\n    args = my_parser.parse_args()\n\n    if args.verbose:\n        print(\"Question:\", args.question)\n\n\nif __name__ == \"__main__\":\n    main()","6680":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"angioplasty\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"RECVDATE\", \"STATE\", \"AGE_YRS\", \"VAERS_ID\", \"SEX\", \"SYMPTOM_TEXT\", \"DIED\", \"ER_VISIT\", \"L_THREAT\", \"HOSPITAL\", \"HOSPDAYS\", \"DISABLE\", \"VAX_DATE\", \"LAB_DATA\", \"OTHER_MEDS\", \"CUR_ILL\", \"HISTORY\", \"PRIOR_VAX\", \"TODAYS_DATE\", \"OFC_VISIT\", \"VAX_TYPE\", \"VAX_MANU\", \"VAX_LOT\", \"VAX_DOSE_SERIES\", \"VAX","8287":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-28T00:00:00\",\n              \"lte\": \"2021-03-28T23:59:59\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given\n    question = Question(\n        \"How many patients got a shot on 3\/28\/2021?\",\n        \"RECVDATE >= '2021-03-28' AND RECVDATE <= '2021-03-28' AND DIED ==","11889":"{\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        {\n          \"match\": {\n            \"VAX_NAME\": \"ROTAVIRUS\"\n          }\n        },\n        {\n          \"match\": {\n            \"VAX_NAME\": \"HEP A\"\n          }\n        }\n      ]\n    }\n  }\n}\nPrompt: ### Elasticsearch database with field names:\n# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME,","3421":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"vax_date\": {\n              \"gte\": \"08\/04\/2021\",\n              \"lte\": \"08\/04\/2021\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"vax_type\": \"COMBO\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding Elasticsearch query\n\n    # When generating the Elasticsearch query for the question,\n    # Then the generated Elasticsearch query should be correct\n    assert generate_elasticsearch_query(question=QUESTION_1) == EXPECTED_ES_QUERY_1\n    assert generate_elasticsearch_query(question=QUESTION","9778":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-04-20T00:00:00\",\n              \"lte\": \"2021-04-20T23:59:59\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding Elasticsearch query\n    assert generate_elasticsearch_query(question=QUESTION_1) == EXPECTED_QUERY_1\n\n    assert generate_elasticsearch_query(question=QUESTION_2) == EXPECTED_QUERY_2","10162":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2020-03-01\",\n              \"lte\": \"2020-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"TX\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"PNC20\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"How many people has got PNC20?\"\"\"\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)","8631":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": false\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 25,\n              \"lte\": 89\n            }\n          }\n        },\n        {\n          \"terms\": {\n            \"SYMPTOM_TEXT\": [\n              \"ADENOVIRUS TYPE 4\",\n              \"ADENOVIRUS TYPE 7\"\n            ]\n          }\n        },\n        {\n          \"terms\": {\n            \"TODAYS_TEST\": [\n              \"LIVE\",\n              \"ORAL\"\n            ]\n          }\n        },\n        {\n          \"terms\": {\n            \"VAX_TYPE\": [\n              \"VARICELLA\"\n            ]\n          }\n        }\n      ],\n      \"must_not\": [],","8153":"{\n  \"size\": 5000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"lte\": \"2021-11-20\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_DATE\": {\n              \"value\": \"\",\n              \"boost\": 1\n            }\n          }\n        }\n      ],\n      \"should\": [],\n      \"must\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given\n    question = Question(\n        prompt=\"Find all records who received a vaccine before on 11\/20\/2021.\",\n        answer=\"\",\n        context=None,\n        qid=\"test\",\n        metadata={\"field_names\": [\"RECVDATE\", \"STATE\", \"AGE_YRS\", \"VAERS_ID\", \"","12686":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 25,\n              \"lte\": 64\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"Biopsy of lung\"\n          }\n        },\n        {\n          \"match\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"match\": {\n            \"HOSPITAL\": \"Y\"\n          }\n        },\n        {\n          \"match\": {\n            \"DISABLE\": \"Y\"\n          }\n        },\n        {\n          \"match\": {\n            \"CUR_ILL\": \"Y\"\n          }\n        },\n        {\n          \"match\": {\n            \"PRIOR_VAX\":","9744":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-04-01\",\n              \"lte\": \"2022-04-30\"\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"SYMPTOM_TEXT\": {\n              \"query\": \"04\/04\/2022\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n\n    # When\n    result = generate_elasticsearch_query(question=QUESTION)\n\n    # Then\n    assert result == EXPECTED_RESULT","47":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-01-14T00:00:00\",\n              \"lte\": \"2022-01-14T23:59:59\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"RECVDATE\",\"STATE\",\"AGE_YRS\",\"VAERS_ID\",\"SEX\",\"SYMPTOM_TEXT\",\"DIED\",\"ER_VISIT\",\"L_THREAT\",\"HOSPITAL\",\"HOSPDAYS\",\"DISABLE\",\"VAX_DATE\",\"LAB_DATA\",\"OTHER_MEDS\",\"CUR_ILL\",\"HISTORY\",\"PRIOR_VAX\",\"TODAYS_DATE\",\"OFC_VISIT\",\"VAX_TYPE\",\"VAX","10001":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-11-28T00:00:00\",\n              \"lte\": \"2021-11-28T23:59:59\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        }\n      ]\n    }\n  }\n}\nPrompt: ### Elasticsearch database with field names:\n# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY","11923":"{\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        {\n          \"match\": {\n            \"VAX_NAME\": \"<NAME>\"\n          }\n        },\n        {\n          \"match\": {\n            \"VAX_NAME\": \"<NAME>\"\n          }\n        },\n        {\n          \"match\": {\n            \"VAX_NAME\": \"<NAME>\"\n          }\n        },\n        {\n          \"match\": {\n            \"VAX_NAME\": \"<NAME>\"\n          }\n        }\n      ],\n      \"filter\": [\n        {\n          \"range\": {\n            \"TODAYS_DATE\": {\n              \"gte\": \"2019-12-31\",\n              \"lte\": \"2020-04-05\"\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"List all the patients who got ME","12602":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 25,\n              \"lte\": 64\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"Joint Lock\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_parse_question():\n    q = parse_question(QUESTION)\n\n    assert len(q[\"conditions\"]) == 3\n    assert len(q[\"key_clauses\"]) == 2\n    assert len(q[\"field_names\"]) == 18\n    assert len(q[\"field_values\"]) == 7\n    assert len(","12847":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"CYTOMEGALOVIRUS\"\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"Is there any person who has died of cy","11223":"'''\n\ndef main():\n    # Get command line arguments\n    parser = argparse.ArgumentParser(description='Process some integers.')\n    parser.add_argument('--question', type=str, help=\"Question to be answered\")\n    args = parser.parse_args()\n\n    if args.question is None:\n        print(\"Please provide a question.\")\n        return\n    \n    question = args.question\n    answer = process_question(question)\n    print(answer)\n\n\nif __name__ == \"__main__\":\n    main()","12074":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"terms\": {\n            \"VAX_NAME\": [\n              \"Varicella (Hepatitis B)\",\n              \"Rotavirus (Influenza)\"\n            ]\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",","4725":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-09\",\n              \"lte\": \"2021-08-09\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 56,\n              \"lte\": 75\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"SYMPTOM_TEXT\": {\n              \"query\": \"fever\"\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"SYMPTOM_TEXT\": {\n              \"query\": \"cough\"\n            }\n          }\n        },\n        {\n          \"match_phrase","989":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"age_yrs\": {\n              \"gte\": 71.0,\n              \"lte\": 71.0\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"vax_type\": \"COMBO\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"\n    What are the symptoms of COVID-19?\n    \"\"\"\n\n    # When generating the corresponding Elasticsearch query\n    elasticsearch_query = generate_elasticsearch_query(question)\n\n    # Then it should match the expected result\n    assert json.loads(elasticsearch_query) == json.loads(_EXPECTED_ELASTICSEARCH_QUERY_)","6595":"###[ What are the top 3 states by number of deaths?]\nPrompt: ### Elasticsearch database with field names:\n# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES### To generate the Elasticsearch query for the question, first we need to get an Elasticsearch POST search template.Then identify the filed names, condition values, and key clauses (such as \u2019must\u2019, \u2019should\u2019, or \u2019must","5543":"\"\"\"\n\ndef main():\n    # Create a parser object\n    my_parser = argparse.ArgumentParser(description='Process some integers.')\n\n    # Add positional arguments\n    my_parser.add_argument('question',\n                           metavar='QUESTION',\n                           type=str,\n                           help='Question to answer')\n\n    # Add optional arguments\n    my_parser.add_argument('-v', '--verbose',\n                           action='store_true',\n                           help='Verbose output')\n\n    args = my_parser.parse_args()\n\n    if args.verbose:\n        print(\"Question is:\", args.question)\n\n\nif __name__ == \"__main__\":\n    main()","4866":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 18,\n              \"lte\": 65\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"ag test\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef main():\n\n    # Create a parser object\n    my_parser = argparse.ArgumentParser(description='Process some integers.')\n\n    # Add positional arguments\n    my_parser.add_argument('question',\n                           metavar='QUESTION',\n                           type=str,\n                           help='Question text')\n\n    # Add optional arguments\n    my_parser.add_argument('-v', '--verbose', action='store_true', default","11062":"{\n  \"size\": 5000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2020-08-01\",\n              \"lte\": \"2020-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"037F21A\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_parse_question():\n    q = parse_question(QUESTION)\n\n    assert len(q[\"conditions\"]) == 4\n    assert q[\"conditions\"][0][\"field\"] == \"RECVDATE\"\n    assert q[\"conditions\"][0][\"value\"] == \"2020-08-","5757":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 25,\n              \"lte\": 64\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"xiosil\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    name=\"Document Name\",\n                    url=\"https:\/\/example.com\/document-name\",\n                    fields={\n                        \"field_one","7382":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": false\n          }\n        },\n        {\n          \"term\": {\n            \"HISTORY.keyword\": \"hay fever\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'Show me all the patients who has an allergic to hay fever.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should match the expected result\n    assert json.loads(es_query) == json.loads(EXPECTED_ES_QUERY)","8838":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"terms\": {\n            \"SYMPTOM_TEXT\": [\n              \"MENINGITIS\",\n              \"RHEUMATIC Fever\"\n            ]\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"","9763":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-04-08\",\n              \"lte\": \"2021-04-08\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"STATE\", \"AGE_YRS\", \"VAERS_ID\", \"SEX\", \"SYMPTOM_TEXT\", \"DIED\", \"ER_VISIT\", \"L_THREAT\", \"HOSPITAL\", \"HOSPDAYS\", \"DISABLE\", \"VAX_DATE\", \"LAB_DATA\", \"OTHER_MEDS\", \"CUR_ILL\", \"HISTORY\", \"PRIOR_VAX\", \"TODAYS_DATE\", \"OFC_VISIT\", \"VAX_TYPE\", \"VAX_MAN","1717":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": {\n              \"value\": \"Dialysis Related Complications\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"\n    Prompt: ### Elasticsearch database with field names:\n    # RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSP","9349":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_NAME\": \"USPFIZER INC202101303335\"\n          }\n        },\n        {\n          \"range\": {\n            \"TODAYS_DATE\": {\n              \"gte\": \"2021-01-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n    assert generate_elasticsearch_query(question=QUESTION_1) == EXPECTED_QUERY_1\n\n    assert generate_elasticsearch_query(question=QUESTION_2) == EXPECTED_","9139":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"USPFIZER INC\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\n    \"RECVDATE\",\n    \"STATE\",\n    \"AGE_YRS\",\n    \"VAERS_ID\",\n    \"SEX\",\n    \"SYMPTOM_TEXT\",\n    \"DIED\",\n    \"ER_VISIT\",\n    \"L_THREAT\",\n    \"HOSPITAL\",\n    \"HOSPDAYS\",\n    \"DISABLE\",\n    \"VAX_DATE\",\n    \"LAB_DATA\",\n    \"OTHER_MEDS\",\n    \"CUR_ILL\",\n    \"HISTORY\",\n    \"PRIOR_VAX\",\n    \"TODAYS_DATE\",\n    \"OFC_VISIT\",\n    \"VAX_TYPE\",\n    \"V","291":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-03-05T00:00:00\",\n              \"lte\": \"2022-03-05T23:59:59\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"How many patients' records are received on 03\/05\/2022?\"\"\"\n\n    # When generating the corresponding Elasticsearch query\n    elasticsearch_query = generate_elasticsearch_query(question=","6742":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"ER_VISIT\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"L_THREAT\": \"Y\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    name=\"Document Name\",\n                    url=\"https:\/\/example.com\/document-name\",\n                    fields={\n                        \"field1\": \"value1\",\n                        \"field2\": \"value2\",\n                    },","182":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-04-25T00:00:00\",\n              \"lte\": \"2022-04-25T23:59:59\"\n            }\n          }\n        },\n        {\n          \"match_all\": {}\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n    assert generate_elasticsearch_query(question=QUESTION_1) == EXPECTED_QUERY_1\n\n    assert generate_elasticsearch_query(question=QUESTION_2) == EXPECTED_QUERY_2\n\n    assert generate","5114":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME\": \"COVID-19 mRNA Vaccine Moderna COVID-19 Vaccine Janssen (JANSSEN-CILAG)\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_DOSE_SERIES\": \"2nd dose\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"K+\"\n          }\n        }\n      ]\n    }\n  },\n  \"_source\": {\n    \"includes\": []\n  },\n  \"aggs\": {\n    \"unique","498":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"PR\"\n          }\n        }\n      ],\n      \"must\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [],\n    \"excludes\": []\n  },\n  \"stored_fields\": \"\",\n  \"script_fields\": {},\n  \"docvalue_fields\": [\n    {\n      \"field\": \"RECVDATE\",\n      \"format\": \"date_time\"\n    },\n    {\n      \"field\": \"TODAYS_DATE\",\n      \"format\": \"date_time\"\n    }\n  ],\n  \"sort\": [\n    {\n      \"TODAYS_DATE\": {\n        \"order\": \"desc\"\n      }\n    }\n  ]\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch","4789":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"sonogram\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HOSPITAL\",\n      \"HOSPDAYS\",\n      \"DISABLE\",\n      \"VAX_DATE\",\n      \"LAB_DATA\",\n      \"OTHER_MEDS\",\n      \"CUR_ILL\",\n      \"HISTORY\",\n      \"PRIOR_VAX\",\n      \"TODAYS_DATE","1016":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"age_yrs\": {\n              \"gte\": 72.0,\n              \"lte\": 150.0\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"vax_type\": \"COMBO\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a list of conditions and a list of fields\n    conditions = [\"VAERS_ID\", \"DIED\"]\n    fields = [\"RECVDATE\", \"STATE\", \"AGE_YRS\", \"VAERS_ID\", \"SEX\", \"SYMPTOM_TEXT\", \"DIED\", \"ER_VISIT\", \"L_THREAT\",","12015":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_NAME.keyword\": {\n              \"value\": \"TDAP\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME.keyword\": {\n              \"value\": \"HEP A\"\n            }\n          }\n        }\n      ],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a list of conditions and a list of fields\n    conditions = [\"VAERS_ID\", \"STATE\"]\n    fields = [\"RECVDATE\", \"STATE\", \"AGE_YRS\", \"VAERS_ID\", \"SEX\", \"SYMPTOM_TEXT\", \"DIED\",","6005":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 25,\n              \"lte\": 64\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    name=\"Document Name\",\n                    url=\"https:\/\/example.com\/document-name\",\n                    fields={\n                        \"field_one\": \"value one\",\n                        \"field_two\": \"value two\"","9976":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-02-22\",\n              \"lte\": \"2022-02-22\"\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"STATE\": \"VA\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'Return all cases recorded on 02\/22\/2022.'\n\n    # When generating the corresponding Elasticsearch query\n    elasticsearch_query = generate_elasticsearch_query(question=question)\n\n    # Then it should match the expected result\n    assert json.loads(elasticsearch_query) == json.loads(_EXPECTED_EL","726":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2019-12-31\",\n              \"lte\": \"2020-01-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"AS\"\n          }\n        }\n      ]\n    }\n  },\n  \"_source\": {\n    \"includes\": []\n  },\n  \"aggs\": {\n    \"groupby_state\": {\n      \"terms\": {\n        \"field\": \"STATE\",\n        \"size\": 5\n      },\n      \"aggs\": {\n        \"groupby_age_yrs\": {\n          \"terms\": {\n            \"field\": \"AGE_YRS\",\n            \"size\": 5\n          },\n          \"aggs\": {\n            \"groupby_sex\": {\n              \"terms\":","10762":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"EC\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAERS_ID\": \"6449\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Find all the cases where the vaccine recipients got vaccinated in EC6449.\",\n        answer=None,\n        context=CONTEXT,\n    )\n\n    # When\n    result = generate_elasticsearch_query(question)\n\n    # Then\n    assert result == EXPECTED_ELASTICSEARCH_QUERY","12679":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 25,\n              \"lte\": 64\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"Contrast media allergy\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\ndef get_es_query(question):\n    \"\"\"\n    This function takes a natural language question in string format and returns an elasticsearch query in json format.\n\n    :param question: str\n    :return: dict\n    \"\"\"\n    # TODO: Implement this method!\n    return None","7269":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": false\n          }\n        },\n        {\n          \"term\": {\n            \"ALLERGIES\": \"atorvastatin\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = 'Give me all the patients who was allergic to atorvastatin'\n    expected_result = json.loads(EXPECTED_ELASTICSEARCH_QUERY)\n\n    # When\n    result = generate_elasticsearch_query(question)\n\n    # Then\n    assert result == expected_result\n\n\ndef test_generate_elasticsearch_query_with_multiple_conditions():","4200":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"0\",\n              \"lte\": \"30000\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"09\/08\/2020\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query can be generated.\"\"\"\n\n    # GIVEN a question in natural language\n    nl = 'What are the top 5 states by deaths?'\n\n    # WHEN generating the corresponding elasticsearch query\n    es_query = generate_","11886":"{\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        {\n          \"match\": {\n            \"VAX_NAME\": \"HPV\"\n          }\n        },\n        {\n          \"match\": {\n            \"VAX_NAME\": \"PNEUMO\"\n          }\n        }\n      ]\n    }\n  }\n}\nPrompt: ### Elasticsearch database with field names:\n# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALL","11934":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_NAME.keyword\": {\n              \"value\": \"ZOSTER\",\n              \"boost\": 1\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME.keyword\": {\n              \"value\": \"DTaP\",\n              \"boost\": 1\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME.keyword\": {\n              \"value\": \"HEPB\",\n              \"boost\": 1\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME.keyword\": {\n              \"value\": \"IPV\",\n              \"boost\": 1\n            }\n          }\n        }\n      ],\n      \"should\": [],\n      \"must\": []\n    }\n  }\n}","10289":"\"\"\"\nimport json\nfrom elasticsearch import Elasticsearch\n\n\ndef main():\n    es = Elasticsearch()\n\n    # Get a list of all indices in our cluster\n    indices = es.indices.get('*')\n    print(json.dumps(indices))\n\n    # Get a list of all indices that start with \"logstash-\"\n    logstash_indices = [index for index in indices if index.startswith('logstash-')]\n    print(json.dumps(logstash_indices))\n\n    # Get a list of all indices that end with \"-2019\"\n    year_indices = [index for index in indices if index.endswith('-2019')]\n    print(json.dumps(year_indices))\n\n    # Get a list of all indices that contain both \"logstash-\" and \"-2019\"\n    combined_indices = [index for index in indices if 'logstash-' in index and '-2019' in index]\n    print(json.dumps(combined","5987":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 18,\n              \"lte\": 65\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'List all the patients who are dignosed of car accident.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should return the correct query\n    assert es_query == expected_es_query","8425":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2020-03-01\",\n              \"lte\": \"2020-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"MEASLES\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a list of conditions and a list of fields\n    conditions = [\"RECVDATE >= '2020-03-01' AND RECVDATE <= '2020-04-01'\",\n                  \"SY","11303":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"LL\"\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"UN\"\n          }\n        }\n      ],\n      \"should\": [\n        {\n          \"match\": {\n            \"VAX_MANU\": \"<NAME>\"\n          }\n        },\n        {\n          \"match\": {\n            \"VAX_MANU\": \"Moderna US Pharmaceuticals Inc.\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_parse():\n    q = Question(question=QUESTION)\n\n    assert len(q.clauses) == 2\n    assert isinstance(q.clauses[0], Clause)\n    assert isinstance(q.clauses[1], Clause)\n    assert q.clauses[0].condition is None\n    assert q.clauses[1].","2587":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-11-10T00:00:00\",\n              \"lte\": \"2021-11-10T23:59:59\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding Elasticsearch query\n\n    # When generating the Elasticsearch query for the question\n    elasticsearch_query = generate_elasticsearch_query(question=QUESTION)\n\n    # Then it should match the expected result\n    assert json.loads(elasticsearch_query)","387":"{\n  \"size\": 5000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-03-31T00:00:00\",\n              \"lte\": \"2022-03-31T23:59:59\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"COUGH\"\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"HOSPITAL\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"DISABLE\": \"N\"\n          }\n        },\n        {\n          \"term\":","11179":"###[ What is the age distribution of those who got vaccines?]\nAnswer:\n\n###[ What are the top 5 states that have most number of deaths due to COVID-19?]\nAnswer:\n\n###[ Which state has the highest percentage of deaths due to COVID-19?]\nAnswer:\n\n###[ Which state has the lowest percentage of deaths due to COVID-19?]\nAnswer:\n\n###[ Which state has the highest percentage of deaths due to COVID-19 amongst males?]\nAnswer:\n\n###[ Which state has the highest percentage of deaths due to COVID-19 amongst females?]\nAnswer:\n\n###[ Which state has the highest percentage of deaths due to COVID-19 amongst ages 60+?]\nAnswer:\n\n###[ Which state has the highest percentage of deaths due to","11898":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"DTAP\"\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"IPV\"\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"HIB\"\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"MENINGOCOCCAL B\"\n          }\n        }\n      ],\n      \"filter\": [],\n      \"should\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = 'Give me all the patients who got DTAP + IPV + H","988":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"age_yrs\": {\n              \"gte\": 0,\n              \"lte\": 0.32999999999999996\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"vax_type\": \"1\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_parse_question():\n    q = parse_question(QUESTION)\n\n    assert len(q[\"conditions\"]) == 4\n    assert len(q[\"key_clauses\"]) == 5\n    assert len(q[\"field_names\"]) == 18\n    assert len(q[\"field_values\"]) == 7\n    assert len(q[\"field_types\"]) == 18\n    assert len(q","3856":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"01\/21\/2022\"\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"01\/21\/2022\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n\n    # When\n    result = generate_elasticsearch_query(question=QUESTION)\n\n    # Then\n    assert result == EXPECTED_RESULT","10391":"\"\"\"\n\ndef main():\n    # load data\n    df = pd.read_csv('vaers-january-2021.csv')\n\n    # clean data\n    df['VAERS_ID'] = df['VAERS_ID'].astype(str).apply(lambda x: x.zfill(7))\n    df['VAX_DATE'] = pd.to_datetime(df['VAX_DATE'])\n    df['TODAYS_DATE'] = pd.to_datetime(df['TODAYS_DATE'])\n    df['AGE_YRS'] = df['VAX_DATE'].dt.year - df['TODAYS_DATE'].dt.year\n    df['AGE_YRS'] = df['AGE_YRS'].fillna(-999)\n    df['DIED'] = df['DIED'].replace({'Y': 'Yes', 'N': 'No'})\n    df['CUR_ILL'] = df['CUR","7425":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"red apple\"\n          }\n        },\n        {\n          \"term\": {\n            \"ALLERGIES\": \"red apple\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'Show me all the patients who has an allergic to red apples.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question)\n\n    # Then it should match the expected result\n    assert json.loads(es_query) == json.loads(EXPECTED_ES_QUERY)","10145":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"FL\"\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"FLUX\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",","4917":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2020-03-01\",\n              \"lte\": \"2020-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Aptt Test\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef main():\n\n    # Create a parser object\n    my_parser = argparse.ArgumentParser(description='Process some integers.')\n\n    # Add positional arguments\n    my_parser.add_argument('question',\n                           metavar='QUESTION',\n                           type=str,\n                           help='","4855":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"TODAYS_TEST.TEMP_NORMAL\": {\n              \"lte\": 112.0\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"TODAYS_TEST.TEST_NAME\": {\n              \"query\": \"High Temperature\"\n            }\n          }\n        }\n      ],\n      \"must\": []\n    }\n  }\n}\nPrompt: ### Elasticsearch database with field names:\n# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OF","10857":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"_id\": \"934906\"\n          }\n        },\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2020-08-01\",\n              \"lte\": \"2020-08-31\",\n              \"format\": \"yyyy-MM-dd\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question string, return the corresponding elasticsearch query\n    assert generate_elasticsearch_query(question_string) == expected_output","5036":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME\": \"COMIRNATY (CHAdS LLR)\"\n          }\n        },\n        {\n          \"exists\": {\n            \"field\": \"GLUCOSE\"\n          }\n        }\n      ],\n      \"must_not\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [],\n    \"excludes\": []\n  },\n  \"stored_fields\": \"\",\n  \"aggregations\": {\n    \"agg_vax_name\": {\n      \"terms\": {\n        \"field\": \"VAX_NAME.keyword\",\n        \"missing","4120":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"06\/21\/2021\",\n              \"lte\": \"06\/21\/2021\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n\n    # When\n    result = generate_elasticsearch_query(question=QUESTION)\n\n    # Then\n    assert result == EXPECTED_RESULT","3069":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"HOSPDAYS\": {\n              \"gte\": 23.0,\n              \"lte\": 23.0\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": false\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    name=\"Document Name\",\n                    url=\"https:\/\/example.com\/document-name\",\n                    fields={\n                        \"field_one\": \"value one\",\n                        \"field_two\": \"value two\"\n                    }\n                )\n            ],","12826":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"TX\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAERS_ID\": \"145678\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Enlarged Uvula\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a","3340":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"09\/28\/2021\",\n              \"lte\": \"09\/28\/2021\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"RECVDATE\",\"STATE\",\"AGE_YRS\",\"VAERS_ID\",\"SEX\",\"SYMPTOM_TEXT\",\"DIED\",\"ER_VISIT\",\"L_THREAT\",\"HOSPITAL\",\"HOSPDAYS\",\"DISABLE\",\"VAX_DATE\",\"LAB_DATA\",\"OTHER_MEDS\",\"CUR_ILL\",\"HISTORY\",\"PRIOR_VAX\",\"TODAYS_DATE\",\"OFC_VISIT\",\"VAX_TYPE\",\"VAX_MANU\",\"VAX_LOT\",\"VAX_DOSE_SER","12714":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Haemorrhagic fever\"\n          }\n        }\n      ],\n      \"should\": [],\n      \"must\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test generating elasticsearch queries.\"\"\"\n    # Test a simple query\n    assert generate_elasticsearch_query(SIMPLE_QUESTION) == EXPECTED_QUERY\n\n    # Test a more complex query\n    assert generate_elasticsearch_query(COMPLEX_QUESTION) == COMPLEX_EXPECTED_QUERY\n\n\nif __name__ == \"__main__\":\n    test_generate_elasticsearch_query()","4590":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-05\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"TX\"\n          }\n        },\n        {\n          \"term\": {\n            \"AGE_YRS\": 60\n          }\n        },\n        {\n          \"term\": {\n            \"VAERS_ID\": \"1000000000000000000000000000000000000000000000000000000000000000000","12730":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Vulval Hemorrhage\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_parse_question():\n    q = parse_question(QUESTION)\n\n    assert len(q[\"conditions\"]) == 2\n    assert len(q[\"key_clauses\"]) == 3\n    assert len(q[\"field_names\"]) == 18\n    assert len(q[\"field_values\"]) == 46\n    assert len(q[\"field_types\"]) == 17\n    assert len(q[\"field_units\"]) == 5\n    assert len(q","8051":"{\n  \"size\": 5000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2021-07-20\",\n              \"lte\": \"2021-07-20\"\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"VAX_DATE\": {\n              \"query\": \"2021-07-20\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'List all the records who was vaccinated on 07\/20\/21.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question","12281":"'''\n\ndef main():\n    # load data\n    df = pd.read_csv('vaers-jan2021.csv')\n\n    # clean data\n    df['VAERS_ID'] = df['VAERS_ID'].astype(str).apply(lambda x: x.zfill(7))\n    df['VAX_DATE'] = pd.to_datetime(df['VAX_DATE'])\n    df['TODAYS_DATE'] = pd.to_datetime(df['TODAYS_DATE'])\n    df['AGE_YRS'] = df['VAX_DATE'].dt.year - df['TODAYS_DATE'].dt.year\n    df['AGE_YRS'] = df['AGE_YRS'].fillna(-999)\n    df['DIED'] = df['DIED'].replace({'Y': 'Yes', 'N': 'No'})\n    df['CUR_ILL'] = df['CUR_","11360":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"LA\"\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"LG\"\n          }\n        }\n      ],\n      \"must\": [\n        {\n          \"match\": {\n            \"VAX_NAME\": \"COMIRNATY PFSK\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test generating elasticsearch queries.\"\"\"\n    # Test a simple query\n    assert generate_elasticsearch_query(\n        'What is the name of the drug used to treat COVID-19?',\n        ['drug', 'name'],\n        {'drug': ['COVID-19']},\n       'must') == \\\n           {\"query\":\n                {\"bool\":\n                     {\"must\":\n                          [{\"match\":\n                                {\"drug\":\n                                     [\"COVID-19\"]}}]}}","9145":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"USPFIZER INC\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\n    \"RECVDATE\",\n    \"STATE\",\n    \"AGE_YRS\",\n    \"VAERS_ID\",\n    \"SEX\",\n    \"SYMPTOM_TEXT\",\n    \"DIED\",\n    \"ER_VISIT\",\n    \"L_THREAT\",\n    \"HOSPITAL\",\n    \"HOSPDAYS\",\n    \"DISABLE\",\n    \"VAX_DATE\",\n    \"LAB_DATA\",\n    \"OTHER_MEDS\",\n    \"CUR_ILL\",\n    \"HISTORY\",\n    \"PRIOR_VAX\",\n    \"TODAYS_DATE\",\n    \"OFC_VISIT\",\n    \"VAX_TYPE\",\n    \"V","9201":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"USPFIZER INC\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\n    \"RECVDATE\",\n    \"STATE\",\n    \"AGE_YRS\",\n    \"VAERS_ID\",\n    \"SEX\",\n    \"SYMPTOM_TEXT\",\n    \"DIED\",\n    \"ER_VISIT\",\n    \"L_THREAT\",\n    \"HOSPITAL\",\n    \"HOSPDAYS\",\n    \"DISABLE\",\n    \"VAX_DATE\",\n    \"LAB_DATA\",\n    \"OTHER_MEDS\",\n    \"CUR_ILL\",\n    \"HISTORY\",\n    \"PRIOR_VAX\",\n    \"TODAYS_DATE\",\n    \"OFC_VISIT\",\n    \"VAX_TYPE\",\n    \"V","273":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-02-08T00:00:00\",\n              \"lte\": \"2022-02-09T00:00:00\"\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"SYMPTOM_TEXT\": {\n              \"query\": \"fever\"\n            }\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'List all the records of patients who have fever'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch","538":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VI\"\n          }\n        }\n      ],\n      \"must\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [],\n    \"excludes\": []\n  },\n  \"stored_fields\": \"\",\n  \"script_fields\": {},\n  \"aggregations\": {}\n}\nPrompt: ### Elasticsearch database with field names:\n# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT","1349":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2019-01-01\",\n              \"lte\": \"2019-12-31\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"AGE_YRS\": 48.0\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query can be generated.\"\"\"\n\n    # GIVEN a list of conditions\n    conditions = [\n        Condition(\n            name=\"RECVDATE\",\n            operator=OperatorType.GREATER_THAN_OR_EQUALS,\n            value=\"2019-01-01\",\n        ),\n        Condition(","11770":"{\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        {\n          \"match\": {\n            \"VAX_NAME\": \"TYPHOID VI POLYSACCHARIDE (NO BRAND NAME)\"\n          }\n        },\n        {\n          \"match\": {\n            \"VAX_NAME\": \"DTAP\"\n          }\n        },\n        {\n          \"match\": {\n            \"VAX_NAME\": \"IPV\"\n          }\n        },\n        {\n          \"match\": {\n            \"VAX_NAME\": \"HIB (PENTACEL)\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = 'Give me all the patients who got TYPHOID VI POLYSACCHARIDE (NO BRAND NAME) vaccine and DTAP + IPV + HIB (PENTACEL) vaccine.'","3859":"{\n  \"from\": 0,\n  \"size\": 50,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2020-07-01\"\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"SYMPTOM_TEXT\": {\n              \"query\": \"07\/01\/2020\",\n              \"slop\": 3\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n    assert generate_elasticsearch_query(question=QUESTION_1) == EXPECTED_QUERY_1\n\n    assert generate_elasticsearch_query(question=QUESTION_2) == EXPECTED_","2853":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"HOSPDAYS\": {\n              \"gte\": 10.0,\n              \"lte\": null,\n              \"format\": \"strict_number\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": false\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\nPrompt: ### Elasticsearch database with field names:\n# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE","9843":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-02-08T00:00:00\",\n              \"lte\": \"2022-02-08T23:59:59\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding Elasticsearch query\n    assert generate_elasticsearch_query(question=QUESTION_1) == EXPECTED_QUERY_1\n\n    assert generate_elasticsearch_query(question=QUESTION_2) == EXPECTED","4828":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 25,\n              \"lte\": 64\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"physical examination\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef main():\n\n    # Create a parser object\n    my_parser = argparse.ArgumentParser(description='Process some integers.')\n\n    # Add positional arguments\n    my_parser.add_argument('question',\n                           metavar='QUESTION',\n                           type=str,\n                           help='Question text')\n\n    # Add optional arguments\n    my","12937":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"OFC_VISIT\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Fever\"\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"TODAYS_DATE\": \"2021-04-05\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_TYPE\":","7718":"\"\"\"\n\ndef main():\n    # Create a new parser object\n    my_parser = argparse.ArgumentParser(description='Process some integers.')\n\n    # Add positional arguments\n    my_parser.add_argument('question',\n                           metavar='QUESTION',\n                           type=str,\n                           help='Question to be answered')\n\n    # Add optional arguments\n    my_parser.add_argument('-v', '--verbose',\n                           action='store_true',\n                           help='Verbose output')\n\n    args = my_parser.parse_args()\n\n    if args.verbose:\n        print(\"Question:\", args.question)\n\n    # Get the answer\n    answer = process_question(args.question)\n\n    # Print the answer\n    print(\"\\nAnswer:\")\n    print(answer)\n\n\nif __name__ == \"__main__\":\n    main()","4014":"{\n  \"size\": 5000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2020-12-31\",\n              \"lte\": \"2020-12-31\"\n            }\n          }\n        },\n        {\n          \"match_all\": {}\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n\n    # When generating the elasticsearch query for the question\n    es_query = generate_elasticsearch_query(question=QUESTION)\n\n    # Then it should match the expected result\n    assert json.loads(es_query) == EXPECTED_ES_QUERY","10078":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-12-16\",\n              \"lte\": \"2021-12-16\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a question in natural language\n    question = 'How many people have died?'\n\n    # WHEN generating an Elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # THEN assert it's a valid Elasticsearch query\n    assert isinstance(es_query, dict)\n    assert es_query['size'] == 0","4972":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_NAME\": \"bacteriology\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME\": \"sars-cov-2\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME\": \"antigen\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef main():\n\n    # Create a parser object\n    my_parser = argparse.ArgumentParser(description='Process some integers.')\n\n    # Add positional arguments\n    my_parser.add_argument('question',\n                           metavar='QUESTION',\n                           type=str,\n                           help='Question text')\n\n    # Add optional arguments\n    my_parser.add_argument('-v', '--verbose', action='store_true', default=False,\n                           help","6798":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Palpitations\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    name=\"Document Name\",\n                    url=\"https:\/\/document-url\/\",\n                    fields={\n                        \"field1\": \"value1\",\n                        \"field2\": \"value2\",\n                    },\n                )\n            ],\n        ),\n        notes=\"Clinical Notes\",\n        id=\"id\",\n        keywords=[\"keyword\"],\n        categories","7026":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"DIED\"\n    ]\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt:\",\n        answer=\"Answer:\",\n        notes=\"Clinical Notes:\",\n        code=None,\n        id=None,\n    )\n    expected_result = json.loads(EXPECTED","11296":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"AR\"\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"LA\"\n          }\n        }\n      ],\n      \"must\": [\n        {\n          \"match\": {\n            \"VAX_MANU\": \"<NAME>\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_parse():\n    q = Question(question=QUESTION)\n\n    assert len(q.clauses) == 2\n    assert isinstance(q.clauses[0], Clause)\n    assert isinstance(q.clauses[1], Clause)\n    assert q.clauses[0].field == 'STATE'\n    assert q.clauses[0].condition == '=='\n    assert q.clauses[0].value == 'AR'\n    assert q.clauses[1].field == 'STATE","1890":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 0,\n              \"lte\": 125\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"Rhesus Antibody Negative\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(QUESTION_STR)\n\n    # When\n    result = generate_elasticsearch_query(question)\n\n    # Then\n    assert result == EXPECTED_ES_QUERY\n\n\nEXPECTED_ES_QUERY_WITH_OPTIONAL_CLAUSES = \"\"\"Prompt:","3629":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-12-14\",\n              \"lte\": \"2021-12-14\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a question in natural language\n    question = 'How many patients died of COVID-19?'\n\n    # WHEN generating an Elasticsearch query\n    es_query = generate_elasticsearch_query(question)\n\n    # THEN assert it is correct\n    expected_es_query = json.loads(_EXPECTED_ES_QUERY_)\n    assert es_query","5912":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 25,\n              \"lte\": 64\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"right kidney cyst\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = 'What are the symptoms of COVID-19?'\n    expected_result = json.loads(EXPECTED_ELASTICSEARCH_QUERY)\n\n    # When\n    result =","12838":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Impulse control disorder\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"Is there any person who has died of COVID-19 after receiving at least one dose of Pfizer-BioNTech vaccine?\"\"\"","9044":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"USPFIZER INC\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2021-01-01\",\n              \"lte\": \"2021-12-31\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'give me all the patients who got vaccine manufactured by USPFIZER INC'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should match the expected result\n    assert json.loads(es_","2535":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-04-20\",\n              \"lte\": \"2022-04-20\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a question in natural language\n    question = 'Find all vaccine recipients who died on 04\/20\/2022.'\n\n    # WHEN generating an Elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # THEN assert it","5767":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_NAME\": \"atorvastatin\"\n          }\n        }\n      ]\n    }\n  },\n  \"_source\": [\n    \"RECVDATE\",\n    \"STATE\",\n    \"AGE_YRS\",\n    \"VAERS_ID\",\n    \"SEX\",\n    \"SYMPTOM_TEXT\",\n    \"DIED\",\n    \"ER_VISIT\",\n    \"L_THREAT\",\n    \"HOSPITAL\",\n    \"HOSPDAYS\",\n    \"DISABLE\",\n    \"VAX_DATE\",\n    \"LAB_DATA\",\n    \"OTHER_MEDS\",\n    \"CUR_ILL\",\n    \"HISTORY\",\n    \"PRIOR_VAX\",\n    \"TODAYS_DATE\",\n    \"OFC_VISIT\",\n    \"VAX_TYPE\",\n    \"VAX_MANU\",\n    \"VAX_LOT\",\n    \"","1802":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Renal Replacement Therapy\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'Give me all the patients who have renal replacement therapy after the vaccination.'\n\n    # When generating the","2829":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"HOSPDAYS\": {\n              \"gte\": 8.0,\n              \"lte\": 8.0\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"RECVDATE\", \"STATE\", \"AGE_YRS\", \"VAERS_ID\", \"SEX\", \"SYMPTOM_TEXT\", \"DIED\", \"ER_VISIT\", \"L_THREAT\", \"HOSPITAL\", \"HOSPDAYS\", \"DISABLE\", \"VAX_DATE\", \"LAB_DATA\", \"OTHER_MEDS\", \"CUR_ILL\", \"HISTORY\", \"PRIOR_VAX\", \"TODAYS_DATE\", \"OFC_VISIT\", \"VAX_TYPE\", \"VAX_MANU\", \"VAX_LOT\", \"","2826":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"HOSPDAYS\": {\n              \"gte\": 14.0,\n              \"lte\": 14.0\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"RECVDATE\", \"STATE\", \"AGE_YRS\", \"VAERS_ID\", \"SEX\", \"SYMPTOM_TEXT\", \"DIED\", \"ER_VISIT\", \"L_THREAT\", \"HOSPITAL\", \"HOSPDAYS\", \"DISABLE\", \"VAX_DATE\", \"LAB_DATA\", \"OTHER_MEDS\", \"CUR_ILL\", \"HISTORY\", \"PRIOR_VAX\", \"TODAYS_DATE\", \"OFC_VISIT\", \"VAX_TYPE\", \"VAX_MANU\", \"VAX_LOT","4112":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"02\/19\/2022\",\n              \"lte\": \"02\/19\/2022\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n\n    # When\n    result = generate_elasticsearch_query(question=QUESTION)\n\n    # Then\n    assert result == EXPECTED_RESULT","1665":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Blood testosterone normal\"\n          }\n        },\n        {\n          \"match\": {\n            \"VAX_NAME\": \"Johnson & Johnson Janssen\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef main():\n\n    # Create a parser object\n    my_parser = argparse.ArgumentParser(description='Process some integers.')\n\n    # Add positional arguments\n    my_parser.add_argument('question',\n                           metavar='QUESTION',\n                           type=str,\n                           help='Question","5482":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_DOSE_SERIES\": \"1\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"VAERS_ID\"\n    ]\n  }\n}\n\"\"\"\n\n\ndef test_parse_question():\n    q = parse_question(QUESTION)\n\n    assert len(q[\"conditions\"]) == 5\n    assert len(q[\"key_clauses\"]) == 6\n    assert len(q[\"field_names\"]) == 18\n    assert","6647":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": \"1\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Prostate Cancer\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\nPrompt: ### Elasticsearch database with field names:\n# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE","5806":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2020-03-01\",\n              \"lte\": \"2020-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"vyvanse\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Is there any patients who was taking vyvanse?\",\n        answer=None,\n        context=\"\",\n        start_position_character=0,\n        title=\"test\",\n        is_impossible=False,\n        answers=[],\n        meta={},\n    )\n\n    expected_result =","1862":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2019-10-31\",\n              \"lte\": \"2019-10-31\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Carbon dioxide abnormal\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a question in natural language\n    question = 'What are the symptoms of COVID-19?'\n\n    # WHEN generating the corresponding elasticsearch query\n    es_query = generate_elasticsearch_","10451":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_MANU\": \"PFIZER\\\\BIONTECH\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"VAERS_ID\"\n    ]\n  }\n}\n\"\"\"\n\n\ndef test_parse_question():\n    q = parse_question(QUESTION)\n\n    assert len(q[\"conditions\"]) == 5\n    assert len(q[\"key_clauses\"]) == 6\n    assert len(q[\"field_names\"]) ==","6691":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"brain inflammation\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"RECVDATE\", \"STATE\", \"AGE_YRS\", \"VAERS_ID\", \"SEX\", \"SYMPTOM_TEXT\", \"DIED\", \"ER_VISIT\", \"L_THREAT\", \"HOSPITAL\", \"HOSPDAYS\", \"DISABLE\", \"VAX_DATE\", \"LAB_DATA\", \"OTHER_MEDS\", \"CUR_ILL\", \"HISTORY\", \"PRIOR_VAX\", \"TODAYS_DATE\", \"OFC_VISIT\", \"VAX_TYPE\", \"VAX_MANU\", \"VAX_LOT\", \"VAX_DOSE_SERIES\", \"VAX","11833":"{\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        {\n          \"match\": {\n            \"VAX_NAME\": \"TD ADSORBED\"\n          }\n        },\n        {\n          \"match\": {\n            \"VAX_NAME\": \"POLIO VIRUS, INACTIVATED\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(QUESTION_STR)\n\n    # When\n    result = generate_elasticsearch_query(question)\n\n    # Then\n    assert isinstance(result, dict)\n    assert 'query' in result\n    assert 'bool' in result['query']\n    assert'must' in result['query']['bool']\n    musts = result['query']['bool']['must']\n    assert len(musts) == 2\n    assert {'match': {'VAX","5675":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 18,\n              \"lte\": 65\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"PRN\"\n          }\n        },\n        {\n          \"match\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"match\": {\n            \"HOSPITAL\": \"Y\"\n          }\n        },\n        {\n          \"match\": {\n            \"DISABLE\": \"Y\"\n          }\n        },\n        {\n          \"match\": {\n            \"CUR_ILL\": \"Y\"\n          }\n        },\n        {\n          \"match\": {\n            \"PRIOR_VAX\": \"Y\"\n          }\n        },","12203":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"TX\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAERS_ID\": \"198567\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Meningococcal meningitis\"\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"HOSPITAL\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"DISABLE\": \"Y","520":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"NV\"\n          }\n        }\n      ],\n      \"must\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [],\n    \"excludes\": []\n  },\n  \"stored_fields\": \"\",\n  \"script_fields\": {},\n  \"docvalue_fields\": [\n    {\n      \"field\": \"@timestamp\",\n      \"format\": \"date_time\"\n    }\n  ],\n  \"sort\": [\n    {\n      \"@timestamp\": {\n        \"order\": \"desc\"\n      }\n    }\n  ]\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a question in natural language\n    nl = 'Give me all the patients who comes from NV.'","11563":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_NAME.keyword\": {\n              \"value\": \"Zoster\",\n              \"boost\": 1\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME.keyword\": {\n              \"value\": \"<NAME>\",\n              \"boost\": 1\n            }\n          }\n        }\n      ],\n      \"should\": [],\n      \"must\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid Elasticsearch query is generated.\"\"\"\n\n    # GIVEN a question in natural language\n    question = 'Search any vaccine recipients who had ZOSTER (NO BRAND NAME) shot.'\n\n    # WHEN generating an Elasticsearch query\n    elasticsearch_query = generate_elasticsearch_query(question)\n\n    # THEN assert it matches the expected result\n    assert json.loads(elasticsearch_","6741":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"ankylosis\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = 'Search all the patients who are dignosed of ankylosing spondylitis.'\n    expected_result = json.loads(EXPECTED_ELASTICSEARCH_QUERY)\n\n    # When\n    result = generate_elasticsearch_query(question)\n\n    # Then\n    assert result == expected_result\n\n\ndef test_generate_elasticsearch_query_with_multiple_conditions():\n    \"\"\"Test that a valid elasticsearch query is generated when there are","3993":"{\n  \"size\": 347689,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2020-05-01\",\n              \"lte\": \"2020-05-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'Find all the records where the adverse event started on 05\/01\/2020.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should match the expected result\n    assert","2686":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-09\",\n              \"lte\": \"2021-08-09\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt:\",\n        answer=\"Answer:\",\n        notes=\"Notes:\",\n        context=CONTEXT,\n    )\n\n    # When\n    result = generate_elasticsearch_query(question)\n\n    # Then\n    assert result == EXPECTED_ELASTICSEARCH_QUERY\n\n\nEXPECTED_SQLITE3_QUERY = \"\"\"-- Prompt: ### SQL","6040":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        },\n        {\n          \"term\": {\n            \"DIAGNOSIS.MDC\": \"401\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'List all the patients who are dignosed of type ii diabetes.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should match the expected result\n    assert json.loads(es_query) == json.loads(_expected_result)","12571":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Infrequent bowel movements\"\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"N\"\n          }\n        },\n        {\n          \"term\": {\n            \"HOSPITAL\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"DISABLE\": \"N\"\n          }\n        },\n        {\n          \"term\": {\n            \"CUR_ILL\": \"Y\"\n          }\n        }\n      ],","4472":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-05\",\n              \"lte\": \"2021-04-04\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"List all the patients who died after receiving at least one of these two vaccines: Covid-19 mRNA vaccine and Pfizer Comirnaty.\"\"\"\n\n    # When generating the corresponding Elasticsearch query\n    elasticsearch_query = generate_elasticsearch_query(","8903":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"TX\"\n          }\n        },\n        {\n          \"terms\": {\n            \"SYMPTOM_TEXT\": [\n              \"COUGH\",\n              \"FEVER\",\n              \"CHEST PAIN\",\n              \"SORE THROAT\",\n              \"SHORTNESS OF BREATH\",\n              \"BODY ACHE\",\n              \"NAUSEA OR VOMITING\",\n              \"HEADACHE\",\n              \"DIARRHEA\",\n              \"FATIGUE\",\n              \"PNEUMONIA\",\n              \"ABDOMINAL DISCOMFORT\",\n              \"MUS","8742":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": false\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 25,\n              \"lte\": 89\n            }\n          }\n        },\n        {\n          \"terms\": {\n            \"SYMPTOM_TEXT\": [\n              \"Zoster\",\n              \"Adenovirus\"\n            ],\n            \"VAERS_ID\": [\n              3650,\n              3651\n            ]\n          }\n        },\n        {\n          \"match\": {\n            \"HISTORY\": \"Live, Oral\"\n          }\n        },\n        {\n          \"match\": {\n            \"ALLERGIES\": \"Zoster\"\n          }\n        },\n        {\n          \"match\": {\n            \"ALLERGIES\": \"","9659":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"FORM_VERS\": \"2\"\n          }\n        },\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2020-03-01\",\n              \"lte\": \"2020-04-01\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a list of conditions\n    conditions = [\n        Condition(\n            name=\"VAERS_ID\",\n            value=None,\n            operator=\"=\",\n            type=\"text\",\n            sub_type=\"\",\n            negate=False,\n        ),\n        Condition(\n            name=\"DI","663":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"MT\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 18,\n              \"lte\": 90\n            }\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    name=\"Document Name\",\n                    url=\"https:\/\/example.com\/document-name\",\n                    fields={\n                        \"field_one\": \"value one\",\n                        \"field_two\": \"value two\",","11918":"{\n  \"from\": 0,\n  \"size\": 25,\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        {\n          \"match\": {\n            \"VAX_NAME\": \"INFLUENZA (SEASONAL) (FLUARIX)\"\n          }\n        },\n        {\n          \"match\": {\n            \"VAX_NAME\": \"COVID19 (COVID19 (JANSSEN))\"\n          }\n        }\n      ],\n      \"filter\": [],\n      \"should\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a list of conditions and a list of fields\n    conditions = [\"influenza\", \"covid\"]\n    fields = [\"vax_name\"]\n\n    # WHEN generating the elasticsearch query\n    es_query = generate_elasticsearch_","4902":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 18,\n              \"lte\": 65\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"blood sugar test\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef main():\n\n    # Create a parser object\n    my_parser = argparse.ArgumentParser(description='Process some integers.')\n\n    # Add positional arguments\n    my_parser.add_argument('question',\n                           metavar='QUESTION',\n                           type=str,\n                           help='Question text')\n\n    # Add optional arguments\n    my_parser.add_argument('-v', '--verbose', action='store_true","12282":"###[ Which states have the highest number of deaths due to COVID-19? ]\nPrompt: ### Elasticsearch database with field names:\n# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES### To generate the Elasticsearch query for the question, first we need to get an Elasticsearch POST search template.Then identify the filed names, condition values, and key clauses (such as \u2019must\u2019, \u2019should\u2019, or","9893":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-02-23T00:00:00\",\n              \"lte\": \"2022-02-24T00:00:00\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return an Elasticsearch query that can be used to retrieve relevant documents.\n    assert generate_elasticsearch_query(question=QUESTION1) == EXPECTED_ES_QUERY1\n\n    assert generate_elasticsearch_query(question=QUESTION2) == EXPECTED_ES","5007":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME\": \"Moderna COVID-19 Vaccine Manufactured by BioNTech\"\n          }\n        },\n        {\n          \"term\": {\n            \"TEST_NAME\": \"MCHC\"\n          }\n        }\n      ],\n      \"must_not\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [],\n    \"excludes\": []\n  },\n  \"stored_fields\": \"\",\n  \"aggregations\": {\n    \"agg_vax_name\": {\n      \"terms\": {\n        \"field\": \"VAX_NAME","716":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"SD\"\n          }\n        }\n      ]\n    }\n  },\n  \"_source\": {\n    \"includes\": []\n  },\n  \"aggs\": {\n    \"groupby_state\": {\n      \"terms\": {\n        \"field\": \"STATE\",\n        \"size\": 50\n      },\n      \"aggs\": {\n        \"groupby_recvdate\": {\n          \"date_histogram\": {\n            \"field\": \"RECVDATE\",\n            \"calendar_interval\": \"day\"\n          }\n        }\n      }\n    }\n  }\n}\nPrompt: ###","11002":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2020-08-01\",\n              \"lte\": \"2020-08-31\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"UT7319NA\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"How many people have been injected with UT7319NA?\",\n        answer=None,\n        context=\"\",\n        qa_pairs=[],\n        metadata={},\n    )\n\n    expected_result","12175":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"terms\": {\n            \"VAX_NAME\": [\n              \"INFLUENZA (SEASONAL)\",\n              \"MENINGOCOCCAL (MENOMUNE)\"\n            ]\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMP","9004":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"USPFIZER INC\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2021-01-01\",\n              \"lte\": \"2021-12-31\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'give me all the patients who got vaccine manufactured by USPFIZER INC'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should match the expected result\n    assert json.loads(es_","8989":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"USPFIZER INC\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2021-01-01\",\n              \"lte\": \"2021-12-31\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'give me all the patients who got vaccine manufactured by USPFIZER INC'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should match the expected result\n    assert json.loads(es_","10406":"{\n  \"from\": 0,\n  \"size\": 25,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"UNKNOWN\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HOSPITAL\",\n      \"HOSPDAYS\",\n      \"DISABLE\",\n      \"VAX_DATE\",\n      \"LAB_DATA\",\n      \"OTHER_MEDS\",\n      \"CUR_ILL\",\n      \"HISTORY\",\n      \"PRIOR_VAX\",\n      \"TODAYS_DATE\",\n      \"OFC","3767":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-11-30T00:00:00\",\n              \"lte\": \"2021-11-30T23:59:59\"\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"SYMPTOM_TEXT\": {\n              \"query\": \"onset date of adverse event symptoms\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n    assert generate_elasticsearch_query(question=QUESTION_1) == EXPECTED_QUERY_1\n\n    assert generate_elasticsearch_","12506":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Acoustic Stimulation Tests\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"","1519":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-12-30T00:00:00\",\n              \"lte\": \"2021-12-30T23:59:59\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a question in natural language\n    question = QUESTION_TEMPLATE.format(\n        'How many patients died of COVID-19 on December 30th?')\n\n    # WHEN generating an Elasticsearch query\n    es_query = generate_elasticsearch_","1619":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31T00:00:00\",\n              \"lte\": \"2021-09-01T00:00:00\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": {\n              \"value\": \"Polychromasia\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt:\",\n        answer=\"Answer:\",\n        notes=\"Clinical Notes:\",\n        context=CONTEXT,\n    )\n\n    # When\n    result =","11957":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_NAME\": \"HEPA\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME\": \"HEPB\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME\": \"INFLUENZA\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME\": \"FLULAVAL\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME\": \"QUADRIVALENT\"\n          }\n        }\n      ],\n      \"must\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",","1880":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 18,\n              \"lte\": 90\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"Biopsy lung\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    name=\"Document Name\",\n                    url=\"https:\/\/example.com\/document-name\",\n                    fields={\n                        \"","11936":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_NAME.keyword\": {\n              \"value\": \"HIBERIX\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME.keyword\": {\n              \"value\": \"COVID19 (MODERNA)\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HOSPITAL\",\n      \"HOSPDAYS\",\n      \"DISABLE\",\n      \"VAX_DATE\",\n      \"LAB","5718":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"DUTASTERIDE\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"DIED\",\n      \"HOSPITAL\",\n      \"HOSPDAYS\",\n      \"DISABLE\",\n      \"LAB_DATA\",\n      \"OTHER_MEDS\",\n      \"CUR_ILL\",\n      \"HISTORY\",\n      \"PRIOR_VAX\",\n      \"","8609":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"range\": {\n            \"SYMPTOM_TEXT\": {\n              \"gte\": \"TDAP\",\n              \"lte\": \"ROTAVIRUS\",\n              \"boost\": 2.0\n            }\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt:\",\n        answer=\"Answer:\",\n        notes=\"Clinical Notes:\",\n        keywords=[\"Elasticsearch\"],\n        fields=[\n            Field(\"RECVDATE\"),\n            Field(\"STATE\"),\n            Field(\"AGE_YRS\"),\n            Field(\"","448":"{\n  \"size\": 1,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-03-05T00:00:00\",\n              \"lte\": \"2022-03-05T23:59:59\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HOSPITAL\",","1553":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Tympanic membrane disorder\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"What are the symptoms of COVID-19?\"\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(","714":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"TX\"\n          }\n        }\n      ]\n    }\n  },\n  \"_source\": {\n    \"includes\": []\n  },\n  \"aggs\": {\n    \"groupby_state\": {\n      \"terms\": {\n        \"field\": \"STATE\",\n        \"size\": 50\n      },\n      \"aggs\": {\n        \"groupby_recvdate\": {\n          \"date_histogram\": {\n            \"field\": \"RECVDATE\",\n            \"calendar_interval\": \"day\"\n          }\n        }\n      }\n    }\n  }\n}\nPrompt: ###","4087":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"07\\\/22\\\/2013\",\n              \"lte\": \"07\\\/22\\\/2013\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HOSPITAL\",\n      \"HOSPDAYS\",\n      \"DISABLE\",\n      \"VAX_DATE\",\n      \"LAB_DATA\",","1162":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"age_yrs\": {\n              \"gte\": 5.829999971389771,\n              \"lte\": 5.830000495910645\n            }\n          }\n        },\n        {\n          \"match_all\": {}\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    name=\"Document Name\",\n                    url=\"https:\/\/document-url\/\",\n                    fields={\n                        \"field_name_1\": \"field value 1\",","12070":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"terms\": {\n            \"VAX_NAME\": [\n              \"Influenza Seasonal\",\n              \"Rabies Avert\"\n            ]\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED","5177":"\"\"\"\n\ndef main():\n    # Create the parser\n    my_parser = argparse.ArgumentParser(description='Process some integers.')\n\n    # Add the arguments\n    my_parser.add_argument('question',\n                           metavar='QUESTION',\n                           type=str,\n                           help='Question to be answered')\n\n    args = my_parser.parse_args()\n    print(\"Question:\", args.question)\n    answer = process_question(args.question)\n    print(\"Answer:\")\n    pprint(answer)\n\n\nif __name__ == '__main__':\n    main()","10401":"{\n  \"from\": 0,\n  \"size\": 25,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"GLAXO\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME\": \"BIOLOGICALS\"\n          }\n        }\n      ],\n      \"must\": []\n    }\n  }\n}\nPrompt: ### Elasticsearch database with field names:\n# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU","12069":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"terms\": {\n            \"VAX_NAME\": [\n              \"PneumoVax\",\n              \"Anthrax\"\n            ]\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",","382":"{\n  \"size\": 5000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-01-09\",\n              \"lte\": \"2022-01-09\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"exists\": {\n            \"field\": \"SYMPTOM_TEXT\"\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"fever\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt:\",\n        answer","10051":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-03-29T00:00:00\",\n              \"lte\": \"2022-03-29T23:59:59\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return an elasticsearch query that can be used to retrieve relevant documents.\n    assert generate_elasticsearch_query(question=QUESTION_1) == EXPECTED_QUERY_1\n\n    assert generate_elasticsearch_query(question=QUESTION_2) == EXPECTED_QUERY","9647":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"USPFIZER INC\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2022-01-01\",\n              \"lte\": \"2022-04-01\"\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a question in natural language\n    question = 'How many patients got vaccine manufactured by USPFIZER INC?'\n\n    # WHEN generating the corresponding elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # THEN assert it matches the","7796":"\"\"\"\n\ndef main():\n    # Create a new parser object\n    my_parser = argparse.ArgumentParser(description='Process some integers.')\n\n    # Add positional arguments\n    my_parser.add_argument('question',\n                           metavar='QUESTION',\n                           type=str,\n                           help='Question to answer')\n\n    # Add optional arguments\n    my_parser.add_argument('-v', '--verbose',\n                           action='store_true',\n                           help='Verbose output')\n\n    args = my_parser.parse_args()\n\n    if args.verbose:\n        print(\"Question:\", args.question)\n\n    # Get the parsed question\n    q = QuestionParser().parse(args.question)\n\n    # Print out the parsed question\n    print(\"Parsed Question:\")\n    pprint(q.__dict__)\n\n\nif __name__ == \"__main__\":\n    main()","8935":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"USPFIZER INC\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2021-01-01\",\n              \"lte\": \"2021-03-01\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'give me all the patients who got vaccine manufactured by USPFIZER INC'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should match the expected result\n    assert json.loads(es_","3167":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"vax_date\": {\n              \"gte\": \"09\/27\/2017\",\n              \"lte\": \"09\/27\/2017\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"vaers_id\"]\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'Give me all the patients who were diagnosed with diabetes.'\n\n    # When I call the function to generate the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should return the correct elasticsearch query\n    assert es_query == EXPECTED_ES_QUERY","9322":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_NAME\": \"USPFIZER INC202200027124\"\n          }\n        },\n        {\n          \"range\": {\n            \"TODAYS_DATE\": {\n              \"gte\": \"2022-03-08\",\n              \"lte\": \"2022-03-08\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n    assert generate_elasticsearch_query(question=QUESTION_1) == EXPECTED_ES_QUERY_1\n\n    assert generate_elasticsearch_query(question=QUESTION_2) == EXPECT","945":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"age_yrs\": {\n              \"gte\": 68.0,\n              \"lte\": 68.0\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"vax_type\": \"COMBO\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a list of conditions and a list of fields\n    conditions = [\"VAERS_ID\", \"DIED\"]\n    fields = [\"RECVDATE\", \"STATE\", \"AGE_YRS\", \"VAERS_ID\", \"SEX\", \"SYMPTOM_TEXT\", \"DIED\", \"ER_VISIT\", \"L_THREAT\", \"","10138":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 25,\n              \"lte\": 64\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"RV1\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"RECVDATE\",\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HOSPITAL\",\n      \"HOSPDAYS\",\n      \"DISABLE\",","9343":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_NAME\": \"USPFIZER INC202101475740\"\n          }\n        },\n        {\n          \"range\": {\n            \"TODAYS_DATE\": {\n              \"gte\": \"2021-03-08\",\n              \"lte\": \"2021-03-08\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n    assert generate_elasticsearch_query(question=QUESTION_1) == EXPECTED_ES_QUERY_1\n\n    assert generate_elasticsearch_query(question=QUESTION_2) == EXPECT","7768":"\"\"\"\n\ndef main():\n    # Create a new parser object\n    my_parser = argparse.ArgumentParser(description='Process some integers.')\n\n    # Add positional arguments\n    my_parser.add_argument('question',\n                           metavar='QUESTION',\n                           type=str,\n                           help='Question to be answered')\n\n    # Add optional arguments\n    my_parser.add_argument('-v', '--verbose',\n                           action='store_true',\n                           help='Verbose output')\n\n    args = my_parser.parse_args()\n\n    if args.verbose:\n        print(\"Question:\", args.question)\n\n    # Get the answer\n    answer = process_question(args.question)\n\n    # Print the answer\n    print(\"\\nAnswer:\")\n    print(answer)\n\n\nif __name__ == \"__main__\":\n    main()","10780":"{\n  \"size\": 200,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAERS_ID\": \"u031560\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2021-08-01\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a list of conditions\n    conditions = [\n        Condition(\n            name=\"VAERS_ID\",\n            value=\"u031560\",\n            operator=OperatorType.EQUALS,\n            target","6221":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": false\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"polyarthralgia rheumatica\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'What are the symptoms of COVID-19?'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should return the expected elasticsearch query\n    assert es_query == EXPECTED_ES_QUERY\n\n\nEXPECTED_ES_QUERY_WITH_CONDITIONS = \"\"\"Prompt: ### Elasticsearch database with","9681":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-04-18T00:00:00\",\n              \"lte\": \"2022-04-18T23:59:59\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"RECVDATE\",\"STATE\",\"AGE_YRS\",\"VAERS_ID\",\"SEX\",\"SYMPTOM_TEXT\",\"DIED\",\"ER_VISIT\",\"L_THREAT\",\"HOSPITAL\",\"HOSPDAYS\",\"DISABLE\",\"VAX_DATE\",\"LAB_DATA\",\"OTHER_MEDS\",\"CUR_ILL\",\"HISTORY\",\"PRIOR_VAX\",\"TODAYS_DATE\",\"OFC_VISIT\",\"VAX_TYPE\",\"VAX","8262":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-05-13T00:00:00\",\n              \"lte\": \"2021-05-13T23:59:59\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that the function returns correct elasticsearch query.\"\"\"\n\n    # GIVEN a list of conditions and a list of fields\n    conditions = [\"RECVDATE >= '2021-05-13'\", \"DIED == 'Y'\"]\n    fields = [\"RECVDATE\", \"STATE\", \"AGE_","1517":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-01-11T00:00:00\",\n              \"lte\": \"2022-01-11T23:59:59\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt:\",\n        answer=\"Answer:\",\n        notes=\"Notes:\",\n        context=CONTEXT,\n    )\n\n    # When\n    result = generate_elasticsearch_query(question)\n\n    # Then\n    assert result == EXPECTED_ELAST","5346":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2020-03-01\",\n              \"lte\": \"2020-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_DOSE_SERIES\": \"ONE DOSE\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'Give me all the patients who was taking one pill daily.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should return the correct query\n    assert es_query == EXPECT","1177":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"age_yrs\": {\n              \"gte\": 0.25,\n              \"lte\": 0.25\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"symptom_text\": \"fever\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    name=\"Document Name\",\n                    url=\"https:\/\/example.com\/document-name\",\n                    fields={\n                        \"field_one\": \"value one\",\n                        \"field_two\": \"value two","2497":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-04-11\",\n              \"lte\": \"2021-04-11\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n\n    # When generating the elasticsearch query for the question\n    es_query = generate_elasticsearch_query(question=QUESTION)\n\n    # Then it should match the expected result\n    assert json.loads(es_query) == EXPECTED_ES_QUERY","2419":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-01-29\",\n              \"lte\": \"2022-01-29\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"Give me all the patients who died on 01\/29\/2022.\"\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should return the correct elasticsearch query\n    assert es_query == expected_es_query","4967":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 18,\n              \"lte\": 65\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"creatinine\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef main():\n\n    # Create a parser object\n    my_parser = argparse.ArgumentParser(description='Process some integers.')\n\n    # Add positional arguments\n    my_parser.add_argument('question',\n                           metavar='QUESTION',\n                           type=str,\n                           help='Question text')\n\n    # Add optional arguments\n    my_parser.add_argument('-v', '--verbose', action='store_true',","12842":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Delirium tremens\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"Is there any person who has had COVID-19 before age 65?\"\"\"\n\n    # When generating the elasticsearch query\n    es_query = generate","247":"{\n  \"size\": 3,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-01-05T00:00:00\",\n              \"lte\": \"2022-01-06T00:00:00\"\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"SYMPTOM_TEXT\": {\n              \"query\": \"fever\"\n            }\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'List all the records received between 01\/05\/2022 and 01\/06\/2022.'","11543":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"PNEUMO\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    name=\"Document Name\",\n                    url=\"https:\/\/example.com\/document-name\",\n                    fields={\n                        \"field1\": \"value1\",\n                        \"field2\": \"value2\",\n                    },\n                )\n            ],\n        ),\n        notes=\"Clinical Notes\",\n        id=\"id\",","8513":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 25,\n              \"lte\": 89\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"ZOSTER LIVE AND\/OR HEPB\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(","3916":"{\n  \"from\": 0,\n  \"size\": 30,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-15T00:00:00\",\n              \"lte\": \"2021-08-15T23:59:59\"\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"SYMPTOM_TEXT\": {\n              \"query\": \"08\/15\/2021\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n    assert generate_elasticsearch_query(question=QUESTION_1","1054":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"age_yrs\": {\n              \"gte\": 0.67,\n              \"lte\": 0.67\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\n    \"RECVDATE\",\n    \"STATE\",\n    \"AGE_YRS\",\n    \"VAERS_ID\",\n    \"SEX\",\n    \"SYMPTOM_TEXT\",\n    \"DIED\",\n    \"ER_VISIT\",\n    \"L_THREAT\",\n    \"HOSPITAL\",\n    \"HOSPDAYS\",\n    \"DISABLE\",\n    \"VAX_DATE\",\n    \"LAB_DATA\",\n    \"OTHER_MEDS\",\n    \"CUR_ILL\",\n    \"HISTORY\",\n    \"PRIOR_VAX\",\n    \"TODAYS_DATE\",\n    \"OFC","9246":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_NAME.keyword\": {\n              \"value\": \"USPFIZER INC-2021444230\"\n            }\n          }\n        },\n        {\n          \"range\": {\n            \"TODAYS_DATE\": {\n              \"gte\": \"2021-08-07T00:00:00\",\n              \"lte\": \"2021-08-07T23:59:59\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"What is the number of records that the vaccine recipient got USPFIZER","628":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"GU\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 18,\n              \"lte\": 90\n            }\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_parse_question():\n    q = parse_question(QUESTION)\n\n    assert len(q[\"conditions\"]) == 2\n    assert q[\"conditions\"][0][\"field\"] == \"STATE\"\n    assert q[\"conditions\"][0][\"value\"] == \"GU\"\n    assert q[\"conditions\"][1][\"field\"] == \"AGE_YRS\"\n    assert q[\"conditions\"][1][\"min\"] == 18\n    assert q[\"conditions\"][1][\"max\"] ==","7902":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"03\/29\/21\",\n              \"lte\": \"03\/29\/21\"\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"VAX_DATE\": {\n              \"query\": \"03\/29\/21\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n    assert generate_elasticsearch_query(question=QUESTION_1) == EXPECTED_ES_QUERY_1\n\n    assert generate_elasticsearch_query(question=QUESTION_2) == EXPECTED_ES_QUERY_2\n\n    assert generate","1044":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"age_yrs\": {\n              \"gte\": 104.0,\n              \"lte\": 104.0\n            }\n          }\n        },\n        {\n          \"match_all\": {}\n        }\n      ],\n      \"must\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a list of conditions and a list of fields\n    conditions = [\"104.0\", \">=\", \"104.0\"]\n    fields = [\"age_yrs\"]\n\n    # WHEN generating an elasticsearch query\n    es_query = generate_elasticsearch_query(conditions=conditions, fields=fields)\n\n    # THEN assert it's a valid elasticsearch query\n    assert isinstance(es_query, dict)\n    assert es_query[\"","6586":"###[ What are the top 3 states in terms of number of deaths?]\nPrompt: ### Elasticsearch database with field names:\n# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES### To generate the Elasticsearch query for the question, first we need to get an Elasticsearch POST search template.Then identify the filed names, condition values, and key clauses (such as \u2019must\u2019, \u2019should\u2019, or","10060":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-12-08\",\n              \"lte\": \"2021-12-08\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt:\",\n        answer=\"Answer:\",\n        notes=\"Notes:\",\n        context=CONTEXT,\n    )\n\n    # When\n    result = generate_elasticsearch_query(question)\n\n    # Then\n    assert result == EXPECTED_ELASTICSEARCH_QUERY\n\n\nEXPECTED_SQLITE3_QUERY = \"\"\"-- Prompt: ###","1215":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"CAGE_YR\": {\n              \"gte\": 2015,\n              \"lte\": 2016\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"CLINICAL_TRIALS\": \"Yes\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query can be generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    name=\"Document Name\",\n                    url=\"https:\/\/example.com\/document-name\",\n                    fields={\n                        \"field_one\": \"value one\",\n                        \"field_two","2727":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-07T00:00:00\",\n              \"lte\": \"2021-03-07T23:59:59\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a question in natural language\n    question = 'How many patients died on 03\/07\/2021?'\n\n    # WHEN generating an Elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # THEN assert","3376":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2021-10-14T00:00:00\",\n              \"lte\": \"2021-10-14T23:59:59\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\"RECVDATE\",\"STATE\",\"AGE_YRS\",\"VAERS_ID\",\"SEX\",\"SYMPTOM_TEXT\",\"DIED\",\"ER_VISIT\",\"L_THREAT\",\"HOSPITAL\",\"HOSPDAYS\",\"DISABLE\",\"VAX_DATE\",\"LAB_DATA\",\"OTHER_MEDS\",\"CUR_ILL\",\"HISTORY\",\"PRIOR_VAX\",\"TODAYS_DATE\",\"OFC_VISIT\",\"VAX_TYPE\",\"V","5473":"{\n  \"from\": 0,\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME\": \"AMLODIPINE BESYLATE\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"\n    Prompt: ### Elasticsearch database with field names:\n    # RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_","6328":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Fibrosis\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"STATE\",\n      \"AGE_YRS\",\n      \"VAERS_ID\",\n      \"SEX\",\n      \"SYMPTOM_TEXT\",\n      \"DIED\",\n      \"ER_VISIT\",\n      \"L_THREAT\",\n      \"HOSP","4762":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAERS_ID\": \"10239\"\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"ana\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef main():\n\n    # Get command line arguments\n    args = parse_args()\n\n    # Load config file\n    cfg = load_config(args.config)\n\n    # Connect to ES instance\n    es = connect_es(cfg['ES']['HOST'], cfg['ES']['PORT'])\n\n    # Read in question\n    q = read_question(args.question)\n\n    # Generate query\n    query = generate_query(q)\n\n    # Execute query\n    res = execute_query(es, query)\n\n    # Print results\n    print('Results:')\n    pprint(","10584":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"WAG\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_LOT\": \"4512\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\nPrompt: ### Elasticsearch database with field names:\n# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, V","11207":"\"\"\"\n\ndef main():\n    # Create a parser object\n    my_parser = argparse.ArgumentParser(description='Process some integers.')\n\n    # Add positional arguments\n    my_parser.add_argument('question',\n                           metavar='QUESTION',\n                           type=str,\n                           help='Question text')\n\n    # Add optional arguments\n    my_parser.add_argument('-v', '--verbose',\n                           action='store_true',\n                           help='Verbose output')\n\n    args = my_parser.parse_args()\n\n    if args.verbose:\n        print(\"Question:\", args.question)\n\n\nif __name__ == \"__main__\":\n    main()","10566":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"AMXA\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME\": \"AMX-688A\"\n          }\n        }\n      ],\n      \"must\": []\n    }\n  }\n}\nPrompt: ### Elasticsearch database with field names:\n# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_","8406":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2020-03-01\",\n              \"lte\": \"2020-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"VARICELLA\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'Find all records who got VARICELLA shot before.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should match the expected result\n    assert json.loads(es_","3679":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"06\/05\/2021\",\n              \"lte\": \"06\/05\/2021\"\n            }\n          }\n        },\n        {\n          \"match_phrase\": {\n            \"SYMPTOM_TEXT\": {\n              \"query\": \"onset date of adverse event symptoms\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n\n    # When\n    result = generate_elasticsearch_query(question=QUESTION)\n\n    # Then\n    assert result == EXPECTED_RESULT","1873":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 18,\n              \"lte\": 90\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"SYMPTOM_TEXT\": \"artery vascular complications\"\n          }\n        },\n        {\n          \"match\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"match\": {\n            \"HOSPITAL\": \"Y\"\n          }\n        },\n        {\n          \"match\": {\n            \"DISABLE\": \"Y\"\n          }\n        },\n        {\n          \"match\": {\n            \"CUR_ILL\": \"Y\"\n          }\n        },\n        {\n          \"match\": {\n            \"PRIOR_VAX\": \"Y\"\n          }\n        },\n        {","7037":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        },\n        {\n          \"range\": {\n            \"AGE_YRS\": {\n              \"gte\": 18,\n              \"lte\": 65\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    name=\"Document Name\",\n                    url=\"https:\/\/example.com\/document-name\",\n                    fields={\n                        \"field_one\": \"value one\",\n                        \"field_two\": \"value two\"\n                    }\n                )","10362":"\"\"\"\n\ndef main():\n    # load data\n    df = pd.read_csv('vaers-january-2021.csv')\n\n    # clean data\n    df['VAERS_ID'] = df['VAERS_ID'].astype(str).apply(lambda x: x.zfill(7))\n    df['VAX_DATE'] = pd.to_datetime(df['VAX_DATE'])\n    df['TODAYS_DATE'] = pd.to_datetime(df['TODAYS_DATE'])\n    df['AGE_YRS'] = df['VAX_DATE'].dt.year - df['TODAYS_DATE'].dt.year\n    df['AGE_YRS'] = df['AGE_YRS'].fillna(-1)\n    df['DIED'] = df['DIED'].replace({'Y': 'Yes', 'N': 'No'})\n    df['CUR_ILL'] = df['CUR_ILL","1773":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": true\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'Give me all the patients who have Adverse event after the vaccination.'\n\n    # When generating the elasticsearch query\n    es_query = generate_elasticsearch_query(question=question)\n\n    # Then it should return the correct elasticsearch query\n    assert es_query == expected_es_query","9185":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"USPFIZER INC\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\n    \"RECVDATE\",\n    \"STATE\",\n    \"AGE_YRS\",\n    \"VAERS_ID\",\n    \"SEX\",\n    \"SYMPTOM_TEXT\",\n    \"DIED\",\n    \"ER_VISIT\",\n    \"L_THREAT\",\n    \"HOSPITAL\",\n    \"HOSPDAYS\",\n    \"DISABLE\",\n    \"VAX_DATE\",\n    \"LAB_DATA\",\n    \"OTHER_MEDS\",\n    \"CUR_ILL\",\n    \"HISTORY\",\n    \"PRIOR_VAX\",\n    \"TODAYS_DATE\",\n    \"OFC_VISIT\",\n    \"VAX_TYPE\",\n    \"V","1379":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"cage_months\": {\n              \"gte\": 0.9,\n              \"lte\": 1.0\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": [\n    \"RECVDATE\",\n    \"STATE\",\n    \"AGE_YRS\",\n    \"VAERS_ID\",\n    \"SEX\",\n    \"SYMPTOM_TEXT\",\n    \"DIED\",\n    \"ER_VISIT\",\n    \"L_THREAT\",\n    \"HOSPITAL\",\n    \"HOSPDAYS\",\n    \"DISABLE\",\n    \"VAX_DATE\",\n    \"LAB_DATA\",\n    \"OTHER_MEDS\",\n    \"CUR_ILL\",\n    \"HISTORY\",\n    \"PRIOR_VAX\",\n    \"TODAYS_DATE\",\n    \"OFC_VISIT","6568":"###[ What are the top three states by number of deaths?]\nPrompt: ### Elasticsearch database with field names:\n# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES### To generate the Elasticsearch query for the question, first we need to get an Elasticsearch POST search template.Then identify the filed names, condition values, and key clauses (such as \u2019must\u2019, \u2019should\u2019, or \u2019must not","6455":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"arterial hypertension\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"DIED\",\n      \"HOSPITAL\",\n      \"HOSPDAYS\",\n      \"DISABLE\",\n      \"VAX_DATE\",\n      \"LAB_DATA\",\n      \"OTHER_MEDS\",\n      \"CUR_ILL\",\n      \"HISTORY\",\n      \"PRIOR","9612":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"VAX_MANU\": \"USPFIZER INC\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2021-01-01\",\n              \"lte\": \"2021-12-31\"\n            }\n          }\n        }\n      ]\n    }\n  }\n}\nPrompt: ### What is the average age of all patients who received a Pfizer vaccine in 2021?]\nAnswer:\n{\n  \"size\": 0,\n  \"aggs\": {\n    \"avg_age\": {\n      \"avg\": {\n        \"field\": \"AGE_YRS\"\n      }\n    }\n  },\n  \"query\": {\n    \"bool\": {\n      \"filter\": [","12755":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT.keyword\": \"Erythema Multiforme\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = \"\"\"Is there any person who has had COVID-19 before age 65 died of Erythema Multiforme","4656":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-08-31\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"AGE_YRS\": 56\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"N\"\n          }\n        },\n        {\n          \"term\": {\n            \"OFC_VISIT\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"COUGH\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_DATE\": \"2021","933":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"age_yrs\": {\n              \"gte\": 76.0,\n              \"lte\": 120.0\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"vax_type\": \"COMBO\"\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a list of conditions and a list of fields\n    conditions = [\"VAERS_ID\", \"DIED\"]\n    fields = [\"RECVDATE\", \"STATE\", \"AGE_YRS\", \"VAERS_ID\", \"SEX\", \"SYMPTOM_TEXT\", \"DIED\", \"ER_VISIT\", \"L_THREAT\",","12130":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Pneumonia\"\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME\": \"<NAME>\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME\": \"Varicella\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },","7237":"###[ What are the top three states by number of deaths?]\nPrompt: ### Elasticsearch database with field names:\n# RECVDATE, STATE, AGE_YRS, VAERS_ID, SEX, SYMPTOM_TEXT, DIED, ER_VISIT, L_THREAT, HOSPITAL, HOSPDAYS, DISABLE, VAX_DATE, LAB_DATA, OTHER_MEDS, CUR_ILL, HISTORY, PRIOR_VAX, TODAYS_DATE, OFC_VISIT, VAX_TYPE, VAX_MANU, VAX_LOT, VAX_DOSE_SERIES, VAX_NAME, ALLERGIES### To generate the Elasticsearch query for the question, first we need to get an Elasticsearch POST search template.Then identify the filed names, condition values, and key clauses (such as \u2019must\u2019, \u2019should\u2019, or \u2019must not","5072":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME\": \"JANSSEN\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_TYPE\": \"COMBO\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_DOSE_SERIES\": \"2nd Series\"\n          }\n        },\n        {\n          \"term\": {\n            \"LAB_DATA.MRI_TESTS.LEFT_SHOULDER.RESULT\": \"Negative\"\n          }\n        }\n      ],\n      \"must_not\": []\n    }\n  },\n  \"_source\": {","183":"{\n  \"size\": 5000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2022-01-23T00:00:00\",\n              \"lte\": \"2022-01-24T00:00:00\"\n            }\n          }\n        },\n        {\n          \"match_all\": {}\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language, return the corresponding elasticsearch query\n\n    # When generating the elasticsearch query for the question\n    es_query = generate_elasticsearch_query(question=QUESTION)\n\n    # Then it should match the expected result\n    assert json.loads(es_query) == EXPECTED","1835":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-08-31T00:00:00\",\n              \"lte\": \"2021-09-01T00:00:00\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Myoglobin\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question in natural language\n    question = 'Give me all the patients who have Myoglobin blood after the vaccination.'\n\n    # When generating the elasticsearch query","1820":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Prostate Infection\"\n          }\n        },\n        {\n          \"range\": {\n            \"TODAYS_DATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-09-01\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    # Given a question string, return an elasticsearch query dict\n\n    # When\n    result = generate_elasticsearch_query(question=QUESTION)\n\n    # Then\n    assert result == EXPECTED_RESULT","12653":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": false\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"Cytomegalovirus\"\n          }\n        },\n        {\n          \"term\": {\n            \"LAB_DATA\": \"Negative\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef main():\n\n    # Create a parser object\n    my_parser = argparse.ArgumentParser(description='Process some integers.')\n\n    # Add positional arguments\n    my_parser.add_argument('question',\n                           metavar='QUESTION',\n                           type=str,\n                           help='Question text')\n\n    # Add optional arguments\n    my_parser.add_argument('-v', '--verbose', action='store_true', default=False","5056":"'''\n\ndef main():\n    # Get command line arguments\n    parser = argparse.ArgumentParser(description='Process some integers.')\n    parser.add_argument('--input', type=str, help='Input file')\n    args = parser.parse_args()\n\n    # Read input file into a list of strings\n    lines = []\n    with open(args.input, 'r') as f:\n        for line in f:\n            lines.append(line.strip())\n\n    # Process each line\n    for i, line in enumerate(lines):\n\n        # Split line into fields\n        fields = line.split('|')\n\n        # Extract information about the patient's demographics\n        age = int(fields[2])\n        sex = fields[4]\n        died = fields[6] == '1'\n\n        # Check if the patient is eligible for the vaccine based on their demographics\n        if age >= 18 and sex == 'F' and not died:","11438":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"VA\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"COUGH\"\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"N\"\n          }\n        },\n        {\n          \"term\": {\n            \"HOSPITAL\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"DISABLE\": \"N\"\n          }\n        },\n        {\n          \"term\": {\n            \"CUR_ILL\": \"Y\"\n          }\n        },\n        {\n          \"term\": {","10769":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"STATE\": \"FL\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAERS_ID\": \"FJ1619\"\n          }\n        },\n        {\n          \"range\": {\n            \"VAX_DATE\": {\n              \"gte\": \"2021-08-31\",\n              \"lte\": \"2021-08-31\"\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # GIVEN a list of conditions extracted from a clinical note\n    conditions = [\n        Condition(\n            text=\"Florida\",\n            start=45,\n            end=52","7332":"{\n  \"size\": 10000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"term\": {\n            \"DIED\": false\n          }\n        },\n        {\n          \"term\": {\n            \"HISTORY.keyword\": \"PVC\"\n          }\n        },\n        {\n          \"term\": {\n            \"ALLERGIES.keyword\": \"PVC\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    name=\"Document Name\",\n                    url=\"https:\/\/example.com\/document-name\",\n                    fields={\n                        \"field_one\": \"value one","10466":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"RECVDATE\": {\n              \"gte\": \"2021-03-01\",\n              \"lte\": \"2021-04-01\"\n            }\n          }\n        },\n        {\n          \"term\": {\n            \"STATE\": \"TX\"\n          }\n        },\n        {\n          \"term\": {\n            \"SYMPTOM_TEXT\": \"COUGH\"\n          }\n        },\n        {\n          \"term\": {\n            \"DIED\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"HOSPITAL\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"DISABLE\": \"Y\"\n          }\n        },\n        {\n          \"term\": {\n            \"VAX_NAME\": \"<NAME>\"\n          }\n        }\n      ],\n      \"must_","1109":"{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"age_yrs\": {\n              \"gte\": 100.0,\n              \"lte\": 100.0\n            }\n          }\n        },\n        {\n          \"match_all\": {}\n        }\n      ]\n    }\n  }\n}\n\"\"\"\n\n\ndef test_generate_elasticsearch_query():\n    \"\"\"Test that a valid elasticsearch query is generated.\"\"\"\n\n    # Given\n    question = Question(\n        prompt=\"Prompt\",\n        answer=Answer(\n            text=\"Answer\",\n            confidence=Confidence.HIGH,\n            document=[\n                Document(\n                    name=\"Document Name\",\n                    url=\"https:\/\/example.com\/document-name\",\n                    fields={\n                        \"field_one\": \"value one\",\n                        \"field_two\": \"value two\"\n                    }\n                )\n            ],\n            metadata={\"meta_key\": \"","7771":"\"\"\"\n\ndef main():\n    # Create a new parser object\n    my_parser = argparse.ArgumentParser(description='Process some integers.')\n\n    # Add positional arguments\n    my_parser.add_argument('question',\n                           metavar='QUESTION',\n                           type=str,\n                           help='Question to be answered')\n\n    # Add optional arguments\n    my_parser.add_argument('-v', '--verbose',\n                           action='store_true',\n                           help='Verbose output')\n\n    args = my_parser.parse_args()\n\n    if args.verbose:\n        print(\"Question:\", args.question)\n\n    # Get the answer\n    answer = process_question(args.question)\n\n    # Print the answer\n    print(\"\\nAnswer:\")\n    print(answer)\n\n\nif __name__ == \"__main__\":\n    main()","1378":"{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"range\": {\n            \"cage_months\": {\n              \"gte\": 0.3,\n              \"lte\": 0.3\n            }\n          }\n        }\n      ],\n      \"must\": [],\n      \"must_not\": []\n    }\n  },\n  \"_source\": {\n    \"includes\": [\n      \"*\"\n    ],\n    \"excludes\": []\n  },\n  \"stored_fields\": \"\",\n  \"script_fields\": {},\n  \"docvalue_fields\": [\n    {\n      \"field\": \"cage_months\",\n      \"format\": \"date_time\"\n    }\n  ],\n  \"sort\": [\n    {\n      \"cage_months\": {\n        \"order\": \"asc\"\n      }\n    }\n  ],\n  \"aggregations\": {},\n  \"highlight\": {\n    \"pre_tags\": [\n      \"@kibana-highlighted-field@\"\n    ],\n    \""}}